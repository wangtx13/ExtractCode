org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * bezier node handle handle { index private composite edit edit private bezier path node old node bezier node handle bezier figure owner index { super owner this index = index } draw graphics2 d g { bezier figure f = get bezier figure if f get point count > index { bezier path node v = f get node index if v mask == 0 { draw rectangle g color black color white } else if v mask == bezier path C1_MASK || v mask == bezier path C2_MASK || !f is closed v mask == bezier path C1_MASK | bezier path C2_MASK index == 0 || index == f get node count 1 { draw diamond g color black color white } else { draw circle g color black color white } } } bezier figure get bezier figure { bezier figure get owner } point get location { get bezier figure get point count > index ? view drawing to view get bezier figure get point index 0 new point 10 10 } rectangle basic get bounds { rectangle r = new rectangle get location r grow get handlesize / 2 get handlesize / 2 r } track start point anchor modifiers ex { bezier figure figure = get bezier figure view get drawing fire undoable edit happened edit = new composite edit punkt verschieben point2 d location = view get constrainer constrain point view view to drawing get location point2 d p = view get constrainer constrain point view view to drawing anchor old node = figure get node index fire handle request secondary handles } track step point anchor point modifiers ex { bezier figure figure = get bezier figure figure will change point2 d p = view get constrainer constrain point view view to drawing bezier path node n = figure get node index fire area invalidated n n move to p fire area invalidated n figure basic set node index n figure changed } private fire area invalidated bezier path node v { rectangle2 d dr = new rectangle2 d v x 0 v y 0 0 0 for i=1 i < 3 i++ { dr add v x i v y i } rectangle vr = view drawing to view dr vr grow get handlesize get handlesize fire area invalidated vr } track end point anchor point modifiers ex { bezier figure f = get bezier figure if modifiers ex input event META_DOWN_MASK | input event CTRL_DOWN_MASK != 0 modifiers ex input event BUTTON2_DOWN_MASK == 0 { f will change bezier path node v = f get node index if index > 0 index < f get node count || f is closed { v mask = v mask + 3 % 4 } else if index == 0 { v mask = v mask bezier path C2_MASK == 0 ? bezier path C2_MASK 0 } else { v mask = v mask bezier path C1_MASK == 0 ? bezier path C1_MASK 0 } f basic set node index v f changed fire handle request secondary handles } view get drawing fire undoable edit happened new bezier node edit f index old node f get node index view get drawing fire undoable edit happened edit } @ override is combinable with handle h { } track click point p modifiers ex { bezier figure f = get bezier figure if f get node count > 2 modifiers ex input event META_DOWN_MASK | input event CTRL_DOWN_MASK | input event ALT_DOWN_MASK == 0 { rectangle invalidated area = get draw bounds f will change f basic remove node index f changed fire handle request remove invalidated area } } collection< handle> create secondary handles { bezier figure f = get bezier figure linked list< handle> list = new linked list< handle> bezier path node v = f get node index if v mask bezier path C1_MASK != 0 index != 0 || f is closed { list add new bezier control point handle f index 1 } if v mask bezier path C2_MASK != 0 index < f get node count 1 || f is closed { list add new bezier control point handle f index 2 } if index > 0 || f is closed { i = index == 0 ? f get node count 1 index 1 v = f get node i if v mask bezier path C2_MASK != 0 { list add new bezier control point handle f i 2 } } if index < f get node count 2 || f is closed { i = index == f get node count 1 ? 0 index + 1 v = f get node i if v mask bezier path C1_MASK != 0 { list add new bezier control point handle f i 1 } } list } } 