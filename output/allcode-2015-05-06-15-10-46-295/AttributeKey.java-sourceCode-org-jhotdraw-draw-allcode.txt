org jhotdraw draw import lang reflect * attribute key< t> { private key private t default value private is value allowed attribute key key { this key } attribute key key t default value { this key default value } attribute key key t default value is value allowed { this key = key this default value = default value this is value allowed = is value allowed } get key { key } t get default value { default value } t get figure f { t value = t f get attribute this value == ! is value allowed ? default value value } set figure f t value { if value == ! is value allowed { throw new pointer value not allowed for attribute key +key } f set attribute this value } basic set figure f t value { if value == ! is value allowed { throw new pointer value not allowed for attribute key +key } f basic set attribute this value } equals o { if o instanceof attribute key { attribute key that = attribute key o that key equals this key } } hash { key hash } to { key } is value allowed { is value allowed } args { type variable v = new attribute key< double> hey get get type 0 } is assignable value { if value == { is value allowed } try { t a = t value } catch cast e { } } } 