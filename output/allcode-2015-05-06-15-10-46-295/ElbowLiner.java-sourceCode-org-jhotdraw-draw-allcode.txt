org jhotdraw draw import util * import awt * import awt geom * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output import org jhotdraw xml dom storable elbow liner implements liner dom storable { elbow liner { } collection< handle> create handles bezier path path { } lineout connection figure figure { bezier path path = line connection figure figure get bezier path connector start = figure get start connector connector end = figure get end connector if start == || end == || path == { } point2 d sp = start find start figure point2 d ep = end find end figure path clear path add new bezier path node sp x sp y if sp x == ep x || sp y == ep y { path add new bezier path node ep x ep y } else { rectangle2 d sb = start get bounds sb x += 5d sb y += 5d sb width = 10d sb height = 10d rectangle2 d eb = end get bounds eb x += 5d eb y += 5d eb width = 10d eb height = 10d soutcode = sb outcode sp if soutcode == 0 { soutcode = geom outcode sb eb } eoutcode = eb outcode ep if eoutcode == 0 { eoutcode = geom outcode eb sb } if soutcode geom OUT_TOP | geom OUT_BOTTOM != 0 eoutcode geom OUT_TOP | geom OUT_BOTTOM != 0 { path add new bezier path node sp x sp y + ep y /2 path add new bezier path node ep x sp y + ep y /2 } else if soutcode geom OUT_LEFT | geom OUT_RIGHT != 0 eoutcode geom OUT_LEFT | geom OUT_RIGHT != 0 { path add new bezier path node sp x + ep x /2 sp y path add new bezier path node sp x + ep x /2 ep y } path add new bezier path node ep x ep y } path invalidate path } read dom input in { } write dom output out { } liner clone { try { liner super clone } catch clone not supported ex { internal = new internal ex get message init cause ex throw } } } 