org jhotdraw draw import io i o import org jhotdraw util * import awt * import awt geom * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output connector implements connector { private figure owner private is connect to decorator private is visible private is state persistent connector { owner = } connector figure owner { this owner = owner } set connect to decorator new value { is connect to decorator = new value } is connect to decorator { is connect to decorator } set visible new value { is visible = new value } is visible { is visible } figure get connector target figure f { is connect to decorator f get decorator != ? f get decorator f } contains point2 d p { get owner contains p } draw graphics2 d g { if is visible { rectangle2 d bounds = get bounds ellipse2 d circle = new ellipse2 d bounds x + bounds width / 2 3 bounds y + bounds height / 2 3 6 6 g set color color blue g fill circle } } point2 d find start connection figure connection { find point connection } point2 d find end connection figure connection { find point connection } point2 d find point connection figure connection { geom center get bounds } rectangle2 d get bounds { get owner get bounds } figure get owner { owner } set owner figure new value { owner = new value } clone { try { connector that = connector super clone that } catch clone not supported e { internal = new internal e to throw } } update start location point2 d p { } update end location point2 d p { } point2 d get anchor { geom center get bounds } update anchor point2 d p { } read dom input in i o { if is state persistent { is connect to decorator = in get attribute connect to decorator is visible = in get attribute visible } in open element owner this owner = figure in read 0 in close element } write dom output out i o { if is state persistent { if is connect to decorator { out add attribute connect to decorator } if is visible { out add attribute visible } } out open element owner out write get owner out close element } } 