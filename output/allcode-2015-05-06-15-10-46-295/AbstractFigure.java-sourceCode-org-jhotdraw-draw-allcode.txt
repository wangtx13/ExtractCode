org jhotdraw draw import org jhotdraw util * import javax swing event * import awt * import awt event * import awt font * import awt geom * import util * import javax swing * import javax swing undo * import io * import org jhotdraw geom * figure implements figure { event listener list listener list = new event listener list private is connectors visible private connection figure courting connection private drawing drawing private is interactive private is visible = figure decorator private is draw decorator first = changing depth = 0 figure { } add figure listener figure listener l { listener list add figure listener l } remove figure listener figure listener l { listener list remove figure listener l } add undoable edit listener undoable edit listener l { listener list add undoable edit listener l } remove undoable edit listener undoable edit listener l { listener list remove undoable edit listener l } add notify drawing d { this drawing = d fire figure added } remove notify drawing d { fire figure removed this drawing = } drawing get drawing { drawing } get lock { get drawing == ? this get drawing get lock } set draw decorator first new value { is draw decorator first = new value } is draw decorator first { is draw decorator first } fire area invalidated { fire area invalidated get draw bounds } fire area invalidated rectangle2 d invalidated area { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this invalidated area figure listener listeners i+1 figure area invalidated event } } } } fire figure request remove { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure request remove event } } } } fire figure added { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure added event } } } } fire figure removed { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure removed event } } } } fire figure changed { fire figure changed get bounds } fire figure changed rectangle2 d changed area { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this changed area figure listener listeners i+1 figure changed event } } } } fire figure changed figure event event { if listener list get listener count > 0 { listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { figure listener listeners i+1 figure changed event } } } } fire attribute changed attribute key attribute old value new value { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure listener { if event == event = new figure event this attribute old value new value figure listener listeners i+1 figure attribute changed event } } } } fire undoable edit happened undoable edit edit { undoable edit event event = if listener list get listener count > 0 { listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if event == event = new undoable edit event this edit if listeners i == undoable edit listener { undoable edit listener listeners i+1 undoable edit happened event } } } } figure clone { try { figure that = figure super clone that listener list = new event listener list that is connectors visible = that courting connection = if this decorator != { that decorator = figure this decorator clone } that } catch clone not supported e { internal = new internal e get message init cause e throw } } figure basic clone hash map< figure figure> old to new { } remap hash map< figure figure> old to new { } collection< handle> create handles detail level { linked list< handle> handles = new linked list< handle> if detail level == 0 { box handle kit add box handles this handles } handles } cursor get cursor point2 d p { if contains p { cursor get predefined cursor cursor HAND_CURSOR } else { cursor get default cursor } } set bounds rectangle2 d bounds { set bounds new point2 d bounds x bounds y new point2 d bounds x + bounds width bounds y + bounds height } set bounds point2 d anchor point2 d { point2 d old anchor = get start point point2 d old = get end point if ! old anchor equals anchor || ! old equals { will change basic set bounds anchor changed fire undoable edit happened new set bounds edit this old anchor old anchor } } can connect { } invalidate { fire area invalidated get draw bounds } is changing { changing depth != 0 } get changing depth { changing depth } will change { changing depth++ invalidate } validate { } changed { if changing depth <= 1 { validate fire figure changed get draw bounds changing depth = 0 } else { changing depth } } transform affine transform tx { will change basic transform tx fire undoable edit happened new transform edit this tx changed } basic transform affine transform ty connector find connector point2 d p connection figure prototype { new chop box connector this } includes figure figure { figure == this } figure find figure inside point2 d p { contains p ? this } connector find compatible connector connector c is start { new chop box connector this } collection< action> get actions point2 d p { collections empty list } tool get tool point2 d p { } handle mouse click point2 d p mouse event evt drawing view view { } handle drop point2 d p collection< figure> dropped figures drawing view view { } point2 d get end point { rectangle2 d r = get bounds new point2 d r x + r width r y + r height } point2 d get start point { rectangle2 d r = get bounds new point2 d r x r y } dimension2 d get preferred size { rectangle2 d r = get bounds new dimension2 d r width r height } remap map old to new { } is interactive { is interactive } set interactive b { is interactive = b } is visible { is visible } set visible new value { if new value != is visible { will change is visible = new value changed } } set connectors visible is visible connection figure connection { will change is connectors visible = is visible courting connection = connection changed } is connectors visible { is connectors visible } connection figure get courting connection { courting connection } collection< figure> get decomposition { linked list< figure> list = new linked list< figure> list add this list } font render context get font render context { font render context frc = if frc == { frc = new font render context new affine transform options is text antialiased options is fractional metrics } frc } request remove { fire figure request remove } get layer { 0 } get tooltip point2 d p { } set decorator figure new value { will change decorator = new value if decorator != { decorator basic set bounds get start point get end point } changed } figure get decorator { decorator } draw graphics2 d g { if is draw decorator first { draw decorator g draw figure g } else { draw figure g draw decorator g } } draw figure graphics2 d g draw decorator graphics2 d g { if decorator != { update decorator bounds decorator draw g } } update decorator bounds { if decorator != { point2 d sp = get start point point2 d ep = get end point insets2 d decorator insets = attribute keys DECORATOR_INSETS get this sp x = decorator insets left sp y = decorator insets top ep x += decorator insets right ep y += decorator insets bottom decorator basic set bounds sp ep } } rectangle2 d get draw bounds { rectangle2 d figure draw bounds = get figure draw bounds if decorator != { update decorator bounds figure draw bounds add decorator get draw bounds } figure draw bounds } rectangle2 d get figure draw bounds to { builder buf = new builder buf append get get name substring get get name last index of ' ' +1 buf append '@' buf append hash buf to } } 