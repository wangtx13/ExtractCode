org jhotdraw draw import awt * import awt geom * import io * import util * import javax swing undo * import org jhotdraw draw attribute keys * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output round rectangle figure attributed figure { private round rectangle2 d roundrect private DEFAULT_ARC = 20 round rectangle figure { this 0 0 0 0 } round rectangle figure x y width height { roundrect = new round rectangle2 d x y width height DEFAULT_ARC DEFAULT_ARC } rectangle2 d get bounds { rectangle2 d roundrect get bounds2 d } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d roundrect get bounds2 d grow = attribute keys get perpendicular hit growth this geom grow r grow grow r } get arc width { roundrect arcwidth } get arc height { roundrect archeight } set arc w h { old width = roundrect get arc width old height = roundrect get arc height roundrect arcwidth = w roundrect archeight = h fire figure changed get draw bounds fire undoable edit happened new undoable edit { get presentation name { rundung } undo cannot undo { super undo will change roundrect arcwidth = old width roundrect archeight = old height changed } redo cannot redo { super redo will change roundrect arcwidth = w roundrect archeight = h changed } } } draw fill graphics2 d g { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular fill growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 if r width > 0 r height > 0 { g fill r } } draw stroke graphics2 d g { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular draw growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 if r width > 0 r height > 0 { g draw r } } contains point2 d p { round rectangle2 d r = round rectangle2 d roundrect clone grow = attribute keys get perpendicular hit growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 r contains p } basic set bounds point2 d anchor point2 d { roundrect x = math min anchor x x roundrect y = math min anchor y y roundrect width = math max 0 1 math abs x anchor x roundrect height = math max 0 1 math abs y anchor y } basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> super create handles detail level handles add new round rect radius handle this handles } connector find connector point2 d p connection figure prototype { new chop round rect connector this } connector find compatible connector connector c is start connector { new chop round rect connector this } round rectangle figure clone { round rectangle figure that = round rectangle figure super clone that roundrect = round rectangle2 d this roundrect clone that } @ override read dom input in i o { super read in roundrect arcwidth = in get attribute arc width DEFAULT_ARC roundrect archeight = in get attribute arc height DEFAULT_ARC } @ override write dom output out i o { super write out out add attribute arc width roundrect arcwidth out add attribute arc height roundrect archeight } restore to geometry { round rectangle2 d r = round rectangle2 d geometry roundrect x = r x roundrect y = r y roundrect width = r width roundrect height = r height } get restore data { roundrect clone } point2 d chop point2 d from { rectangle2 d outer = get bounds grow switch STROKE_PLACEMENT get this { case c e n t e r default grow = attribute keys get stroke total width this / 2 break case o u t sid e grow = attribute keys get stroke total width this break case i n sid e grow = 0 break } outer x = grow outer y = grow outer width += grow * 2 outer height += grow * 2 rectangle2 d inner = rectangle2 d outer clone gw = get arc width + grow * 2 / 2 gh = get arc height + grow *2 / 2 inner x = gw inner y = gh inner width += gw * 2 inner height += gh * 2 angle = geom point to angle outer from point2 d p = geom angle to point outer geom point to angle outer from if p x == outer x || p x == outer x + outer width { p y = math min math max p y inner y inner y + inner height } else { p x = math min math max p x inner x inner x + inner width } p } } 