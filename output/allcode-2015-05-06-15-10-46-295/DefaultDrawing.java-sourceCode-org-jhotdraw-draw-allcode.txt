org jhotdraw draw import org jhotdraw util reversed list import awt * import awt geom * import javax swing * import javax swing event * import javax swing undo * import org jhotdraw util * import util * default drawing drawing implements figure listener undoable edit listener { private list< figure> figures = new list< figure> private needs sorting = default drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure figure add figure listener this figure add undoable edit listener this invalidate sort order } basic remove figure figure { figures remove figure figure remove figure listener this figure remove undoable edit listener this invalidate sort order } draw graphics2 d g { synchronized get lock { ensure sorted list< figure> to draw = new list< figure> figures size rectangle clip rect = g get clip bounds for figure f figures { if f get draw bounds intersects clip rect { to draw add f } } draw g to draw } } draw graphics2 d g collection< figure> figures { for figure f figures { if f is visible { f draw g } } } collection< figure> sort collection< figure> c { hash set< figure> unsorted = new hash set< figure> unsorted add all c list< figure> sorted = new list< figure> c size for figure f figures { if unsorted contains f { sorted add f unsorted remove f } } for figure f c { if unsorted contains f { sorted add f unsorted remove f } } sorted } figure area invalidated figure event e { fire area invalidated e get invalidated area } figure changed figure event e { invalidate sort order fire area invalidated e get invalidated area } figure added figure event e { } figure removed figure event e { } figure request remove figure event e { remove e get figure } figure find figure point2 d p { for figure f get figures front to back { if f is visible f contains p { f } } } figure find figure except point2 d p figure ignore { for figure f get figures front to back { if f != ignore f is visible f contains p { f } } } figure find figure except point2 d p collection< figure> ignore { for figure f get figures front to back { if ! ignore contains f f is visible f contains p { f } } } collection< figure> find figures rectangle2 d bounds { list< figure> intersection = new list< figure> for figure f figures { if f is visible f get bounds intersects bounds { intersection add f } } intersection } collection< figure> find figures within rectangle2 d bounds { list< figure> contained = new list< figure> for figure f figures { if f is visible bounds contains f get bounds { contained add f } } contained } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 d p { figure f = find figure p f == ? f find figure inside p } util list< figure> get figures front to back { ensure sorted new reversed list< figure> figures } bring to front figure figure { if figures remove figure { figures add figure invalidate sort order fire area invalidated figure get draw bounds } } send to back figure figure { if figures remove figure { figures add 0 figure invalidate sort order fire area invalidated figure get draw bounds } } undoable edit happened undoable edit event e { fire undoable edit happened e get edit } figure attribute changed figure event e { } contains figure f { figures contains f } private invalidate sort order { needs sorting = } private ensure sorted { if needs sorting { collections sort figures figure layer comparator i n s t a n c e needs sorting = } } } 