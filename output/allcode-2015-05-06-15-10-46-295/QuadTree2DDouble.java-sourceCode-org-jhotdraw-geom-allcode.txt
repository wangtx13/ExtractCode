org jhotdraw geom import awt geom * import util * import awt * quad tree2 d double< t> { private hash map< t rectangle2 d double> outside = new hash map< t rectangle2 d double> private quad node root private max capacity = 32 private min size = 32 private max outside = 32 quad tree2 d { root = new quad node new rectangle2 d 0 0 800 600 } quad tree2 d rectangle2 d bounds { root = new quad node bounds } add t o rectangle2 d bounds { if root bounds contains bounds { root add o rectangle2 d bounds clone } else { outside put o rectangle2 d bounds clone if outside size > max outside { reorganize } } } reorganize { root join outside put all root root clear iterator< map entry< t rectangle2 d double>> i = outside entry set iterator map entry< t rectangle2 d double> entry = i next rectangle2 d tree bounds = rectangle2 d entry get value clone while i has next { entry = i next rectangle2 d bounds = entry get value tree bounds add bounds } root bounds = tree bounds i = outside entry set iterator while i has next { entry = i next root add entry get key entry get value } outside clear } remove t o { outside remove o root remove o } collection< t> find contains point2 d p { hash set< t> result = new hash set< t> root find contains p result for map entry< t rectangle2 d double> entry outside entry set { if entry get value contains p { result add entry get key } } result } collection< t> find intersects rectangle2 d r { find intersects new rectangle2 d r get x r get y r get width r get height } collection< t> find intersects rectangle2 d r { hash set< t> result = new hash set< t> root find intersects r result for map entry< t rectangle2 d double> entry outside entry set { if entry get value intersects r { result add entry get key } } result } collection< t> find inside rectangle2 d r { hash set< t> result = new hash set< t> root find inside r result for map entry< t rectangle2 d double> entry outside entry set { if r contains entry get value { result add entry get key } } result } private quad node { private rectangle2 d bounds private hash map< t rectangle2 d double> private quad node north east private quad node north west private quad node south east private quad node south west quad node rectangle2 d bounds { this bounds = bounds this = new hash map< t rectangle2 d double> } is leaf { north east == } remove t o { if remove o == ! is leaf { north east remove o north west remove o south east remove o south west remove o } } add t o rectangle2 d o bounds { if is leaf size >= max capacity bounds width > min size bounds height > min size { split } if is leaf || o bounds contains bounds { put o o bounds } else { if north east bounds intersects o bounds { north east add o o bounds } if north west bounds intersects o bounds { north west add o o bounds } if south east bounds intersects o bounds { south east add o o bounds } if south west bounds intersects o bounds { south west add o o bounds } } } split { if is leaf { hw = bounds width / 2 hh = bounds height / 2 north west = new quad node new rectangle2 d bounds x bounds y hw hh north east = new quad node new rectangle2 d bounds x + hw bounds y bounds width hw hh south west = new quad node new rectangle2 d bounds x bounds y + hh hw bounds height hh south east = new quad node new rectangle2 d bounds x + hw bounds y + hh bounds width hw bounds height hh hash map< t rectangle2 d double> temp = = new hash map< t rectangle2 d double> for map entry< t rectangle2 d double> entry temp entry set { add entry get key entry get value } } } join { if ! is leaf { north west join north east join south west join south east join put all north west put all north east put all south west put all south east north west = north east = south west = south east = } } find contains point2 d p hash set< t> result { if bounds contains p { for map entry< t rectangle2 d double> entry entry set { if entry get value contains p { result add entry get key } } if ! is leaf { north west find contains p result north east find contains p result south west find contains p result south east find contains p result } } } find intersects rectangle2 d r hash set< t> result { if bounds intersects r { old size = result size for map entry< t rectangle2 d double> entry entry set { if entry get value intersects r { result add entry get key } } if ! is leaf { north west find intersects r result north east find intersects r result south west find intersects r result south east find intersects r result } } } find inside rectangle2 d r hash set< t> result { if bounds intersects r { for map entry< t rectangle2 d double> entry entry set { if r contains entry get value { result add entry get key } } if ! is leaf { north west find inside r result north east find inside r result south west find inside r result south east find inside r result } } } } } 