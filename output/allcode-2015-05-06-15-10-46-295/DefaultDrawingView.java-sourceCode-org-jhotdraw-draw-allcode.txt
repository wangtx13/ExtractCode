org jhotdraw draw import org jhotdraw gui datatransfer composite transferable import org jhotdraw util * import org jhotdraw undo * import awt * import awt datatransfer * import awt geom * import awt color * import awt event * import io * import util * import javax swing * import org jhotdraw app editable component import org jhotdraw geom * import org jhotdraw xml * import org jhotdraw xml xml transferable default drawing view j component implements drawing view drawing listener handle listener editable component { private drawing drawing private set< figure> dirty figures = new hash set< figure> private set< figure> selected figures = new hash set< figure> private rainbow = 0 private linked list< handle> selection handles = new linked list< handle> private handle secondary handle owner private linked list< handle> secondary handles = new linked list< handle> private handles are valid = private dimension preferred size private scale factor = 1 private point2 d translate = new point2 d 0 0 private detail level private dom factory dom factory private drawing editor editor private constrainer constrainer = new grid constrainer 1 1 private j label empty drawing label default drawing view { init components set focusable add focus listener new focus listener { focus gained focus event e { repaint } focus lost focus event e { repaint } } } private init components { button group1 = new javax swing button group set layout set background new awt color 255 255 255 } drawing get drawing { drawing } util set get tools { } set empty drawing message new value { old value = empty drawing label == ? empty drawing label get text if new value == { empty drawing label = } else { empty drawing label = new j label new value empty drawing label set horizontal alignment j label c e n t e r } fire property change empty drawing message old value new value repaint } get empty drawing message { empty drawing label == ? empty drawing label get text } paint component graphics gr { graphics2 d g = graphics2 d gr g set rendering hint rendering hints KEY_ALPHA_INTERPOLATION rendering hints VALUE_ALPHA_INTERPOLATION_QUALITY g set rendering hint rendering hints KEY_ANTIALIASING rendering hints VALUE_ANTIALIAS_ON g set rendering hint rendering hints KEY_STROKE_CONTROL rendering hints VALUE_STROKE_NORMALIZE g set rendering hint rendering hints KEY_FRACTIONALMETRICS options is fractional metrics ? rendering hints VALUE_FRACTIONALMETRICS_ON rendering hints VALUE_FRACTIONALMETRICS_OFF g set rendering hint rendering hints KEY_FRACTIONALMETRICS rendering hints VALUE_FRACTIONALMETRICS_OFF g set rendering hint rendering hints KEY_INTERPOLATION rendering hints VALUE_INTERPOLATION_BICUBIC g set rendering hint rendering hints KEY_RENDERING rendering hints VALUE_RENDER_QUALITY g set rendering hint rendering hints KEY_TEXT_ANTIALIASING options is text antialiased ? rendering hints VALUE_TEXT_ANTIALIAS_ON rendering hints VALUE_TEXT_ANTIALIAS_OFF draw background g draw grid g draw drawing g draw handles g draw tool g } draw background graphics2 d g { x = translate x * scale factor y = translate y * scale factor w = get width h = get height g set color get background g fill rect x y w x h y if y > 0 { g set color new color 0xf0f0f0 g fill rect 0 0 w y } if x > 0 { g set color new color 0xf0f0f0 g fill rect 0 0 x h } } draw grid graphics2 d g { constrainer draw g this } draw drawing graphics2 d gr { if drawing != { if drawing get figure count == 0 empty drawing label != { empty drawing label set bounds 0 0 get width get height empty drawing label paint gr } else { graphics2 d g = graphics2 d gr create affine transform tx = g get transform tx translate translate x * scale factor translate y * scale factor tx scale scale factor scale factor g set transform tx drawing set font render context g get font render context drawing draw g g dispose } } } draw handles awt graphics2 d g { if editor != editor get focused view == this { validate handles for handle h get selection handles { h draw g } for handle h get secondary handles { h draw g } } } draw tool graphics2 d g { if editor != editor get view == this editor get tool != { editor get tool draw g } } set drawing drawing d { if this drawing != { this drawing remove drawing listener this clear selection } this drawing = d if this drawing != { this drawing add drawing listener this } invalidate dimension invalidate if get parent != get parent validate repaint } repaint rectangle2 d r { rectangle vr = drawing to view r vr grow 1 1 repaint vr } area invalidated drawing event evt { repaint evt get invalidated area invalidate dimension } area invalidated handle event evt { repaint evt get invalidated area invalidate dimension } figure added drawing event evt { if evt get drawing get figure count == 1 { repaint } else { repaint evt get invalidated area } invalidate dimension } figure removed drawing event evt { if evt get drawing get figure count == 0 { repaint } else { repaint evt get invalidated area } remove from selection evt get figure invalidate dimension } invalidate { invalidate dimension super invalidate } add to selection figure figure { selected figures add figure invalidate handles fire selection changed repaint } add to selection collection< figure> figures { selected figures add all figures invalidate handles fire selection changed repaint } remove from selection figure figure { if selected figures remove figure { invalidate handles fire selection changed } repaint } toggle selection figure figure { if selected figures contains figure { selected figures remove figure } else { selected figures add figure } fire selection changed invalidate handles repaint } select all { selected figures clear selected figures add all drawing get figures invalidate handles fire selection changed repaint } clear selection { if get selection count > 0 { selected figures clear invalidate handles fire selection changed } repaint } is figure selected figure check figure { selected figures contains check figure } collection< figure> get selected figures { collections unmodifiable set selected figures } get selection count { selected figures size } private util list< handle> get selection handles { validate handles collections unmodifiable list selection handles } private util list< handle> get secondary handles { validate handles collections unmodifiable list secondary handles } private invalidate handles { if handles are valid { handles are valid = rectangle invalidated area = for handle handle selection handles { handle remove handle listener this if invalidated area == { invalidated area = handle get draw bounds } else { invalidated area add handle get draw bounds } handle dispose } selection handles clear secondary handles clear switch selected figures size { case 0 if invalidated area != { repaint invalidated area } break case 1 if invalidated area != { repaint invalidated area } break default repaint break } } } private validate handles { if ! handles are valid { handles are valid = rectangle invalidated area = level = detail level do { for figure figure get selected figures { for handle handle figure create handles level { handle set view this selection handles add handle handle add handle listener this if invalidated area == { invalidated area = handle get bounds } else { invalidated area add handle get bounds } } } } while level > 0 selection handles size == 0 detail level = level + 1 if invalidated area != { repaint invalidated area } } } handle find handle point p { validate handles for handle handle new reversed list< handle> get secondary handles { if handle contains p { handle } } for handle handle new reversed list< handle> get selection handles { if handle contains p { handle } } } collection< handle> get compatible handles handle master { validate handles hash set< figure> owners = new hash set< figure> linked list< handle> compatible handles = new linked list< handle> owners add master get owner compatible handles add master for handle handle get selection handles { if ! owners contains handle get owner handle is combinable with master { owners add handle get owner compatible handles add handle } } compatible handles } figure find figure point p { get drawing find figure view to drawing p } collection< figure> find figures rectangle r { get drawing find figures view to drawing r } collection< figure> find figures within rectangle r { get drawing find figures within view to drawing r } add figure selection listener figure selection listener fsl { listener list add figure selection listener fsl } remove figure selection listener figure selection listener fsl { listener list remove figure selection listener fsl } fire selection changed { if listener list get listener count > 0 { figure selection event event = listeners = listener list get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figure selection listener { if event == event = new figure selection event this figure selection listener listeners i+1 selection changed event } } } } handle request remove handle event e { selection handles remove e get handle e get handle dispose invalidate handles repaint e get invalidated area } invalidate dimension { preferred size = } constrainer get constrainer { constrainer } set constrainer constrainer new value { constrainer old value = constrainer constrainer = new value repaint fire property change constrainer old value new value } dimension get preferred size { if preferred size == { dimension2 d d = new dimension2 d if drawing != { translate x = 0 translate y = 0 for figure f drawing get figures { rectangle2 d r = f get draw bounds d width = math max d width r x + r width d height = math max d height r y + r height translate x = math min translate x r x translate y = math min translate y r y } } preferred size = new dimension d width + 10 translate x * scale factor d height + 10 translate y * scale factor fire view transform changed repaint } preferred size } point drawing to view point2 d p { new point p x translate x * scale factor p y translate y * scale factor } point2 d view to drawing point p { new point2 d p x / scale factor + translate x p y / scale factor + translate y } rectangle drawing to view rectangle2 d r { new rectangle r x translate x * scale factor r y translate y * scale factor r width * scale factor r height * scale factor } rectangle2 d view to drawing rectangle r { new rectangle2 d r x / scale factor + translate x r y / scale factor + translate y r width / scale factor r height / scale factor } container get container { this } get scale factor { scale factor } set scale factor new value { old value = scale factor scale factor = new value fire view transform changed fire property change scale factor old value new value invalidate dimension invalidate if get parent != get parent validate repaint } fire view transform changed { for handle handle selection handles { handle view transform changed } for handle handle secondary handles { handle view transform changed } } set handle detail level new value { detail level = new value invalidate handles repaint } get handle detail level { detail level } handle request secondary handles handle event e { secondary handle owner = e get handle secondary handles clear secondary handles add all secondary handle owner create secondary handles for handle h secondary handles { h set view this h add handle listener this } repaint } affine transform get drawing to view transform { affine transform t = new affine transform t scale scale factor scale factor t translate translate x translate y t } set dom factory dom factory new value { dom factory old value = dom factory this dom factory = new value fire property change dom factory old value new value } dom factory get dom factory { dom factory } copy { if dom factory == { get toolkit beep } hash set< figure> to be copied = new hash set< figure> get selected figures if to be copied size == 0 byte output stream out = new byte output stream try { nano xml lite dom output domo = new nano xml lite dom output dom factory domo open element drawing clip for figure f get drawing get figures { if to be copied contains f { domo write f } } domo close element domo save out byte data = out to byte composite transferable transfer = new composite transferable transfer add new xml transferable data application/x drawing clip drawing clip transfer add new xml transferable data text/xml drawing clip toolkit get default toolkit get clipboard set contents transfer transfer } catch i o e { e print stack trace get toolkit beep } } cut { if dom factory == { get toolkit beep } copy delete } delete { list< figure> to be deleted = new list< figure> get selected figures clear selection get drawing remove all to be deleted } paste { if dom factory == { get toolkit beep } try { list< figure> to be selected = new list< figure> data flavor flavor = new data flavor application/x drawing clip drawing clip transferable transfer = toolkit get default toolkit get clipboard get contents this if transfer is data flavor supported flavor { composite edit ce = new composite edit paste get drawing fire undoable edit happened ce for figure f new linked list< figure> get selected figures { get drawing remove f } input stream in = try { in = input stream transfer get transfer data flavor nano xml lite dom input domi = new nano xml lite dom input dom factory in domi open element drawing clip for i=0 n=domi get element count i < n i++ { figure f = figure domi read i get drawing add f to be selected add f } } finally { if in != in close } clear selection add to selection to be selected get drawing fire undoable edit happened ce } else { toolkit get default toolkit beep } } catch throwable e { e print stack trace } } duplicate { collection< figure> sorted = get drawing sort get selected figures hash map< figure figure> original to duplicate map = new hash map< figure figure> sorted size clear selection drawing drawing = get drawing list< figure> duplicates = new list< figure> sorted size affine transform tx = new affine transform tx translate 5 5 for figure f sorted { figure d = figure f clone d basic transform tx duplicates add d original to duplicate map put f d drawing add d } for figure f duplicates { f remap original to duplicate map } add to selection duplicates } remove notify drawing editor editor { this editor = repaint } add notify drawing editor editor { this editor = editor repaint } private javax swing button group button group1 } 