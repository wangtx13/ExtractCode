net n3 nanoxml import io i o import io reader import io char reader xml util { skip comment i xml reader reader i o xml parse { if reader read != ' ' { xml util expected input reader get systemid reader get line nr <! } dashes read = 0 for { char ch = reader read switch ch { case ' ' dashes read++ break case '>' if dashes read == 2 { } default dashes read = 0 } } } skip tag i xml reader reader i o xml parse { level = 1 while level > 0 { char ch = reader read switch ch { case '<' ++level break case '>' level break } } } scan publicid buffer publicid i xml reader reader i o xml parse { if ! xml util check literal reader u b l i c { } xml util skip whitespace reader publicid append xml util scan reader '\0' xml util skip whitespace reader xml util scan reader '\0' } scan systemid i xml reader reader i o xml parse { if ! xml util check literal reader y s t e m { } xml util skip whitespace reader xml util scan reader '\0' } scan identifier i xml reader reader i o xml parse { buffer result = new buffer for { char ch = reader read if ch == '_' || ch == ' ' || ch == ' ' || ch == ' ' || ch >= 'a' ch <= 'z' || ch >= ' a' ch <= ' z' || ch >= '0' ch <= '9' || ch > '\u007 e' { result append ch } else { reader unread ch break } } result to } scan i xml reader reader char entity char i xml entity resolver entity resolver i o xml parse { buffer result = new buffer starting level = reader get stream level char delim = reader read if delim != '\'' delim != ' ' { xml util expected input reader get systemid reader get line nr delimited } for { str = xml util read reader entity char char ch = str char at 0 if ch == entity char { if str char at 1 == '#' { result append xml util process char literal str } else { xml util process entity str reader entity resolver } } else if ch == ' ' { reader unread ch str = xml util read reader ' ' if str char at 1 == '#' { result append xml util process char literal str } else { result append str } } else if reader get stream level == starting level { if ch == delim { break } else if ch == 9 || ch == 10 || ch == 13 { result append ' ' } else { result append ch } } else { result append ch } } result to } process entity entity i xml reader reader i xml entity resolver entity resolver i o xml parse { entity = entity substring 1 entity length 1 reader entity reader = entity resolver get entity reader entity if entity reader == { xml util invalid entity reader get systemid reader get line nr entity } external entity = entity resolver is external entity entity reader start new stream entity reader !external entity } char process char literal entity i o xml parse { if entity char at 2 == 'x' { entity = entity substring 3 entity length 1 char integer parse entity 16 } else { entity = entity substring 2 entity length 1 char integer parse entity 10 } } skip whitespace i xml reader reader buffer buffer i o { char ch if buffer == { do { ch = reader read } while ch == ' ' || ch == '\t' || ch == '\n' } else { for { ch = reader read if ch != ' ' ch != '\t' ch != '\n' { break } if ch == '\n' { buffer append '\n' } else { buffer append ' ' } } } reader unread ch } read i xml reader reader char entity char i o xml parse { char ch = reader read buffer buf = new buffer buf append ch if ch == entity char { while ch != ' ' { ch = reader read buf append ch } } buf to } char read char i xml reader reader char entity char i o xml parse { str = xml util read reader entity char char ch = str char at 0 if ch == entity char { xml util unexpected entity reader get systemid reader get line nr str } ch } check literal i xml reader reader literal i o xml parse { for i = 0 i < literal length i++ { if reader read != literal char at i { } } } expected input systemid line nr expected xml parse { throw new xml parse systemid line nr expected + expected } invalid entity systemid line nr entity xml parse { throw new xml parse systemid line nr invalid entity ` + entity + ' } unexpected entity systemid line nr entity xml parse { throw new xml parse systemid line nr no entity reference is expected here + entity + } unexpected c d a t a systemid line nr xml parse { throw new xml parse systemid line nr no c d a t a section is expected here } invalid input systemid line nr unexpected xml parse { throw new xml parse systemid line nr invalid input + unexpected } wrong closing tag systemid line nr expected name wrong name xml parse { throw new xml parse systemid line nr closing tag does not match opening tag ` + wrong name + ' != ` + expected name + ' } closing tag not empty systemid line nr xml parse { throw new xml parse systemid line nr closing tag must be empty } missing element systemid line nr parent element name missing element name xml validation { throw new xml validation xml validation MISSING_ELEMENT systemid line nr missing element name element + parent element name + expects to have a + missing element name } unexpected element systemid line nr parent element name unexpected element name xml validation { throw new xml validation xml validation UNEXPECTED_ELEMENT systemid line nr unexpected element name unexpected + unexpected element name + in a + parent element name } missing attribute systemid line nr element name attribute name xml validation { throw new xml validation xml validation MISSING_ATTRIBUTE systemid line nr element name attribute name element + element name + expects an attribute named + attribute name } unexpected attribute systemid line nr element name attribute name xml validation { throw new xml validation xml validation UNEXPECTED_ATTRIBUTE systemid line nr element name attribute name element + element name + did not expect an attribute + named + attribute name } invalid attribute value systemid line nr element name attribute name attribute value xml validation { throw new xml validation xml validation ATTRIBUTE_WITH_INVALID_VALUE systemid line nr element name attribute name attribute value invalid value for attribute + attribute name } missing p c data systemid line nr parent element name xml validation { throw new xml validation xml validation MISSING_PCDATA systemid line nr missing # p c d a t a in element + parent element name } unexpected p c data systemid line nr parent element name xml validation { throw new xml validation xml validation UNEXPECTED_PCDATA systemid line nr unexpected # p c d a t a in element + parent element name } validation systemid line nr message element name attribute name attribute value xml validation { throw new xml validation xml validation MISC_ERROR systemid line nr element name attribute name attribute value message } } 