org jhotdraw draw import awt * import awt geom * import io * import util * import org jhotdraw draw attribute keys * import org jhotdraw geom geom import org omg c o r b a m a r s h a l diamond figure attributed figure { attribute key< boolean> IS_QUADRATIC = new attribute key< boolean> is quadratic private rectangle2 d rectangle diamond figure { this 0 0 0 0 } diamond figure x y width height { rectangle = new rectangle2 d x y width height } draw fill graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone if is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = new general path diamond move to float r x + r width / 2 float r y diamond line to float r x + r width float r y + r height / 2 diamond line to float r x + r width / 2 float r y + r height diamond line to float r x float r y + r height / 2 diamond close path g fill diamond } draw stroke graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone if is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular draw growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = new general path diamond move to float r x + r width / 2 float r y diamond line to float r x + r width float r y + r height / 2 diamond line to float r x + r width / 2 float r y + r height diamond line to float r x float r y + r height / 2 diamond close path g draw diamond } rectangle2 d get bounds { rectangle2 d bounds = rectangle2 d rectangle clone bounds } rectangle2 d get figure draw bounds { rectangle2 d r = rectangle2 d rectangle clone if is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular hit growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } r } contains point2 d p { rectangle2 d r = rectangle2 d rectangle clone if is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attribute keys get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d line length = math sqrt w * w + h * h scale = grow / line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } general path diamond = new general path diamond move to float r x + r width / 2 float r y diamond line to float r x + r width float r y + r height / 2 diamond line to float r x + r width / 2 float r y + r height diamond line to float r x float r y + r height / 2 diamond close path diamond contains p } basic set bounds point2 d anchor point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } restore to geometry { rectangle2 d r = rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } get restore data { rectangle clone } is quadratic { b = get attribute IS_QUADRATIC b == ? b value } set quadratic new value { set attribute IS_QUADRATIC new value } connector find connector point2 d p connection figure prototype { new chop diamond connector this } connector find compatible connector connector c is start { new chop diamond connector this } diamond figure clone { diamond figure that = diamond figure super clone that rectangle = rectangle2 d this rectangle clone that } } 