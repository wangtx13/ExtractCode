org jhotdraw draw import org jhotdraw undo * import org jhotdraw util * import awt * import awt geom * import org jhotdraw geom * connection handle locator handle { private composite edit edit private connection figure current connection private connection figure prototype private figure target figure connection handle figure owner locator locator connection figure prototype { super owner locator this prototype = prototype } draw graphics2 d g { draw circle g color blue color blue darker } track start point anchor modifiers ex { set connection create connection resource bundle util labels = resource bundle util get l a f bundle org jhotdraw draw labels edit = new composite edit labels get create connection fire undoable edit happened edit point2 d p = get location on drawing get connection set start point p get connection set end point p view get drawing add get connection } track step point anchor point modifiers ex { point2 d p = view view to drawing figure f = find connectable figure p view get drawing if f != get target figure { if get target figure != { get target figure set connectors visible } set target figure f if get target figure != { get target figure set connectors visible get connection } } connector target = find connection target p view get drawing if target != { p = geom center target get bounds } get connection set end point p } track end point anchor point modifiers ex { point2 d p = view view to drawing 		 connector target = find connection target p view get drawing 		if target != { 			get connection set start connector get start connector 			get connection set end connector target 			get connection update connection 		} else { 			view get drawing remove get connection 			 edit set significant 		} 		set connection 		if get target figure != { 			get target figure set connectors visible 			set target figure 		} fire undoable edit happened edit } connection figure create connection { connection figure prototype clone } set connection connection figure new connection { current connection = new connection } connection figure get connection { current connection } figure get target figure { target figure } set target figure figure new target figure { target figure = new target figure } private figure find connectable figure point2 d p drawing drawing { for figure figure drawing get figures front to back { if !figure includes get connection figure can connect figure contains p { figure } } } 	 	protected connector find connection target point2 d p drawing drawing { 		 figure target = find connectable figure p drawing 		if target != target can connect 			 !target includes get owner 			 get connection can connect get owner target { 				return target find connector p get connection 		} 		return 	} 	private connector get start connector { 		 point2 d p = get location on drawing 		return get owner find connector p get connection 	} } 