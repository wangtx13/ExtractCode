net n3 nanoxml import io i o import io char reader import io reader import util enumeration import util properties import util vector std xml parser implements i xml parser { private i xml builder builder private i xml reader reader private i xml entity resolver entity resolver private i xml validator validator std xml parser { this builder = this validator = this reader = this entity resolver = new xml entity resolver } finalize throwable { this builder = this reader = this entity resolver = this validator = super finalize } set builder i xml builder builder { this builder = builder } i xml builder get builder { this builder } set validator i xml validator validator { this validator = validator } i xml validator get validator { this validator } set resolver i xml entity resolver resolver { this entity resolver = resolver } i xml entity resolver get resolver { this entity resolver } set reader i xml reader reader { this reader = reader } i xml reader get reader { this reader } parse xml { try { this builder start building this reader get systemid this reader get line nr this scan data this builder get result } catch xml e { throw e } catch e { xml = new xml e init cause e throw } } scan data { while ! this reader at e o f this builder get result == { str = xml util read this reader ' ' char ch = str char at 0 if ch == ' ' { xml util process entity str this reader this entity resolver continue } switch ch { case '<' this scan some tag new properties break case ' ' case '\t' case '\r' case '\n' break default xml util invalid input reader get systemid reader get line nr ` + ch + ' 0x + integer to hex ch + ' ' } } } scan some tag allow c d a t a default namespace properties namespaces { str = xml util read this reader ' ' char ch = str char at 0 if ch == ' ' { xml util unexpected entity reader get systemid reader get line nr str } switch ch { case '?' this process p i break case '!' this process special tag allow c d a t a break default this reader unread ch this process element default namespace namespaces } } process p i { xml util skip whitespace this reader target = xml util scan identifier this reader xml util skip whitespace this reader reader reader = new p i reader this reader if ! target equals ignore case xml { this builder new processing instruction target reader } reader close } process special tag allow c d a t a { str = xml util read this reader ' ' char ch = str char at 0 if ch == ' ' { xml util unexpected entity reader get systemid reader get line nr str } switch ch { case ' ' if allow c d a t a { this process c d a t a } else { xml util unexpected c d a t a reader get systemid reader get line nr } case ' d' this process doc type case ' ' xml util skip comment this reader } } process c d a t a { if ! xml util check literal this reader c d a t a { xml util expected input reader get systemid reader get line nr <! c d a t a } this validator p c data added this reader get systemid this reader get line nr reader reader = new c d a t a reader this reader this builder add p c data reader this reader get systemid this reader get line nr reader close } process doc type { if ! xml util check literal this reader o c t y p e { xml util expected input reader get systemid reader get line nr <! d o c t y p e } xml util skip whitespace this reader systemid = buffer publicid = new buffer root element = xml util scan identifier this reader xml util skip whitespace this reader char ch = this reader read if ch == ' p' { systemid = xml util scan publicid publicid reader xml util skip whitespace this reader ch = this reader read } else if ch == ' s' { systemid = xml util scan systemid reader xml util skip whitespace this reader ch = this reader read } if ch == ' ' { this validator parse d t d publicid to this reader this entity resolver xml util skip whitespace this reader ch = this reader read } if ch != '>' { xml util expected input reader get systemid reader get line nr `>' } if { if systemid != { reader reader = this reader open stream publicid to systemid this reader start new stream reader this reader set systemid systemid this reader set publicid publicid to this validator parse d t d publicid to this reader this entity resolver } } } process element default namespace properties namespaces { full name = xml util scan identifier this reader name = full name xml util skip whitespace this reader prefix = colon index = name index of ' ' if colon index > 0 { prefix = name substring 0 colon index name = name substring colon index + 1 } vector attr names = new vector vector attr values = new vector vector attr types = new vector this validator element started full name this reader get systemid this reader get line nr char ch for { ch = this reader read if ch == '/' || ch == '>' { break } this reader unread ch this process attribute attr names attr values attr types xml util skip whitespace this reader } properties extra attributes = new properties this validator element attributes processed full name extra attributes this reader get systemid this reader get line nr enumeration enm = extra attributes keys while enm has more elements { key = enm next element value = extra attributes get property key attr names add element key attr values add element value attr types add element c d a t a } for i = 0 i < attr names size i++ { key = attr names element at i value = attr values element at i type = attr types element at i if key equals xmlns { default namespace = value } else if key starts with xmlns { namespaces put key substring 6 value } } if prefix == { this builder start element name prefix default namespace this reader get systemid this reader get line nr } else { this builder start element name prefix namespaces get property prefix this reader get systemid this reader get line nr } for i = 0 i < attr names size i++ { key = attr names element at i if key starts with xmlns { continue } value = attr values element at i type = attr types element at i colon index = key index of ' ' if colon index > 0 { att prefix = key substring 0 colon index key = key substring colon index + 1 this builder add attribute key att prefix namespaces get property att prefix value type } else { this builder add attribute key value type } } if prefix == { this builder element attributes processed name prefix default namespace } else { this builder element attributes processed name prefix namespaces get property prefix } if ch == '/' { if this reader read != '>' { xml util expected input reader get systemid reader get line nr `>' } this validator element ended name this reader get systemid this reader get line nr if prefix == { this builder end element name prefix default namespace } else { this builder end element name prefix namespaces get property prefix } } buffer buffer = new buffer 16 for { buffer set length 0 str for { xml util skip whitespace this reader buffer str = xml util read this reader ' ' if str char at 0 == ' ' str char at 1 != '#' { xml util process entity str this reader this entity resolver } else { break } } if str char at 0 == '<' { str = xml util read this reader '\0' if str char at 0 == '/' { xml util skip whitespace this reader str = xml util scan identifier this reader if ! str equals full name { xml util wrong closing tag reader get systemid reader get line nr name str } xml util skip whitespace this reader if this reader read != '>' { xml util closing tag not empty reader get systemid reader get line nr } this validator element ended full name this reader get systemid this reader get line nr if prefix == { this builder end element name prefix default namespace } else { this builder end element name prefix namespaces get property prefix } break } else { this reader unread str char at 0 this scan some tag default namespace properties namespaces clone } } else { if str char at 0 == ' ' { ch = xml util process char literal str buffer append ch } else { reader unread str char at 0 } this validator p c data added this reader get systemid this reader get line nr reader r = new content reader this reader this entity resolver buffer to this builder add p c data r this reader get systemid this reader get line nr r close } } } process attribute vector attr names vector attr values vector attr types { key = xml util scan identifier this reader xml util skip whitespace this reader if ! xml util read this reader ' ' equals = { xml util expected input reader get systemid reader get line nr `=' } xml util skip whitespace this reader value = xml util scan this reader ' ' this entity resolver attr names add element key attr values add element value attr types add element c d a t a this validator attribute added key value this reader get systemid this reader get line nr } } 