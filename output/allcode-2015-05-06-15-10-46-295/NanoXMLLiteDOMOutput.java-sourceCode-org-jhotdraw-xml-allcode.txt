org jhotdraw xml import awt * import util * import io * import nanoxml * nano xml lite dom output implements dom output { private doctype private hash map< string> objectids private hash map< object> prototypes private xml element document private xml element current private dom factory factory private stack< xml element> stack nano xml lite dom output dom factory factory { this factory = factory objectids = new hash map< string> document = new xml element new hash map current = document stack = new stack< xml element> stack push current } save output stream out i o { writer w = new output stream writer out u t f8 save w w flush } save writer out i o { if doctype != { out write <! d o c t y p e out write doctype out write >\n } xml element document get children get 0 write out } print print writer out { xml element document get children get 0 print out } open element tag name { xml element new element = new xml element new hash map new element set name tag name current add child new element stack push current current = new element } close element { current = xml element stack pop } add comment comment { } add text text { old = current get content if old == { current set content text } else { current set content old+text } } add attribute name value { if value != { current set attribute name value } } add attribute name value { current set attribute name integer to value } add attribute name value { current set attribute name new value to } add attribute name float value { str = float to value if str ends with 0 str = str substring 0 str length 2 current set attribute name str } add attribute name value { str = to value if str ends with 0 str = str substring 0 str length 2 current set attribute name str } write o i o { if o == { open element close element } else if o instanceof dom storable { write storable dom storable o } else if o instanceof { open element add text o close element } else if o instanceof integer { open element add text o to close element } else if o instanceof long { open element long add text o to close element } else if o instanceof { open element str = o to if str ends with 0 str = str substring 0 str length 2 add text str close element } else if o instanceof float { open element float str = o to if str ends with 0 str = str substring 0 str length 2 add text str close element } else if o instanceof { open element add text o to close element } else if o instanceof color { color c = color o open element color add attribute rgba # + integer to hex c get r g b close element } else if o instanceof { open element a = o for i=0 i < a length i++ { write new integer a i } close element } else if o instanceof float { open element float float a = float o for i=0 i < a length i++ { write new float a i } close element } else if o instanceof { open element a = o for i=0 i < a length i++ { write new a i } close element } else if o instanceof font { font f = font o open element font add attribute name f get name add attribute style f get style add attribute size f get size close element } else if o instanceof enum { open element enum enum e = enum o add attribute type factory get enum name e add text factory get enum value e close element } else { throw new illegal argument unable to store +o+ +o get } } private xml element write storable dom storable o i o { tag name = factory get name o if tag name == throw new illegal argument no tag name for +o open element tag name xml element element = current if objectids contains key o { add attribute ref objectids get o } else { = integer to objectids size 16 objectids put o add attribute o write this } close element element } add attribute name float value float default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if value != ! value equals default value { add attribute name value } } get prototype { if prototypes == { prototypes = new hash map< object> } if ! prototypes contains key current get name { prototypes put current get name factory create current get name } prototypes get current get name } set doctype doctype { this doctype = doctype } } 