net n3 nanoxml import io i o import io reader import util stack std xml builder implements i xml builder { private stack stack private i xml element root private i xml element prototype std xml builder { this new xml element } std xml builder i xml element prototype { this stack = this root = this prototype = prototype } finalize throwable { this prototype = this root = this stack clear this stack = super finalize } start building systemid line nr { this stack = new stack this root = } new processing instruction target reader reader { } start element name ns prefix ns u r i systemid line nr { full name = name if ns prefix != { full name = ns prefix + ' ' + name } i xml element elt = this prototype create element full name ns u r i systemid line nr if this stack empty { this root = elt } else { i xml element top = i xml element this stack peek top add child elt } this stack push elt } element attributes processed name ns prefix ns u r i { } end element name ns prefix ns u r i { i xml element elt = i xml element this stack pop if elt get children count == 1 { i xml element child = elt get child at index 0 if child get name == { elt set content child get content elt remove child at index 0 } } } add attribute key ns prefix ns u r i value type { full name = key if ns prefix != { full name = ns prefix + ' ' + key } i xml element top = i xml element this stack peek if top has attribute full name { throw new xml parse top get systemid top get line nr duplicate attribute + key } if ns prefix != { top set attribute full name ns u r i value } else { top set attribute full name value } } add p c data reader reader systemid line nr { buf size = 2048 size read = 0 buffer str = new buffer buf size char buf = new char buf size for { if size read >= buf size { buf size *= 2 str ensure capacity buf size } size try { size = reader read buf } catch i o e { break } if size < 0 { break } str append buf 0 size size read += size } i xml element elt = this prototype create element systemid line nr elt set content str to if ! this stack empty { i xml element top = i xml element this stack peek top add child elt } } get result { this root } } 