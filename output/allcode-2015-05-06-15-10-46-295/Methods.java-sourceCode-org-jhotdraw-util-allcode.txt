org jhotdraw util import lang reflect * { private { } obj name no such { try { = obj get get name new 0 result = obj new 0 result } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } obj name parameter no such { try { = obj get get name new { } result = obj new { parameter } result } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } clazz name no such { try { = clazz get name new 0 result = new 0 result } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } clazz name no such { try { for name clazz name } catch not found e { throw new no such +clazz+ not found } } clazz name types values no such { try { = clazz get name types result = values result } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } clazz name types values no such { try { for name clazz name types values } catch not found e { throw new no such +clazz+ not found } } clazz name types values default value { try { for name clazz name types values } catch not found e { default value } catch no such e { default value } } getter obj name default value { try { = obj get get name new 0 result = obj new 0 integer result value } catch no such e { default value } catch illegal access e { default value } catch invocation target e { default value } } long getter obj name long default value { try { = obj get get name new 0 result = obj new 0 long result long value } catch no such e { default value } catch illegal access e { default value } catch invocation target e { default value } } getter obj name default value { try { = obj get get name new 0 result = obj new 0 result value } catch no such e { default value } catch illegal access e { default value } catch invocation target e { default value } } getter obj name default value { try { = obj get get name new 0 result = obj new 0 result } catch no such e { default value } catch illegal access e { default value } catch invocation target e { default value } } getter clazz name default value { try { = clazz get name new 0 result = new 0 result value } catch no such e { default value } catch illegal access e { default value } catch invocation target e { default value } } obj name new value no such { try { = obj get get name new { t y p e} obj new { new new value } } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } obj name new value no such { try { = obj get get name new { integer t y p e} obj new { new integer new value } } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } obj name float new value no such { try { = obj get get name new { float t y p e} obj new { new float new value } } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } obj name clazz new value no such { try { = obj get get name new { clazz } obj new { new value} } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { throw new internal e get message } } obj name clazz new value no such { try { = obj get get name clazz obj new value } catch illegal access e { throw new no such name+ is not accessible } catch invocation target e { internal = new internal e get message init cause e get cause != ? e get cause e throw } } if obj name { try { obj name } catch no such e { } } if obj name float new value { try { obj name new value } catch no such e { } } if obj name new value { try { obj name new value } catch no such e { } } if obj name clazz new value { try { obj name clazz new value } catch no such e { } } } 