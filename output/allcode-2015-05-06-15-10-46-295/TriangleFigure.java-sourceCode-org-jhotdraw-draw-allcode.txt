org jhotdraw draw import awt * import awt geom * import io * import util * import javax swing * import org jhotdraw draw attribute keys * import org jhotdraw geom * triangle figure attributed figure { private rectangle2 d rectangle triangle figure { this 0 0 0 0 } triangle figure orientation direction { this 0 0 0 0 direction } triangle figure x y width height { this x y width height orientation n o r t h } triangle figure x y width height orientation direction { rectangle = new rectangle2 d x y width height o r i e n t a t i o n set this direction } connector find connector point2 d p connection figure prototype { new chop triangle connector this } connector find compatible connector connector c is start connector { new chop triangle connector this } rectangle2 d get bounds { rectangle2 d bounds = rectangle2 d rectangle clone bounds } draw fill graphics2 d g { rectangle2 d r = rectangle2 d rectangle clone shape triangle = get bezier path grow = attribute keys get perpendicular fill growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create stroked shape triangle } g fill triangle } draw stroke graphics2 d g { shape triangle = get bezier path grow = attribute keys get perpendicular draw growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create stroked shape triangle } g draw triangle } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> super create handles detail level if detail level == 0 { handles add new triangle rotation handler this } handles } bezier path get bezier path { rectangle2 d r = rectangle2 d rectangle clone bezier path triangle = new bezier path switch o r i e n t a t i o n get this { case n o r t h default triangle move to float r x + r width / 2 float r y triangle line to float r x + r width float r y + r height triangle line to float r x float r y + r height break case NORTH_EAST triangle move to float r x float r y triangle line to float r x + r width float r y triangle line to float r x + r width float r y + r height break case e a s t triangle move to float r x float r y triangle line to float r x + r width float r y + r height / 2d triangle line to float r x float r y + r height break case SOUTH_EAST triangle move to float r x + r width float r y triangle line to float r x + r width float r y + r height triangle line to float r x float r y + r height break case s o u t h triangle move to float r x + r width / 2 float r y + r height triangle line to float r x float r y triangle line to float r x + r width float r y break case SOUTH_WEST triangle move to float r x + r width float r y + r height triangle line to float r x float r y + r height triangle line to float r x float r y break case w e s t triangle move to float r x float r y + r height / 2 triangle line to float r x + r width float r y triangle line to float r x + r width float r y + r height break case NORTH_WEST triangle move to float r x float r y + r height triangle line to float r x float r y triangle line to float r x + r width float r y break } triangle set closed triangle } contains point2 d p { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create stroked shape triangle } triangle contains p } basic set bounds point2 d anchor point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } rectangle2 d get figure draw bounds { total stroke width = attribute keys get stroke total width this width = 0d if STROKE_COLOR get this != { switch STROKE_PLACEMENT get this { case i n sid e width = 0d break case o u t sid e if STROKE_JOIN get this == basic stroke JOIN_MITER { width = total stroke width * STROKE_MITER_LIMIT_FACTOR get this } else { width = total stroke width } break case c e n t e r if STROKE_JOIN get this == basic stroke JOIN_MITER { width = total stroke width / 2d * STROKE_MITER_LIMIT_FACTOR get this } else { width = total stroke width / 2d } break } } width++ rectangle2 d r = get bounds geom grow r width width r } point2 d chop point2 d p { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create stroked shape triangle } geom chop triangle p } basic transform affine transform tx { point2 d anchor = get start point point2 d = get end point basic set bounds point2 d tx transform anchor anchor point2 d tx transform } triangle figure clone { triangle figure that = triangle figure super clone that rectangle = rectangle2 d this rectangle clone that } restore to geometry { rectangle2 d r = rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } get restore data { rectangle clone } } 