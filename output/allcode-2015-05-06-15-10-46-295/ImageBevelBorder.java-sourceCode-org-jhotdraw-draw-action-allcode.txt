org jhotdraw draw action import awt * import javax swing * import javax swing border * import awt image * import javax swing plaf basic * image bevel border implements border { private v e r b o s e = private buffered image image private insets border insets private insets image insets private fill content area image bevel border image img insets border insets { this img border insets border insets } image bevel border image img insets image insets insets border insets { this img image insets border insets } image bevel border image img insets image insets insets border insets fill content area { if img instanceof buffered image { this image = buffered image img } else { frame f = new frame f pack media tracker t = new media tracker f t add image img 0 try { t wait for all } catch interrupted e {} image = new buffered image img get width f img get height f buffered image TYPE_INT_ARGB graphics2 d img graphics = image create graphics img graphics draw image img 0 0 f img graphics dispose f dispose } this image insets = image insets this border insets = border insets this fill content area = fill content area } is border opaque { } insets get border insets component c { insets border insets clone } paint border component c graphics gr x y width height { if image == graphics2 d g = graphics2 d gr top = image insets top left = image insets left bottom = image insets bottom right = image insets right img width = image get width img height = image get height if fill content area { if width == img width height == img height { g draw image image x y c } } if width == img width { left = img width right = 0 } if height == img height { top = img height bottom = 0 } if width < left + right { left = math min left width / 2 right = width left } if height < top + bottom { top = math min top height / 2 bottom = height top } if top > 0 left > 0 { g draw image image x y x + left y + top 0 0 left top c } if top > 0 right > 0 { g draw image image x + width right y x + width y + top img width right 0 img width top c } if bottom > 0 left > 0 { g draw image image x y + height bottom x + left y + height 0 img height bottom left img height c } if bottom > 0 right > 0 { g draw image image x + width right y + height bottom x + width y + height img width right img height bottom img width img height c } buffered image sub img = texture paint paint if top > 0 left + right < width { sub img = image get subimage left 0 img width right left top paint = new texture paint sub img new rectangle x+left y img width left right top g set paint paint g fill rect x+left y width left right top } if bottom > 0 left + right < width { sub img = image get subimage left img height bottom img width right left bottom paint = new texture paint sub img new rectangle x+left y + height bottom img width left right bottom g set paint paint g fill rect x+left y + height bottom width left right bottom } if left > 0 top + bottom < height { sub img = image get subimage 0 top left img height top bottom paint = new texture paint sub img new rectangle x y+top left img height top bottom g set paint paint g fill rect x y+top left height top bottom } if right > 0 top + bottom < height { sub img = image get subimage img width right top right img height top bottom paint = new texture paint sub img new rectangle x+width right y + top right img height top bottom g set paint paint g fill rect x+width right y + top right height top bottom } if fill content area { g set color color yellow if left + right < width top + bottom < height { sub img = image get subimage left top img width right left img height top bottom paint = new texture paint sub img new rectangle x + left y + top img width right left img height top bottom g set paint paint g fill rect x+left y + top width right left height top bottom } } } } 