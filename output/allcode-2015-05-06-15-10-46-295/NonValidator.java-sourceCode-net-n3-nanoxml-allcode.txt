net n3 nanoxml import io reader import io i o import io reader import util enumeration import util hashtable import util properties import util stack non validator implements i xml validator { i xml entity resolver parameter entity resolver hashtable attribute default values stack current elements non validator { this attribute default values = new hashtable this current elements = new stack this parameter entity resolver = new xml entity resolver } finalize throwable { this parameter entity resolver = this attribute default values clear this attribute default values = this current elements clear this current elements = super finalize } set parameter entity resolver i xml entity resolver resolver { this parameter entity resolver = resolver } i xml entity resolver get parameter entity resolver { this parameter entity resolver } parse d t d publicid i xml reader reader i xml entity resolver entity resolver external { xml util skip whitespace reader orig level = reader get stream level for { str = xml util read reader '%' char ch = str char at 0 if ch == '%' { xml util process entity str reader this parameter entity resolver continue } else if ch == '<' { this process element reader entity resolver } else if ch == ' ' { } else { xml util invalid input reader get systemid reader get line nr str } do { ch = reader read if external reader get stream level < orig level { reader unread ch } } while ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' reader unread ch } } process element i xml reader reader i xml entity resolver entity resolver { str = xml util read reader '%' char ch = str char at 0 if ch != '!' { xml util skip tag reader } str = xml util read reader '%' ch = str char at 0 switch ch { case ' ' xml util skip comment reader break case ' ' this process conditional section reader entity resolver break case ' e' this process entity reader entity resolver break case ' a' this process att list reader entity resolver break default xml util skip tag reader } } process conditional section i xml reader reader i xml entity resolver entity resolver { xml util skip whitespace reader str = xml util read reader '%' char ch = str char at 0 if ch != ' i' { xml util skip tag reader } str = xml util read reader '%' ch = str char at 0 switch ch { case ' g' this process ignore section reader entity resolver case ' n' break default xml util skip tag reader } if ! xml util check literal reader c l u d e { xml util skip tag reader } xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 if ch != ' ' { xml util skip tag reader } reader subreader = new c d a t a reader reader buffer buf = new buffer 1024 for { ch2 = subreader read if ch2 < 0 { break } buf append char ch2 } subreader close reader start new stream new reader buf to } process ignore section i xml reader reader i xml entity resolver entity resolver { if ! xml util check literal reader n o r e { xml util skip tag reader } xml util skip whitespace reader str = xml util read reader '%' char ch = str char at 0 if ch != ' ' { xml util skip tag reader } reader subreader = new c d a t a reader reader subreader close } process att list i xml reader reader i xml entity resolver entity resolver { if ! xml util check literal reader t t l i s t { xml util skip tag reader } xml util skip whitespace reader str = xml util read reader '%' char ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } reader unread ch element name = xml util scan identifier reader xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } properties props = new properties while ch != '>' { reader unread ch att name = xml util scan identifier reader xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } if ch == ' ' { while ch != ' ' { str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } } } else { reader unread ch xml util scan identifier reader } xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } if ch == '#' { str = xml util scan identifier reader xml util skip whitespace reader if ! str equals f i x e d { xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } continue } } else { reader unread ch } value = xml util scan reader '%' this parameter entity resolver props put att name value xml util skip whitespace reader str = xml util read reader '%' ch = str char at 0 while ch == '%' { xml util process entity str reader this parameter entity resolver str = xml util read reader '%' ch = str char at 0 } } if ! props is empty { this attribute default values put element name props } } process entity i xml reader reader i xml entity resolver entity resolver { if ! xml util check literal reader n t i t y { xml util skip tag reader } xml util skip whitespace reader char ch = xml util read char reader '\0' if ch == '%' { xml util skip whitespace reader entity resolver = this parameter entity resolver } else { reader unread ch } key = xml util scan identifier reader xml util skip whitespace reader ch = xml util read char reader '%' systemid = publicid = switch ch { case ' p' if ! xml util check literal reader u b l i c { xml util skip tag reader } xml util skip whitespace reader publicid = xml util scan reader '%' this parameter entity resolver xml util skip whitespace reader systemid = xml util scan reader '%' this parameter entity resolver xml util skip whitespace reader xml util read char reader '%' break case ' s' if ! xml util check literal reader y s t e m { xml util skip tag reader } xml util skip whitespace reader systemid = xml util scan reader '%' this parameter entity resolver xml util skip whitespace reader xml util read char reader '%' break case ' ' case '\'' reader unread ch value = xml util scan reader '%' this parameter entity resolver entity resolver add internal entity key value xml util skip whitespace reader xml util read char reader '%' break default xml util skip tag reader } if systemid != { entity resolver add external entity key publicid systemid } } element started name line nr { properties attribs = properties this attribute default values get name if attribs == { attribs = new properties } else { attribs = properties attribs clone } this current elements push attribs } element ended name line nr { } element attributes processed name properties extra attributes line nr { properties props = properties this current elements pop enumeration enm = props keys while enm has more elements { key = enm next element extra attributes put key props get key } } attribute added key value line nr { properties props = properties this current elements peek if props contains key key { props remove key } } p c data added line nr { } } 