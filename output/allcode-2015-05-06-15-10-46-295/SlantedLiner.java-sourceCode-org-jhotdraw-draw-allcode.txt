org jhotdraw draw import org jhotdraw xml dom input import org jhotdraw xml dom output import org jhotdraw xml dom storable import util * import awt * import awt geom * import org jhotdraw geom * slanted liner implements liner dom storable { private slant size slanted liner { this 20 } slanted liner slant size { this slant size = slant size } collection< handle> create handles bezier path path { } lineout connection figure figure { bezier path path = line connection figure figure get bezier path connector start = figure get start connector connector end = figure get end connector if start == || end == || path == { } while path size < 4 { path add 1 new bezier path node 0 0 } while path size < 4 { path remove 1 } point2 d sp = start find start figure point2 d ep = end find end figure sp = figure get start point ep = figure get end point rectangle2 d sb = start get bounds rectangle2 d eb = end get bounds path get 0 move to sp path get path size 1 move to ep outcode = sb outcode sp if outcode == 0 { outcode = geom outcode sb eb } if outcode geom OUT_RIGHT != 0 { path get 1 move to sp x + slant size sp y } else if outcode geom OUT_LEFT != 0 { path get 1 move to sp x slant size sp y } else if outcode geom OUT_BOTTOM != 0 { path get 1 move to sp x sp y + slant size } else { path get 1 move to sp x sp y slant size } outcode = eb outcode ep if outcode == 0 { outcode = geom outcode eb sb } if outcode geom OUT_RIGHT != 0 { path get 2 move to ep x + slant size ep y } else if outcode geom OUT_LEFT != 0 { path get 2 move to ep x slant size ep y } else if outcode geom OUT_BOTTOM != 0 { path get 2 move to ep x ep y + slant size } else { path get 2 move to ep x ep y slant size } path invalidate path } read dom input in { slant size = in get attribute slant 20d } write dom output out { out add attribute slant slant size } liner clone { try { liner super clone } catch clone not supported ex { internal = new internal ex get message init cause ex throw } } } 