org jhotdraw draw import io * import awt * import awt geom * import org jhotdraw geom geom import org jhotdraw util * import org jhotdraw draw attribute keys * line decoration implements line decoration { private is filled private is stroked private is solid line decoration is filled is stroked is solid { this is filled = is filled this is stroked = is stroked this is solid = is solid } is filled { is filled } is stroked { is stroked } is solid { is solid } draw graphics2 d g figure f point2 d p1 point2 d p2 { general path path = get transformed decorator path f p1 p2 color color if is filled { if is solid { color = STROKE_COLOR get f } else { color = FILL_COLOR get f } if color != { g set color color g fill path } } if is stroked { color = STROKE_COLOR get f if color != { g set color color g set stroke attribute keys get stroke f g draw path } } } rectangle2 d get draw bounds figure f point2 d p1 point2 d p2 { general path path = get transformed decorator path f p1 p2 rectangle2 d b = path get bounds2 d rectangle2 d bounds = new rectangle2 d b get x b get y b get width b get height if is stroked { stroke width = STROKE_WIDTH get f stroke join = STROKE_JOIN get f float miter limit = float STROKE_MITER_LIMIT_FACTOR get f * stroke width grow if stroke join == basic stroke JOIN_MITER { grow = 1 + stroke width / 2 * miter limit } else { grow = 1 + stroke width / 2 } geom grow bounds grow grow } bounds } get decoration radius figure f { stroke width = STROKE_WIDTH get f scale factor if stroke width > 1f { scale factor = 1d + stroke width 1d / 2d } else { scale factor = 1d } get decorator path radius f * scale factor } private general path get transformed decorator path figure f point2 d p1 point2 d p2 { general path path = get decorator path f stroke width = STROKE_WIDTH get f affine transform transform = new affine transform transform translate p1 x p1 y transform rotate math atan2 p1 x p2 x p2 y p1 y if stroke width > 1f { transform scale 1d + stroke width 1d / 2d 1d + stroke width 1d / 2d } path transform transform path } set filled b { is filled = b } set stroked b { is stroked = b } set solid b { is solid = b } general path get decorator path figure f get decorator path radius figure f } 