org jhotdraw draw import org jhotdraw geom quad tree2 d import org jhotdraw util reversed list import awt * import awt geom * import javax swing * import javax swing event * import org jhotdraw util * import util * quad tree drawing drawing implements figure listener undoable edit listener { private list< figure> figures = new list< figure> private quad tree2 d double< figure> quad tree = new quad tree2 d double< figure> private needs sorting = quad tree drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure quad tree add figure figure get draw bounds figure add figure listener this figure add undoable edit listener this needs sorting = } basic remove figure figure { figures remove figure quad tree remove figure figure remove figure listener this figure remove undoable edit listener this needs sorting = } draw graphics2 d g { collection< figure> c = quad tree find intersects g get clip bounds get bounds2 d collection< figure> to draw = sort c draw g to draw } collection< figure> sort collection< figure> c { ensure sorted list< figure> sorted = new list< figure> c size for figure f figures { if c contains f { sorted add f } } sorted } draw graphics2 d g collection< figure> c { for figure f c { f draw g } } figure area invalidated figure event e { fire area invalidated e get invalidated area } figure changed figure event e { quad tree remove e get figure quad tree add e get figure e get figure get draw bounds needs sorting = fire area invalidated e get invalidated area } figure added figure event e { } figure removed figure event e { } figure request remove figure event e { remove e get figure } collection< figure> get figures rectangle2 d bounds { quad tree find inside bounds } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 d p { collection< figure> c = quad tree find contains p for figure f get figures front to back { if c contains f f contains p { f find figure inside p } } } util list< figure> get figures front to back { ensure sorted new reversed list< figure> figures } figure find figure point2 d p { collection< figure> c = quad tree find contains p switch c size { case 0 case 1 { figure f = c iterator next f contains p ? f } default { for figure f get figures front to back { if c contains f f contains p f } } } } figure find figure except point2 d p figure ignore { collection< figure> c = quad tree find contains p switch c size { case 0 { } case 1 { figure f = c iterator next f == ignore || ! f contains p ? f } default { for figure f get figures front to back { if f != ignore f contains p f } } } } figure find figure except point2 d p collection ignore { collection< figure> c = quad tree find contains p switch c size { case 0 { } case 1 { figure f = c iterator next ! ignore contains f || ! f contains p ? f } default { for figure f get figures front to back { if ! ignore contains f f contains p f } } } } collection< figure> find figures rectangle2 d r { collection< figure> c = quad tree find intersects r switch c size { case 0 case 1 c default sort c } } collection< figure> find figures within rectangle2 d r { collection< figure> c = find figures r list< figure> result = new list< figure> c size for figure f c { if r contains f get bounds { result add f } } result } bring to front figure figure { if figures remove figure { figures add figure needs sorting = fire area invalidated figure get draw bounds } } send to back figure figure { if figures remove figure { figures add 0 figure needs sorting = fire area invalidated figure get draw bounds } } undoable edit happened undoable edit event e { fire undoable edit happened e get edit } figure attribute changed figure event e { } contains figure f { figures contains f } private ensure sorted { if needs sorting { collections sort figures figure layer comparator i n s t a n c e needs sorting = } } } 