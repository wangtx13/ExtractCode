org jhotdraw samples svg figures import awt geom * import io * import util * import org jhotdraw draw * import org jhotdraw samples svg * import org jhotdraw xml * s v g group group figure implements s v g figure { s v g group { s v g util set defaults this } @ override linked list< handle> create handles detail level { linked list< handle> handles if detail level == 0 { handles = linked list< handle> super create handles detail level handles add new rotate handle this } else { handles = new linked list< handle> } handles } @ override read dom input in i o { read attributes in for i=0 n = in get element count i < n i++ { in open element i name = in get tag name if name equals pattern { in close element } else if name equals color profile { in close element } else if name equals defs { in close element } else if name equals use { in close element } else if name equals script { in close element } else if name equals filter { in close element } else if name equals title { in close element } else if name equals desc { in close element } else if name equals switch { in close element } else if name equals radial gradient { in close element } else if name equals linear gradient { in close element } else { in close element f = in read i if f instanceof s v g drawing { s v g group g = new s v g group g will change for figure child s v g drawing f get figures { g basic add child } g changed if ! g is empty { add g } } else if f instanceof s v g figure { if ! s v g figure f is empty { add s v g figure f } } else { throw new i o unexpected child +f } } } affine transform tx = s v g util get transform in transform for figure child get children { child basic transform tx } invalidate bounds } read attributes dom input in i o { s v g util read attributes this in } @ override write dom output out i o { for figure child get children { out write child } write attributes out } write attributes dom output out i o { s v g util write attributes this out } is empty { get child count == 0 } to { builder buf = new builder buf append get get name substring get get name last index of ' ' +1 buf append '@' buf append hash if get child count > 0 { buf append ' ' for iterator< figure> i = get children iterator i has next { figure child = i next buf append child if i has next { buf append ' ' } } buf append ' ' } buf to } } 