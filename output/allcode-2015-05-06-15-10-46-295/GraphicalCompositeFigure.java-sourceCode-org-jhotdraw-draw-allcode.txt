org jhotdraw draw import io i o import org jhotdraw util * import awt * import awt geom * import util * import javax swing undo * import javax swing event * import org jhotdraw draw attribute keys * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output graphical composite figure composite figure { hash map< attribute key object> attributes = new hash map< attribute key object> private hash set< attribute key> forbidden attributes private figure presentation figure private presentation figure handler presentation figure handler = new presentation figure handler this private presentation figure handler implements figure listener undoable edit listener { private graphical composite figure owner private presentation figure handler graphical composite figure owner { this owner = owner } figure request remove figure event e { owner remove e get figure } figure removed figure event evt { } figure changed figure event e { if ! owner is changing { owner will change owner fire figure changed e owner changed } } figure added figure event e { } figure attribute changed figure event e { } figure area invalidated figure event e { if ! owner is changing { owner fire area invalidated e get invalidated area } } undoable edit happened undoable edit event e { owner fire undoable edit happened e get edit } } graphical composite figure { this } graphical composite figure figure new presentation figure { super set presentation figure new presentation figure } rectangle2 d get bounds { if get presentation figure == super get bounds get presentation figure get bounds } contains point2 d p { if get presentation figure != { get presentation figure contains p } else { super contains p } } add notify drawing drawing { super add notify drawing if get presentation figure != { get presentation figure add notify drawing } } remove notify drawing drawing { super remove notify drawing if get presentation figure != { get presentation figure remove notify drawing } } rectangle2 d get figure draw bounds { rectangle2 d r if get presentation figure != { rectangle2 d presentation bounds = get presentation figure get draw bounds r = super get figure draw bounds if r is empty { r = presentation bounds } else { r add presentation bounds } } else { r = super get figure draw bounds } r } basic set bounds point2 d anchor point2 d { if get layouter == { super basic set bounds anchor basic set presentation figure bounds anchor } else { rectangle2 d r = get layouter layout this anchor basic set presentation figure bounds new point2 d r get x r get y new point2 d math max x r get max x math max y r get max y invalidate } } super basic set bounds point2 d anchor point2 d { super basic set bounds anchor } basic set presentation figure bounds point2 d anchor point2 d { if get presentation figure != { get presentation figure basic set bounds anchor } } basic transform affine transform tx { super basic transform tx if get presentation figure != { get presentation figure basic transform tx } } draw figure graphics2 d g { draw presentation figure g super draw figure g } draw presentation figure graphics2 d g { if get presentation figure != { get presentation figure draw g } } collection< handle> create handles detail level { linked list< handle> handles = new linked list< handle> if detail level == 0 { move handle add move handles this handles } handles } set presentation figure figure new presentation figure { if this presentation figure != { this presentation figure remove figure listener presentation figure handler this presentation figure remove undoable edit listener presentation figure handler if get drawing != { this presentation figure remove notify get drawing } } this presentation figure = new presentation figure if this presentation figure != { this presentation figure add figure listener presentation figure handler this presentation figure add undoable edit listener presentation figure handler if get drawing != { this presentation figure add notify get drawing } } } figure get presentation figure { presentation figure } graphical composite figure clone { graphical composite figure that = graphical composite figure super clone that presentation figure = this presentation figure == ? figure this presentation figure clone if that presentation figure != { that presentation figure add figure listener that presentation figure handler that presentation figure add undoable edit listener that presentation figure handler } that } remap hash map< figure figure> old to new { super remap old to new if presentation figure != { presentation figure remap old to new } } set attribute attribute key key new value { if forbidden attributes == || ! forbidden attributes contains key { will change if get presentation figure != { get presentation figure set attribute key new value } super set attribute key new value old value = attributes put key new value fire attribute changed key old value new value fire undoable edit happened new attribute change edit this key old value new value changed } } basic set attribute attribute key key new value { if forbidden attributes == || ! forbidden attributes contains key { if get presentation figure != { get presentation figure basic set attribute key new value } super basic set attribute key new value old value = attributes put key new value } } set attribute enabled attribute key key b { if forbidden attributes == { forbidden attributes = new hash set< attribute key> } if b { forbidden attributes remove key } else { forbidden attributes add key } } get attribute attribute key key { if get presentation figure != { get presentation figure get attribute key } else { ! attributes contains key key ? key get default value attributes get key } } apply attributes to figure that { for map entry< attribute key object> entry attributes entry set { that set attribute entry get key entry get value } } write attributes dom output out i o { figure prototype = figure out get prototype is element open = for map entry< attribute key object> entry attributes entry set { attribute key key = entry get key if forbidden attributes == || ! forbidden attributes contains key { prototype value = key get prototype attribute value = key get this if prototype value != attribute value || prototype value != attribute value != ! prototype value equals attribute value { if ! is element open { out open element a is element open = } out open element key get key out write entry get value out close element } } } if is element open { out close element } } read attributes dom input in i o { if in get element count a > 0 { in open element a for i=in get element count 1 i >= 0 i { in open element i name = in get tag name value = in read attribute key key = get attribute key name if key != key is assignable value { if forbidden attributes == || ! forbidden attributes contains key { set attribute key value } } in close element } in close element } } attribute key get attribute key name { attribute keys supported attribute map get name } map< attribute key object> get attributes { new hash map< attribute key object> attributes } point2 d chop point2 d from { rectangle2 d r = get bounds if STROKE_COLOR get this != { grow switch STROKE_PLACEMENT get this { case c e n t e r default grow = attribute keys get stroke total width this break case o u t sid e grow = attribute keys get stroke total width this break case i n sid e grow = 0d break } geom grow r grow grow } geom angle to point r geom point to angle r from } } 