org jhotdraw xml import awt * import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import io * javax dom output implements dom output { private doctype private hash map< string> objectids private hash map< object> prototypes private document document private node current private dom factory factory javax dom output dom factory factory i o { this factory = factory try { objectids = new hash map< string> document = document builder factory new instance new document builder new document current = document } catch parser configuration e { i o = new i o e get message init cause e throw } } save output stream out i o { try { if doctype != { output stream writer w = new output stream writer out u t f8 w write <! d o c t y p e w write doctype w write >\n w flush } transformer t = transformer factory new instance new transformer t transform new dom source document new stream result out } catch transformer e { i o = new i o e get message init cause e throw } } save writer out i o { try { if doctype != { out write <! d o c t y p e out write doctype out write >\n } transformer t = transformer factory new instance new transformer t transform new dom source document new stream result out } catch transformer e { i o = new i o e get message init cause e throw } } open element tag name { element new element = document create element tag name current append child new element current = new element } close element { current = current get parent node } add comment comment { current append child document create comment comment } add text text { current append child document create text node text } add attribute name value { if value != { element current set attribute name value } } add attribute name value { element current set attribute name integer to value } add attribute name value { element current set attribute name to value } add attribute name float value { str = float to value if str ends with 0 str = str substring 0 str length 2 element current set attribute name str } add attribute name value { str = to value if str ends with 0 str = str substring 0 str length 2 element current set attribute name str } write o i o { if o == { open element close element } else if o instanceof dom storable { write storable dom storable o } else if o instanceof { open element add text o close element } else if o instanceof integer { open element add text o to close element } else if o instanceof long { open element long add text o to close element } else if o instanceof { open element add text o to close element } else if o instanceof float { open element float add text o to close element } else if o instanceof { open element add text o to close element } else if o instanceof color { color c = color o open element color add attribute rgba # + integer to hex c get r g b close element } else if o instanceof { open element a = o for i=0 i < a length i++ { write new integer a i } close element } else if o instanceof float { open element float float a = float o for i=0 i < a length i++ { write new float a i } close element } else if o instanceof { open element a = o for i=0 i < a length i++ { write new a i } close element } else if o instanceof font { font f = font o open element font add attribute name f get name add attribute style f get style add attribute size f get size close element } else if o instanceof enum { open element enum enum e = enum o add attribute type factory get enum name e add text factory get enum value e close element } else { throw new illegal argument unable to store +o+ +o get } } private write storable dom storable o i o { tag name = factory get name o if tag name == throw new illegal argument no tag name for +o open element tag name if objectids contains key o { add attribute ref objectids get o } else { = integer to objectids size 16 objectids put o add attribute o write this } close element } add attribute name float value float default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if value != default value { add attribute name value } } add attribute name value default value { if ! value equals default value { add attribute name value } } get prototype { if prototypes == { prototypes = new hash map< object> } if ! prototypes contains key current get node name { prototypes put current get node name factory create current get node name } prototypes get current get node name } set doctype doctype { this doctype = doctype } } 