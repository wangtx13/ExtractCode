org jhotdraw xml import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import io * import awt * javax dom input implements dom input { private hash map< object> idobjects = new hash map< object> private document document private node current private dom factory factory javax dom input dom factory factory input stream in i o { this factory = factory try { transformer t = transformer factory new instance new transformer dom result result = new dom result t transform new stream source in result document = document result get node current = document } catch transformer e { i o = new i o e get message init cause e throw } } javax dom input dom factory factory reader in i o { this factory = factory try { transformer t = transformer factory new instance new transformer dom result result = new dom result t transform new stream source in result document = document result get node current = document } catch transformer e { i o = new i o e get message init cause e throw } } get tag name { element current get tag name } get attribute name default value { value = element current get attribute name value length == 0 ? default value value } get text { get text } get text default value { if current get child nodes get length == 0 default value builder buf = new builder get text current buf buf to } private get text node n builder buf { if n get node value != buf append n get node value node list children = n get child nodes for i=0 i < children get length i++ { get text children item i buf } } util list< string> get inherited attribute name { linked list< string> values = new linked list< string> node node = current while node != { value = element node get attribute name values add first value node = node get parent node } values } get attribute name default value { value = element current get attribute name value length == 0 ? default value long decode value value } get attribute name default value { value = element current get attribute name value length == 0 ? default value parse value } get attribute name default value { value = element current get attribute name value length == 0 ? default value value of value value } get element count { count = 0 node list list = current get child nodes for i=0 i < list get length i++ { node node = list item i if node instanceof element { count++ } } count } get element count tag name { count = 0 node list list = current get child nodes for i=0 i < list get length i++ { node node = list item i if node instanceof element element node get tag name equals tag name { count++ } } count } open element index { count = 0 node list list = current get child nodes len = list get length for i=0 i < len i++ { node node = list item i if node instanceof element { if count++ == index { current = node } } } } open element tag name { count = 0 node list list = current get child nodes len = list get length for i=0 i < len i++ { node node = list item i if node instanceof element element node get tag name equals tag name { current = node } } throw new illegal argument element not found +tag name } open element tag name index { count = 0 node list list = current get child nodes len = list get length for i=0 i < len i++ { node node = list item i if node instanceof element element node get tag name equals tag name { if count++ == index { current = node } } } throw new illegal argument no such child +tag name+ +index+ } close element { current = current get parent node } read i o { read 0 } read index i o { open element index o tag name = get tag name if tag name equals { o = } else if tag name equals { o = get text } else if tag name equals { o = integer decode get text } else if tag name equals long { o = long decode get text } else if tag name equals float { o = new float float parse float get text } else if tag name equals { o = new parse get text } else if tag name equals { o = value of get text } else if tag name equals color { o = new color get attribute rgba 0xff } else if tag name equals { a = new get element count for i=0 i < a length i++ { a i = integer read i value } o = a } else if tag name equals float { float a = new float get element count for i=0 i < a length i++ { a i = float read i float value } o = a } else if tag name equals { a = new get element count for i=0 i < a length i++ { a i = read i value } o = a } else if tag name equals font { o = new font get attribute name dialog get attribute style 0 get attribute size 0 } else if tag name equals enum { o = factory create enum get attribute type get text } else { ref = get attribute ref = get attribute ref if == { o = factory create get tag name } else if idobjects contains key { o = idobjects get } else { o = factory create get tag name idobjects put o } if ref == { if o instanceof dom storable { dom storable o read this } } } close element o } } 