org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * bezier control point handle handle { index control point index private composite edit edit bezier control point handle bezier figure owner index coord { super owner this index = index this control point index = coord } bezier figure get bezier figure { bezier figure get owner } point get location { get bezier figure get point count > index ? view drawing to view get bezier figure get point index control point index new point 10 10 } draw graphics2 d g { bezier figure f = get bezier figure if f get point count > index { bezier path node v = f get node index if v keep colinear v mask == bezier path C1C2_MASK index > 0 index < f get node count || f is closed { draw circle g color white color blue } else { draw circle g color blue color white } g set color color blue g draw new line2 d view drawing to view new point2 d v x 0 v y 0 view drawing to view new point2 d v x control point index v y control point index } } rectangle basic get bounds { rectangle r = new rectangle get location r grow get handlesize / 2 get handlesize / 2 r } track start point anchor modifiers ex { view get drawing fire undoable edit happened edit = new composite edit punkt verschieben point2 d location = view get constrainer constrain point view view to drawing get location point2 d p = view get constrainer constrain point view view to drawing anchor } track step point anchor point modifiers ex { bezier figure figure = get bezier figure point2 d p = view get constrainer constrain point view view to drawing bezier path node v = figure get node index fire area invalidated v figure will change if ! v keep colinear { figure basic set point index control point index p } else { a = math p i + math atan2 p y v y 0 p x v x 0 c2 = control point index == 1 ? 2 1 r = math sqrt v x c2 v x 0 * v x c2 v x 0 + v y c2 v y 0 * v y c2 v y 0 sina = math sin a cosa = math cos a point2 d p2 = new point2 d r * cosa + v x 0 r * sina + v y 0 figure basic set point index control point index p figure basic set point index c2 p2 } figure changed fire area invalidated figure get node index } private fire area invalidated bezier path node v { rectangle2 d dr = new rectangle2 d v x 0 v y 0 0 0 for i=1 i < 3 i++ { dr add v x i v y i } rectangle vr = view drawing to view dr vr grow get handlesize get handlesize fire area invalidated vr } track end point anchor point modifiers ex { bezier figure figure = get bezier figure if modifiers ex input event META_DOWN_MASK | input event CTRL_DOWN_MASK != 0 { figure will change bezier path node v = figure get node index v keep colinear = ! v keep colinear if v keep colinear { point2 d p = figure get point index control point index a = math p i + math atan2 p y v y 0 p x v x 0 c2 = control point index == 1 ? 2 1 r = math sqrt v x c2 v x 0 * v x c2 v x 0 + v y c2 v y 0 * v y c2 v y 0 sina = math sin a cosa = math cos a point2 d p2 = new point2 d r * cosa + v x 0 r * sina + v y 0 v x c2 = p2 x v y c2 = p2 y } figure set node index v figure changed } view get drawing fire undoable edit happened edit } is combinable with handle h { if super is combinable with h { bezier control point handle that = bezier control point handle h that index == this index that control point index == this control point index that get bezier figure get node count == this get bezier figure get node count } } } 