org jhotdraw xml import util * import io * import awt * import net n3 nanoxml * nano xml dom input implements dom input { private hash map< object> idobjects = new hash map< object> private xml element document private xml element current private dom factory factory private stack< xml element> stack = new stack< xml element> nano xml dom input dom factory factory input stream in i o { this factory new input stream reader in u t f8 } nano xml dom input dom factory factory reader in i o { this factory = factory try { i xml parser parser = xml parser factory create default xml parser i xml reader reader = new std xml reader in parser set reader reader document = new xml element current = xml element parser parse document add child current current = document } catch e { i o = new i o e get message init cause e throw } } get tag name { current get name } get attribute name default value { value = current get attribute name value == || value length == 0 ? default value value } util list< string> get inherited attribute name { linked list< string> values = new linked list< string> for xml element node stack { value = node get attribute name values add value } value = current get attribute name values add value values } get text { get text } get text default value { value = current get content value == ? default value value } get attribute name default value { value = current get attribute name value == || value length == 0 ? default value long decode value value } get attribute name default value { value = current get attribute name value == || value length == 0 ? default value parse value } get attribute name default value { value = current get attribute name value == || value length == 0 ? default value value of value value } get element count { current get children count } get element count tag name { count = 0 list list = current get children for i=0 i < list size i++ { xml element node = xml element list get i if node get name equals tag name { count++ } } count } open element index { stack push current list list = current get children current = xml element list get index } open element tag name i o { list list = current get children for i=0 i < list size i++ { xml element node = xml element list get i if node get name equals tag name { stack push current current = node } } throw new i o no such element +tag name } open element tag name index i o { count = 0 list list = current get children for i=0 i < list size i++ { xml element node = xml element list get i if node get name equals tag name { if count++ == index { stack push current current = node } } } throw new i o no such element +tag name+ at index +index } close element { current = xml element stack pop } read i o { read 0 } read index i o { open element index o tag name = get tag name if tag name equals { o = } else if tag name equals { o = get text } else if tag name equals { o = integer decode get text } else if tag name equals long { o = long decode get text } else if tag name equals float { o = new float float parse float get text } else if tag name equals { o = new parse get text } else if tag name equals { o = value of get text } else if tag name equals color { o = new color get attribute rgba 0xff } else if tag name equals { a = new get element count for i=0 i < a length i++ { a i = integer read i value } o = a } else if tag name equals float { float a = new float get element count for i=0 i < a length i++ { a i = float read i float value } o = a } else if tag name equals { a = new get element count for i=0 i < a length i++ { a i = read i value } o = a } else if tag name equals font { o = new font get attribute name dialog get attribute style 0 get attribute size 0 } else if tag name equals enum { o = factory create enum get attribute type get text } else { ref = get attribute ref = get attribute ref if == { o = factory create get tag name } else if idobjects contains key { o = idobjects get } else { o = factory create get tag name idobjects put o } if ref == { if o instanceof dom storable { dom storable o read this } } } close element o } } 