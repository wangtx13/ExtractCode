org jhotdraw gui import javax swing * import javax swing event * import awt * import beans * import org jhotdraw app action arrangeable m didesktop pane j desktop pane implements arrangeable { private FRAME_OFFSET=20 private m didesktop manager manager m didesktop pane { manager = new m didesktop manager this set desktop manager manager set drag mode j desktop pane OUTLINE_DRAG_MODE set alignment x j component LEFT_ALIGNMENT } set arrangement arrangeable arrangement new value { arrangeable arrangement old value = get arrangement switch new value { case c a s c a d e arrange frames cascading break case h o r i z o n t a l arrange frames horizontally break case v e r t i c a l arrange frames vertically break } fire property change arrangement old value new value } arrangeable arrangement get arrangement { arrangeable arrangement c a s c a d e } private arrange frames cascading { x = 0 y = 0 j internal frame all frames = get all frames if all frames length == 0 { } manager set normal size frame height = get bounds height 5 all frames length * FRAME_OFFSET frame width = get bounds width 5 all frames length * FRAME_OFFSET for i = all frames length 1 i >= 0 i { try { all frames i set maximum } catch property veto e { e print stack trace } all frames i set bounds x y frame width frame height x = x + FRAME_OFFSET y = y + FRAME_OFFSET } check desktop size } private tile frames horizontally { component all frames = get all frames if all frames length == 0 { } manager set normal size frame height = get bounds height/all frames length y = 0 for i = 0 i < all frames length i++ { try { j internal frame all frames i set maximum } catch property veto e { e print stack trace } all frames i set bounds 0 y get bounds width frame height y = y + frame height } check desktop size } tile frames vertically { component all frames = get all frames if all frames length == 0 { } manager set normal size frame width = get bounds width/all frames length x = 0 for i = 0 i < all frames length i++ { try { j internal frame all frames i set maximum } catch property veto e { e print stack trace } all frames i set bounds x 0 frame width get bounds height x = x + frame width } check desktop size } arrange frames vertically { component all frames = get all frames if all frames length == 0 { } manager set normal size vert frames = math floor math sqrt all frames length hor frames = math ceil math sqrt all frames length frame width = get bounds width / hor frames frame height = get bounds height / vert frames x = 0 y = 0 frame idx = 0 for hor cnt = 0 hor cnt < hor frames 1 hor cnt++ { y = 0 for vert cnt = 0 vert cnt < vert frames vert cnt++ { try { j internal frame all frames frame idx set maximum } catch property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height frame idx++ y = y + frame height } x = x + frame width } frame height = get bounds height / all frames length frame idx y = 0 for frame idx < all frames length frame idx++ { try { j internal frame all frames frame idx set maximum } catch property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height y = y + frame height } check desktop size } arrange frames horizontally { component all frames = get all frames if all frames length == 0 { } manager set normal size vert frames = math ceil math sqrt all frames length hor frames = math floor math sqrt all frames length frame width = get bounds width / hor frames frame height = get bounds height / vert frames x = 0 y = 0 frame idx = 0 for vert cnt = 0 vert cnt < vert frames 1 vert cnt++ { x = 0 for hor cnt = 0 hor cnt < hor frames hor cnt++ { try { j internal frame all frames frame idx set maximum } catch property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height frame idx++ x = x + frame width } y = y + frame height } frame width = get bounds width / all frames length frame idx x = 0 for frame idx < all frames length frame idx++ { try { j internal frame all frames frame idx set maximum } catch property veto e { e print stack trace } all frames frame idx set bounds x y frame width frame height x = x + frame width } check desktop size } set all size dimension d { set minimum size d set maximum size d set preferred size d set bounds 0 0 d width d height } set all size width height { set all size new dimension width height } private check desktop size { if get parent != is visible { manager resize desktop } } } m didesktop manager default desktop manager { private m didesktop pane desktop m didesktop manager m didesktop pane new desktop { this desktop = new desktop } end resizing frame j component f { super end resizing frame f resize desktop } end dragging frame j component f { super end dragging frame f resize desktop } set normal size { j scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets if scroll pane != { dimension d = scroll pane get visible rect get size if scroll pane get border != { d set size d get width scroll insets left scroll insets right d get height scroll insets top scroll insets bottom } d set size d get width 20 d get height 20 desktop set all size d scroll pane invalidate scroll pane validate } } private insets get scroll pane insets { j scroll pane scroll pane = get scroll pane if scroll pane == || get scroll pane get border == { new insets 0 0 0 0 } else { get scroll pane get border get border insets scroll pane } } j scroll pane get scroll pane { if desktop get parent instanceof j viewport { j viewport view port = j viewport desktop get parent if view port get parent instanceof j scroll pane j scroll pane view port get parent } } resize desktop { x = 0 y = 0 j scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets if scroll pane != { j internal frame all frames = desktop get all frames for i = 0 i < all frames length i++ { if all frames i get x + all frames i get width > x { x = all frames i get x + all frames i get width } if all frames i get y + all frames i get height > y { y = all frames i get y + all frames i get height } } dimension d=scroll pane get visible rect get size if scroll pane get border != { d set size d get width scroll insets left scroll insets right d get height scroll insets top scroll insets bottom } if x <= d get width { x = d get width 20 } if y <= d get height { y = d get height 20 } desktop set all size x y scroll pane invalidate scroll pane validate } } } 