org jhotdraw draw action import awt * VerticalGridLayout vertical grid layout implements LayoutManager layout manager serializable { hgap vgap cols isVertical vertical = VerticalGridLayout vertical grid layout { this 1 0 0 0 } VerticalGridLayout vertical grid layout cols { this cols 0 0 } VerticalGridLayout vertical grid layout cols isVertical vertical { this cols 0 0 isVertical vertical } VerticalGridLayout vertical grid layout cols hgap vgap { this cols hgap vgap } VerticalGridLayout vertical grid layout cols hgap vgap isVertical vertical { if == 0 cols == 0 { new IllegalArgumentException illegal argument and cols cannot both be zero } this = this cols = cols this hgap = hgap this vgap = vgap this isVertical vertical = isVertical vertical } getRows get { } setRows set { if == 0 this cols == 0 { new IllegalArgumentException illegal argument and cols cannot both be zero } this = } setVertical set vertical { isVertical vertical = } isVertical vertical { isVertical vertical } getColumns get columns { cols } setColumns set columns cols { if cols == 0 this == 0 { new IllegalArgumentException illegal argument and cols cannot both be zero } this cols = cols } getHgap get hgap { hgap } setHgap set hgap hgap { this hgap = hgap } getVgap get vgap { vgap } setVgap set vgap vgap { this vgap = vgap } addLayoutComponent add layout component component comp { } removeLayoutComponent remove layout component component comp { } dimension preferredLayoutSize preferred layout size container parent { synchronized parent getTreeLock get tree lock { insets insets = parent getInsets get insets ncomponents = parent getComponentCount get component count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { component comp = parent getComponent get component dimension = comp getPreferredSize get preferred size if < width { = width } if < height { = height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } dimension minimumLayoutSize minimum layout size container parent { synchronized parent getTreeLock get tree lock { insets insets = parent getInsets get insets ncomponents = parent getComponentCount get component count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { component comp = parent getComponent get component dimension = comp getMinimumSize get minimum size if < width { = width } if < height { = height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } layoutContainer layout container container parent { synchronized parent getTreeLock get tree lock { insets insets = parent getInsets get insets ncomponents = parent getComponentCount get component count nrows = ncols = cols ltr = parent getComponentOrientation get component orientation isLeftToRight left to right if ncomponents == 0 { } if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = parent getWidth get width insets left + insets right = parent getHeight get height insets top + insets bottom = ncols 1 * hgap / ncols = nrows 1 * vgap / nrows if ltr { for = 0 = insets left < ncols c++ += + hgap { for = 0 = insets top < nrows r++ += + vgap { if isVertical vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent getComponent get component setBounds set bounds } } } } else { for = 0 = parent getWidth get width insets right < ncols c++ = + hgap { for = 0 = insets top < nrows r++ += + vgap { if isVertical vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent getComponent get component setBounds set bounds } } } } } } toString to { getClass get getName get + hgap= + hgap + vgap= + vgap + rows= + + cols= + cols + } } 