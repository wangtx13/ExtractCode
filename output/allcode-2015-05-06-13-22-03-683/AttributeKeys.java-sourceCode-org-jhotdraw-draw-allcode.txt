org jhotdraw draw import awt * import util * import org jhotdraw geom * AttributeKeys attribute keys { AttributeKey<Color> attribute key< color> FILL_COLOR = new AttributeKey<Color> attribute key< color> fillColor fill color color white enum WindingRule winding rule { EVEN_ODD NON_ZERO } AttributeKey<WindingRule> attribute key< winding rule> WINDING_RULE = new AttributeKey<WindingRule> attribute key< winding rule> windingRule winding rule WindingRule winding rule EVEN_ODD enum underfill { NONE CENTER FULL } AttributeKey<Underfill> attribute key< underfill> FILL_UNDER_STROKE = new AttributeKey<Underfill> attribute key< underfill> fillUnderStroke fill under stroke underfill CENTER AttributeKey<Color> attribute key< color> STROKE_COLOR = new AttributeKey<Color> attribute key< color> strokeColor stroke color color black AttributeKey<Double> attribute key< double> STROKE_WIDTH = new AttributeKey<Double> attribute key< double> strokeWidth stroke width 1d AttributeKey<Double> attribute key< double> STROKE_INNER_WIDTH_FACTOR = new AttributeKey<Double> attribute key< double> innerStrokeWidthFactor inner stroke width factor 2d AttributeKey<Integer> attribute key< integer> STROKE_JOIN = new AttributeKey<Integer> attribute key< integer> strokeJoin stroke join BasicStroke basic stroke JOIN_MITER AttributeKey<Integer> attribute key< integer> STROKE_CAP = new AttributeKey<Integer> attribute key< integer> strokeCap stroke cap BasicStroke basic stroke CAP_BUTT AttributeKey<Double> attribute key< double> STROKE_MITER_LIMIT_FACTOR = new AttributeKey<Double> attribute key< double> strokeMiterLimitFactor stroke miter limit factor 3d AttributeKey<double attribute key<double > STROKE_DASHES = new AttributeKey<double attribute key<double > strokeDashes stroke dashes AttributeKey<Double> attribute key< double> STROKE_DASH_PHASE = new AttributeKey<Double> attribute key< double> strokeDashPhase stroke dash phase 0d AttributeKey<Double> attribute key< double> STROKE_DASH_FACTOR = new AttributeKey<Double> attribute key< double> strokeDashFactor stroke dash factor enum StrokeType stroke type { BASIC DOUBLE } AttributeKey<StrokeType> attribute key< stroke type> STROKE_TYPE = new AttributeKey<StrokeType> attribute key< stroke type> strokeType stroke type StrokeType stroke type BASIC enum StrokePlacement stroke placement { CENTER INSIDE sid OUTSIDE sid } AttributeKey<StrokePlacement> attribute key< stroke placement> STROKE_PLACEMENT = new AttributeKey<StrokePlacement> attribute key< stroke placement> strokePlacement stroke placement StrokePlacement stroke placement CENTER AttributeKey<String> attribute key< string> TEXT = new AttributeKey<String> attribute key< string> text AttributeKey<Color> attribute key< color> TEXT_COLOR = new AttributeKey<Color> attribute key< color> textColor text color color black AttributeKey<Color> attribute key< color> TEXT_SHADOW_COLOR = new AttributeKey<Color> attribute key< color> textShadowColor text shadow color AttributeKey<Dimension2DDouble> attribute key< dimension2 double> TEXT_SHADOW_OFFSET = new AttributeKey<Dimension2DDouble> attribute key< dimension2 double> textShadowOffset text shadow offset new Dimension2DDouble dimension2 1d 1d AttributeKey<Font> attribute key< font> FONT_FACE = new AttributeKey<Font> attribute key< font> fontFace font new font VERDANA font PLAIN 10 AttributeKey<Double> attribute key< double> FONT_SIZE = new AttributeKey<Double> attribute key< double> fontSize font size 12d AttributeKey<Boolean> attribute key< boolean> FONT_BOLD = new AttributeKey<Boolean> attribute key< boolean> fontBold font bold AttributeKey<Boolean> attribute key< boolean> FONT_ITALIC = new AttributeKey<Boolean> attribute key< boolean> fontItalic font italic AttributeKey<Boolean> attribute key< boolean> FONT_UNDERLINED = new AttributeKey<Boolean> attribute key< boolean> fontUnderlined font underlined AttributeKey<Liner> attribute key< liner> BEZIER_PATH_LAYOUTER = new AttributeKey<Liner> attribute key< liner> bezierPathLayouter bezier path layouter AttributeKey<LineDecoration> attribute key< line decoration> END_DECORATION = new AttributeKey<LineDecoration> attribute key< line decoration> endDecoration decoration AttributeKey<LineDecoration> attribute key< line decoration> START_DECORATION = new AttributeKey<LineDecoration> attribute key< line decoration> startDecoration start decoration AttributeKey<Insets2DDouble> attribute key< insets2 double> DECORATOR_INSETS = new AttributeKey<Insets2DDouble> attribute key< insets2 double> decoratorInsets decorator insets new Insets2DDouble insets2 0 0 0 0 AttributeKey<Insets2DDouble> attribute key< insets2 double> LAYOUT_INSETS = new AttributeKey<Insets2DDouble> attribute key< insets2 double> borderInsets border insets new Insets2DDouble insets2 0 0 0 0 enum orientation { NORTH NORTH_EAST EAST SOUTH_EAST SOUTH SOUTH_WEST WEST NORTH_WEST } AttributeKey<Orientation> attribute key< orientation> ORIENTATION = new AttributeKey<Orientation> attribute key< orientation> orientation orientation NORTH Set<AttributeKey> set< attribute key> supportedAttributes supported attributes Map<String map< AttributeKey> attribute key> supportedAttributeMap supported attribute map { HashSet<AttributeKey> hash set< attribute key> = new HashSet<AttributeKey> hash set< attribute key> addAll add all arrays asList list new AttributeKey attribute key { FILL_COLOR FILL_UNDER_STROKE STROKE_COLOR STROKE_WIDTH STROKE_INNER_WIDTH_FACTOR STROKE_JOIN STROKE_CAP STROKE_MITER_LIMIT_FACTOR STROKE_DASHES STROKE_DASH_PHASE STROKE_TYPE STROKE_PLACEMENT TEXT TEXT_COLOR TEXT_SHADOW_COLOR TEXT_SHADOW_OFFSET FONT_FACE FONT_SIZE FONT_BOLD FONT_ITALIC FONT_UNDERLINED BEZIER_PATH_LAYOUTER END_DECORATION START_DECORATION DECORATOR_INSETS ORIENTATION WINDING_RULE } supportedAttributes supported attributes = collections unmodifiableSet unmodifiable set HashMap<String hash map< AttributeKey> attribute key> = new HashMap<String hash map< AttributeKey> attribute key> for AttributeKey attribute key { put getKey get key } supportedAttributeMap supported attribute map = collections unmodifiableMap unmodifiable map } getStrokeTotalWidth get stroke total width figure { switch STROKE_TYPE get { case BASIC default STROKE_WIDTH get case DOUBLE STROKE_WIDTH get * 1d + STROKE_INNER_WIDTH_FACTOR get } } stroke getStroke get stroke figure { strokeWidth stroke width = STROKE_WIDTH get dashFactor dash factor = STROKE_DASH_FACTOR get != ? STROKE_DASH_FACTOR get strokeWidth stroke width ddashes = STROKE_DASHES get float dashes = if ddashes != { dashes = new float ddashes length for i=0 < dashes length i++ { dashes = float ddashes * dashFactor dash factor } } switch STROKE_TYPE get { case BASIC default new BasicStroke basic stroke float strokeWidth stroke width BasicStroke basic stroke CAP_BUTT STROKE_JOIN get math max 1f float STROKE_MITER_LIMIT_FACTOR get * strokeWidth stroke width dashes float STROKE_DASH_PHASE get * dashFactor dash factor case DOUBLE new DoubleStroke stroke float STROKE_INNER_WIDTH_FACTOR get * strokeWidth stroke width float strokeWidth stroke width BasicStroke basic stroke CAP_BUTT STROKE_JOIN get math max 1f float STROKE_MITER_LIMIT_FACTOR get * strokeWidth stroke width dashes float STROKE_DASH_PHASE get floatValue float value * dashFactor dash factor } } font getFont get font figure { font prototype = FONT_FACE get if prototype == { } if getFontStyle get font style != font PLAIN { prototype deriveFont derive font getFontStyle get font style FONT_SIZE get floatValue float value } else { prototype deriveFont derive font FONT_SIZE get floatValue float value } } getFontStyle get font style figure { style = font PLAIN if FONT_BOLD get style |= font BOLD if FONT_ITALIC get style |= font ITALIC style } getPerpendicularFillGrowth get perpendicular fill growth figure { grow strokeWidth stroke width = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width StrokePlacement stroke placement placement = STROKE_PLACEMENT get switch FILL_UNDER_STROKE get { case FULL switch placement { case INSIDE sid grow = 0f break case OUTSIDE sid grow = strokeWidth stroke width break case CENTER default grow = strokeWidth stroke width / 2d break } break case NONE switch placement { case INSIDE sid grow = strokeWidth stroke width break case OUTSIDE sid grow = 0f break case CENTER default grow = strokeWidth stroke width / 2d break } break case CENTER default switch placement { case INSIDE sid grow = strokeWidth stroke width / 2d break case OUTSIDE sid grow = strokeWidth stroke width / 2d break case CENTER default grow = 0d break } break } grow } getPerpendicularDrawGrowth get perpendicular draw growth figure { grow strokeWidth stroke width = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width StrokePlacement stroke placement placement = STROKE_PLACEMENT get switch placement { case INSIDE sid grow = strokeWidth stroke width / 2d break case OUTSIDE sid grow = strokeWidth stroke width / 2d break case CENTER default grow = 0f break } grow } getPerpendicularHitGrowth get perpendicular hit growth figure { grow if STROKE_COLOR get == { grow = getPerpendicularFillGrowth get perpendicular fill growth } else { strokeWidth stroke width = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width grow = getPerpendicularDrawGrowth get perpendicular draw growth + strokeWidth stroke width / 2d } grow } } 