org jhotdraw xml import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * import awt * JavaxDOMInput javax dom input implements DOMInput dom input { private HashMap<String hash map< object> idobjects = new HashMap<String hash map< object> private document document private node current private DOMFactory dom factory factory JavaxDOMInput javax dom input DOMFactory dom factory factory InputStream input stream IOException { this factory = factory try { transformer = TransformerFactory transformer factory newInstance new instance newTransformer new transformer DOMResult dom result result = new DOMResult dom result transform new StreamSource stream source result document = document result getNode get node current = document } catch TransformerException transformer { IOException = new IOException getMessage get message initCause init cause } } JavaxDOMInput javax dom input DOMFactory dom factory factory reader IOException { this factory = factory try { transformer = TransformerFactory transformer factory newInstance new instance newTransformer new transformer DOMResult dom result result = new DOMResult dom result transform new StreamSource stream source result document = document result getNode get node current = document } catch TransformerException transformer { IOException = new IOException getMessage get message initCause init cause } } getTagName get tag { element current getTagName get tag } getAttribute get attribute defaultValue default value { value = element current getAttribute get attribute value length == 0 ? defaultValue default value value } getText get text { getText get text } getText get text defaultValue default value { if current getChildNodes get child nodes getLength get length == 0 defaultValue default value StringBuilder builder buf = new StringBuilder builder getText get text current buf buf toString to } private getText get text node StringBuilder builder buf { if getNodeValue get node value != buf append getNodeValue get node value NodeList node list children = getChildNodes get child nodes for i=0 < children getLength get length i++ { getText get text children item buf } } util List<String> list< string> getInheritedAttribute get inherited attribute { LinkedList<String> linked list< string> values = new LinkedList<String> linked list< string> node node = current while node != { value = element node getAttribute get attribute values addFirst add first value node = node getParentNode get parent node } values } getAttribute get attribute defaultValue default value { value = element current getAttribute get attribute value length == 0 ? defaultValue default value long decode value intValue value } getAttribute get attribute defaultValue default value { value = element current getAttribute get attribute value length == 0 ? defaultValue default value parseDouble parse value } getAttribute get attribute defaultValue default value { value = element current getAttribute get attribute value length == 0 ? defaultValue default value valueOf value of value booleanValue value } getElementCount get element count { count = 0 NodeList node list list = current getChildNodes get child nodes for i=0 < list getLength get length i++ { node node = list item if node instanceof element { count++ } } count } getElementCount get element count tagName tag { count = 0 NodeList node list list = current getChildNodes get child nodes for i=0 < list getLength get length i++ { node node = list item if node instanceof element element node getTagName get tag equals tagName tag { count++ } } count } openElement open element index { count = 0 NodeList node list list = current getChildNodes get child nodes len = list getLength get length for i=0 < len i++ { node node = list item if node instanceof element { if count++ == index { current = node } } } } openElement open element tagName tag { count = 0 NodeList node list list = current getChildNodes get child nodes len = list getLength get length for i=0 < len i++ { node node = list item if node instanceof element element node getTagName get tag equals tagName tag { current = node } } new IllegalArgumentException illegal argument element not found +tagName +tag } openElement open element tagName tag index { count = 0 NodeList node list list = current getChildNodes get child nodes len = list getLength get length for i=0 < len i++ { node node = list item if node instanceof element element node getTagName get tag equals tagName tag { if count++ == index { current = node } } } new IllegalArgumentException illegal argument no such child +tagName+ +tag name+ +index+ } closeElement close element { current = current getParentNode get parent node } readObject read IOException { readObject read 0 } readObject read index IOException { openElement open element index tagName tag = getTagName get tag if tagName tag equals { = } else if tagName tag equals { = getText get text } else if tagName tag equals { = integer decode getText get text } else if tagName tag equals long { = long decode getText get text } else if tagName tag equals float { = new float float parseFloat parse float getText get text } else if tagName tag equals { = new parseDouble parse getText get text } else if tagName tag equals { = valueOf value of getText get text } else if tagName tag equals color { = new color getAttribute get attribute rgba 0xff } else if tagName tag equals intArray { = new getElementCount get element count for i=0 < length i++ { = integer readObject read intValue value } = } else if tagName tag equals floatArray float { float = new float getElementCount get element count for i=0 < length i++ { = float readObject read floatValue float value } = } else if tagName tag equals doubleArray { = new getElementCount get element count for i=0 < length i++ { = readObject read doubleValue value } = } else if tagName tag equals font { = new font getAttribute get attribute dialog getAttribute get attribute style 0 getAttribute get attribute size 0 } else if tagName tag equals enum { = factory createEnum create enum getAttribute get attribute type getText get text } else { ref = getAttribute get attribute ref = getAttribute get attribute ref if == { = factory create getTagName get tag } else if idobjects containsKey contains key { = idobjects get } else { = factory create getTagName get tag idobjects put } if ref == { if instanceof DOMStorable dom storable { DOMStorable dom storable read this } } } closeElement close element } } 