net n3 nanoxml import reader import IOException import StringReader reader import util enumeration import util hashtable import util properties import util stack NonValidator non validator implements IXMLValidator xml validator { IXMLEntityResolver xml entity resolver parameterEntityResolver entity resolver hashtable attributeDefaultValues attribute default values stack currentElements current elements NonValidator non validator { this attributeDefaultValues attribute default values = new hashtable this currentElements current elements = new stack this parameterEntityResolver entity resolver = new XMLEntityResolver xml entity resolver } finalize throwable { this parameterEntityResolver entity resolver = this attributeDefaultValues attribute default values clear this attributeDefaultValues attribute default values = this currentElements current elements clear this currentElements current elements = super finalize } setParameterEntityResolver set entity resolver IXMLEntityResolver xml entity resolver resolver { this parameterEntityResolver entity resolver = resolver } IXMLEntityResolver xml entity resolver getParameterEntityResolver get entity resolver { this parameterEntityResolver entity resolver } parseDTD parse publicid IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver external { XMLUtil xml util skipWhitespace skip whitespace reader origLevel orig level = reader getStreamLevel get stream level for { = XMLUtil xml util read reader '%' char ch = charAt char 0 if ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver continue } else if ch == '<' { this processElement process element reader entityResolver entity resolver } else if ch == ' ' { } else { XMLUtil xml util errorInvalidInput invalid input reader getSystemID get systemid reader getLineNr get line nr } { ch = reader read if external reader getStreamLevel get stream level < origLevel orig level { reader unread ch } } while ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' reader unread ch } } processElement process element IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver { = XMLUtil xml util read reader '%' char ch = charAt char 0 if ch != '!' { XMLUtil xml util skipTag skip tag reader } = XMLUtil xml util read reader '%' ch = charAt char 0 switch ch { case ' ' XMLUtil xml util skipComment skip comment reader break case ' ' this processConditionalSection process conditional section reader entityResolver entity resolver break case 'E' ' e' this processEntity process entity reader entityResolver entity resolver break case 'A' ' a' this processAttList process att list reader entityResolver entity resolver break default XMLUtil xml util skipTag skip tag reader } } processConditionalSection process conditional section IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver { XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' char ch = charAt char 0 if ch != 'I' ' i' { XMLUtil xml util skipTag skip tag reader } = XMLUtil xml util read reader '%' ch = charAt char 0 switch ch { case 'G' ' g' this processIgnoreSection process ignore section reader entityResolver entity resolver case 'N' ' n' break default XMLUtil xml util skipTag skip tag reader } if ! XMLUtil xml util checkLiteral check literal reader CLUDE { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 if ch != ' ' { XMLUtil xml util skipTag skip tag reader } reader subreader = new CDATAReader reader reader StringBuffer buffer buf = new StringBuffer buffer 1024 for { ch2 = subreader read if ch2 < 0 { break } buf append char ch2 } subreader close reader startNewStream start new stream new StringReader reader buf toString to } processIgnoreSection process ignore section IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver { if ! XMLUtil xml util checkLiteral check literal reader NORE { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' char ch = charAt char 0 if ch != ' ' { XMLUtil xml util skipTag skip tag reader } reader subreader = new CDATAReader reader reader subreader close } processAttList process att list IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver { if ! XMLUtil xml util checkLiteral check literal reader TTLIST { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' char ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } reader unread ch elementName element = XMLUtil xml util scanIdentifier scan identifier reader XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } properties props = new properties while ch != '>' { reader unread ch attName att = XMLUtil xml util scanIdentifier scan identifier reader XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } if ch == ' ' { while ch != ' ' { = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } } } else { reader unread ch XMLUtil xml util scanIdentifier scan identifier reader } XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } if ch == '#' { = XMLUtil xml util scanIdentifier scan identifier reader XMLUtil xml util skipWhitespace skip whitespace reader if ! equals FIXED { XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } continue } } else { reader unread ch } value = XMLUtil xml util scanString scan reader '%' this parameterEntityResolver entity resolver props put attName att value XMLUtil xml util skipWhitespace skip whitespace reader = XMLUtil xml util read reader '%' ch = charAt char 0 while ch == '%' { XMLUtil xml util processEntity process entity reader this parameterEntityResolver entity resolver = XMLUtil xml util read reader '%' ch = charAt char 0 } } if ! props isEmpty empty { this attributeDefaultValues attribute default values put elementName element props } } processEntity process entity IXMLReader xml reader reader IXMLEntityResolver xml entity resolver entityResolver entity resolver { if ! XMLUtil xml util checkLiteral check literal reader NTITY { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader char ch = XMLUtil xml util readChar read char reader '\0' if ch == '%' { XMLUtil xml util skipWhitespace skip whitespace reader entityResolver entity resolver = this parameterEntityResolver entity resolver } else { reader unread ch } key = XMLUtil xml util scanIdentifier scan identifier reader XMLUtil xml util skipWhitespace skip whitespace reader ch = XMLUtil xml util readChar read char reader '%' systemid = publicid = switch ch { case 'P' ' p' if ! XMLUtil xml util checkLiteral check literal reader UBLIC { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader publicid = XMLUtil xml util scanString scan reader '%' this parameterEntityResolver entity resolver XMLUtil xml util skipWhitespace skip whitespace reader systemid = XMLUtil xml util scanString scan reader '%' this parameterEntityResolver entity resolver XMLUtil xml util skipWhitespace skip whitespace reader XMLUtil xml util readChar read char reader '%' break case 'S' ' s' if ! XMLUtil xml util checkLiteral check literal reader YSTEM { XMLUtil xml util skipTag skip tag reader } XMLUtil xml util skipWhitespace skip whitespace reader systemid = XMLUtil xml util scanString scan reader '%' this parameterEntityResolver entity resolver XMLUtil xml util skipWhitespace skip whitespace reader XMLUtil xml util readChar read char reader '%' break case ' ' case '\'' reader unread ch value = XMLUtil xml util scanString scan reader '%' this parameterEntityResolver entity resolver entityResolver entity resolver addInternalEntity add internal entity key value XMLUtil xml util skipWhitespace skip whitespace reader XMLUtil xml util readChar read char reader '%' break default XMLUtil xml util skipTag skip tag reader } if systemid != { entityResolver entity resolver addExternalEntity add external entity key publicid systemid } } elementStarted element started systemId lineNr line nr { properties attribs = properties this attributeDefaultValues attribute default values get if attribs == { attribs = new properties } else { attribs = properties attribs clone } this currentElements current elements push attribs } elementEnded element ended systemId lineNr line nr { } elementAttributesProcessed element attributes processed properties extraAttributes extra attributes systemId lineNr line nr { properties props = properties this currentElements current elements pop enumeration enm = props keys while enm hasMoreElements has more elements { key = enm nextElement next element extraAttributes extra attributes put key props get key } } attributeAdded attribute added key value systemId lineNr line nr { properties props = properties this currentElements current elements peek if props containsKey contains key key { props remove key } } PCDataAdded data added systemId lineNr line nr { } } 