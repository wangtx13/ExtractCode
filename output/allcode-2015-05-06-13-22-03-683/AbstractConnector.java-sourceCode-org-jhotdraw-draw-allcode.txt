org jhotdraw draw import IOException import org jhotdraw util * import awt * import awt geom * import org jhotdraw geom * import org jhotdraw xml DOMInput dom input import org jhotdraw xml DOMOutput dom output AbstractConnector connector implements connector { private figure owner private isConnectToDecorator connect to decorator private isVisible visible private isStatePersistent state persistent AbstractConnector connector { owner = } AbstractConnector connector figure owner { this owner = owner } setConnectToDecorator set connect to decorator newValue new value { isConnectToDecorator connect to decorator = newValue new value } isConnectToDecorator connect to decorator { isConnectToDecorator connect to decorator } setVisible set visible newValue new value { isVisible visible = newValue new value } isVisible visible { isVisible visible } figure getConnectorTarget get connector target figure { isConnectToDecorator connect to decorator getDecorator get decorator != ? getDecorator get decorator } contains Point2D point2 { getOwner get owner contains } draw Graphics2D graphics2 { if isVisible visible { Rectangle2D rectangle2 bounds = getBounds get bounds Ellipse2D ellipse2 circle = new Ellipse2D ellipse2 bounds + bounds width / 2 3 bounds + bounds height / 2 3 6 6 setColor set color color blue fill circle } } Point2D point2 findStart find start ConnectionFigure connection figure connection { findPoint find point connection } Point2D point2 findEnd find ConnectionFigure connection figure connection { findPoint find point connection } Point2D point2 findPoint find point ConnectionFigure connection figure connection { geom center getBounds get bounds } Rectangle2D rectangle2 getBounds get bounds { getOwner get owner getBounds get bounds } figure getOwner get owner { owner } setOwner set owner figure newValue new value { owner = newValue new value } clone { try { AbstractConnector connector that = AbstractConnector connector super clone that } catch CloneNotSupportedException clone not supported { InternalError internal = new InternalError internal toString to } } updateStartLocation update start location Point2D point2 { } updateEndLocation update location Point2D point2 { } Point2D point2 getAnchor get anchor { geom center getBounds get bounds } updateAnchor update anchor Point2D point2 { } read DOMInput dom input IOException { if isStatePersistent state persistent { isConnectToDecorator connect to decorator = getAttribute get attribute connectToDecorator connect to decorator isVisible visible = getAttribute get attribute visible } openElement open element owner this owner = figure readObject read 0 closeElement close element } write DOMOutput dom output out IOException { if isStatePersistent state persistent { if isConnectToDecorator connect to decorator { out addAttribute add attribute connectToDecorator connect to decorator } if isVisible visible { out addAttribute add attribute visible } } out openElement open element owner out writeObject write getOwner get owner out closeElement close element } } 