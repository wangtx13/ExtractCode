org jhotdraw xml import util * DefaultDOMFactory default dom factory implements DOMFactory dom factory { private HashMap<Class hash map< string> classToNameMap to map = new HashMap<Class hash map< string> private HashMap<String hash map< object> nameToPrototypeMap to prototype map = new HashMap<String hash map< object> private HashMap<Class hash map< string> enumClassToNameMap enum to map = new HashMap<Class hash map< string> private HashMap<String hash map< class> nameToEnumClassMap to enum map = new HashMap<String hash map< class> private HashMap<Enum hash map< enum string> enumToValueMap enum to value map = new HashMap<Enum hash map< enum string> private HashMap<String hash map< Set<Enum>> set< enum>> valueToEnumMap value to enum map = new HashMap<String hash map< Set<Enum>> set< enum>> DefaultDOMFactory default dom factory { } addStorableClass add storable { nameToPrototypeMap to prototype map put classToNameMap to map put } addStorable add storable DOMStorable dom storable prototype { nameToPrototypeMap to prototype map put prototype classToNameMap to map put prototype getClass get } addEnumClass add enum { enumClassToNameMap enum to map put nameToEnumClassMap to enum map put } addEnum add enum value enum { enumToValueMap enum to value map put value Set<Enum> set< enum> enums if valueToEnumMap value to enum map containsKey contains key value { enums = valueToEnumMap value to enum map get value } else { enums = new HashSet<Enum> hash set< enum> valueToEnumMap value to enum map put value enums } enums add } create { = nameToPrototypeMap to prototype map get if == { new IllegalArgumentException illegal argument storable not known to factory +name } if instanceof { try { newInstance new instance } catch { IllegalArgumentException illegal argument = new IllegalArgumentException illegal argument storable not instantiable by factory +name initCause init cause } } else { try { getClass get getMethod get clone } catch { IllegalArgumentException illegal argument = new IllegalArgumentException illegal argument storable prototype not cloneable by factory +name initCause init cause } } } getName get DOMStorable dom storable { = classToNameMap to map get getClass get if == { new IllegalArgumentException illegal argument storable not known to factory storable +o+ factory +this getClass get } } getEnumName get enum enum { = enumClassToNameMap enum to map get getClass get if == { new IllegalArgumentException illegal argument enum not known to factory +e getClass get } } getEnumValue get enum value enum { enumToValueMap enum to value map containsKey contains key ? enumToValueMap enum to value map get toString to } enum createEnum create enum value { enumClass enum = nameToEnumClassMap to enum map get if enumClass enum == { new IllegalArgumentException illegal argument enum not known to factory +name } Set<Enum> set< enum> enums = valueToEnumMap value to enum map get value if enums == { enum valueOf value of enumClass enum value } for enum enums { if getClass get == enumClass enum { } } new IllegalArgumentException illegal argument enum value not known to factory +value } } 