org jhotdraw gui import javax swing * import javax swing event * import awt * import beans * import org jhotdraw app action arrangeable MDIDesktopPane didesktop pane JDesktopPane desktop pane implements arrangeable { private FRAME_OFFSET=20 private MDIDesktopManager didesktop manager manager MDIDesktopPane didesktop pane { manager = new MDIDesktopManager didesktop manager this setDesktopManager set desktop manager manager setDragMode set drag mode JDesktopPane desktop pane OUTLINE_DRAG_MODE setAlignmentX set alignment JComponent component LEFT_ALIGNMENT } setArrangement set arrangement arrangeable arrangement newValue new value { arrangeable arrangement oldValue old value = getArrangement get arrangement switch newValue new value { case CASCADE arrangeFramesCascading arrange frames cascading break case HORIZONTAL z arrangeFramesHorizontally arrange frames horizontally break case VERTICAL arrangeFramesVertically arrange frames vertically break } firePropertyChange fire property change arrangement oldValue old value newValue new value } arrangeable arrangement getArrangement get arrangement { arrangeable arrangement CASCADE } private arrangeFramesCascading arrange frames cascading { = 0 = 0 JInternalFrame internal frame allFrames all frames = getAllFrames get all frames if allFrames all frames length == 0 { } manager setNormalSize set normal size frameHeight frame height = getBounds get bounds height 5 allFrames all frames length * FRAME_OFFSET frameWidth frame width = getBounds get bounds width 5 allFrames all frames length * FRAME_OFFSET for = allFrames all frames length 1 >= 0 { try { allFrames all frames setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames setBounds set bounds frameWidth frame width frameHeight frame height = + FRAME_OFFSET = + FRAME_OFFSET } checkDesktopSize check desktop size } private tileFramesHorizontally tile frames horizontally { component allFrames all frames = getAllFrames get all frames if allFrames all frames length == 0 { } manager setNormalSize set normal size frameHeight frame height = getBounds get bounds height/allFrames height/all frames length = 0 for = 0 < allFrames all frames length i++ { try { JInternalFrame internal frame allFrames all frames setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames setBounds set bounds 0 getBounds get bounds width frameHeight frame height = + frameHeight frame height } checkDesktopSize check desktop size } tileFramesVertically tile frames vertically { component allFrames all frames = getAllFrames get all frames if allFrames all frames length == 0 { } manager setNormalSize set normal size frameWidth frame width = getBounds get bounds width/allFrames width/all frames length = 0 for = 0 < allFrames all frames length i++ { try { JInternalFrame internal frame allFrames all frames setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames setBounds set bounds 0 frameWidth frame width getBounds get bounds height = + frameWidth frame width } checkDesktopSize check desktop size } arrangeFramesVertically arrange frames vertically { component allFrames all frames = getAllFrames get all frames if allFrames all frames length == 0 { } manager setNormalSize set normal size vertFrames vert frames = math floor math sqrt allFrames all frames length horFrames hor frames = math ceil math sqrt allFrames all frames length frameWidth frame width = getBounds get bounds width / horFrames hor frames frameHeight frame height = getBounds get bounds height / vertFrames vert frames = 0 = 0 frameIdx frame idx = 0 for horCnt hor cnt = 0 horCnt hor cnt < horFrames hor frames 1 horCnt++ hor cnt++ { = 0 for vertCnt vert cnt = 0 vertCnt vert cnt < vertFrames vert frames vertCnt++ vert cnt++ { try { JInternalFrame internal frame allFrames all frames frameIdx frame idx setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames frameIdx frame idx setBounds set bounds frameWidth frame width frameHeight frame height frameIdx++ frame idx++ = + frameHeight frame height } = + frameWidth frame width } frameHeight frame height = getBounds get bounds height / allFrames all frames length frameIdx frame idx = 0 for frameIdx frame idx < allFrames all frames length frameIdx++ frame idx++ { try { JInternalFrame internal frame allFrames all frames frameIdx frame idx setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames frameIdx frame idx setBounds set bounds frameWidth frame width frameHeight frame height = + frameHeight frame height } checkDesktopSize check desktop size } arrangeFramesHorizontally arrange frames horizontally { component allFrames all frames = getAllFrames get all frames if allFrames all frames length == 0 { } manager setNormalSize set normal size vertFrames vert frames = math ceil math sqrt allFrames all frames length horFrames hor frames = math floor math sqrt allFrames all frames length frameWidth frame width = getBounds get bounds width / horFrames hor frames frameHeight frame height = getBounds get bounds height / vertFrames vert frames = 0 = 0 frameIdx frame idx = 0 for vertCnt vert cnt = 0 vertCnt vert cnt < vertFrames vert frames 1 vertCnt++ vert cnt++ { = 0 for horCnt hor cnt = 0 horCnt hor cnt < horFrames hor frames horCnt++ hor cnt++ { try { JInternalFrame internal frame allFrames all frames frameIdx frame idx setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames frameIdx frame idx setBounds set bounds frameWidth frame width frameHeight frame height frameIdx++ frame idx++ = + frameWidth frame width } = + frameHeight frame height } frameWidth frame width = getBounds get bounds width / allFrames all frames length frameIdx frame idx = 0 for frameIdx frame idx < allFrames all frames length frameIdx++ frame idx++ { try { JInternalFrame internal frame allFrames all frames frameIdx frame idx setMaximum set maximum } catch PropertyVetoException property veto { printStackTrace stack trace } allFrames all frames frameIdx frame idx setBounds set bounds frameWidth frame width frameHeight frame height = + frameWidth frame width } checkDesktopSize check desktop size } setAllSize set all size dimension { setMinimumSize set minimum size setMaximumSize set maximum size setPreferredSize set preferred size setBounds set bounds 0 0 width height } setAllSize set all size width height { setAllSize set all size new dimension width height } private checkDesktopSize check desktop size { if getParent get parent != isVisible visible { manager resizeDesktop resize desktop } } } MDIDesktopManager didesktop manager DefaultDesktopManager default desktop manager { private MDIDesktopPane didesktop pane desktop MDIDesktopManager didesktop manager MDIDesktopPane didesktop pane newDesktop new desktop { this desktop = newDesktop new desktop } endResizingFrame resizing frame JComponent component { super endResizingFrame resizing frame resizeDesktop resize desktop } endDraggingFrame dragging frame JComponent component { super endDraggingFrame dragging frame resizeDesktop resize desktop } setNormalSize set normal size { JScrollPane scroll pane scrollPane scroll pane = getScrollPane get scroll pane insets scrollInsets scroll insets = getScrollPaneInsets get scroll pane insets if scrollPane scroll pane != { dimension = scrollPane scroll pane getVisibleRect get visible rect getSize get size if scrollPane scroll pane getBorder get border != { setSize set size getWidth get width scrollInsets scroll insets left scrollInsets scroll insets right getHeight get height scrollInsets scroll insets top scrollInsets scroll insets bottom } setSize set size getWidth get width 20 getHeight get height 20 desktop setAllSize set all size scrollPane scroll pane invalidate scrollPane scroll pane validate } } private insets getScrollPaneInsets get scroll pane insets { JScrollPane scroll pane scrollPane scroll pane = getScrollPane get scroll pane if scrollPane scroll pane == || getScrollPane get scroll pane getBorder get border == { new insets 0 0 0 0 } else { getScrollPane get scroll pane getBorder get border getBorderInsets get border insets scrollPane scroll pane } } JScrollPane scroll pane getScrollPane get scroll pane { if desktop getParent get parent instanceof JViewport viewport { JViewport viewport viewPort view port = JViewport viewport desktop getParent get parent if viewPort view port getParent get parent instanceof JScrollPane scroll pane JScrollPane scroll pane viewPort view port getParent get parent } } resizeDesktop resize desktop { = 0 = 0 JScrollPane scroll pane scrollPane scroll pane = getScrollPane get scroll pane insets scrollInsets scroll insets = getScrollPaneInsets get scroll pane insets if scrollPane scroll pane != { JInternalFrame internal frame allFrames all frames = desktop getAllFrames get all frames for = 0 < allFrames all frames length i++ { if allFrames all frames getX get + allFrames all frames getWidth get width > { = allFrames all frames getX get + allFrames all frames getWidth get width } if allFrames all frames getY get + allFrames all frames getHeight get height > { = allFrames all frames getY get + allFrames all frames getHeight get height } } dimension d=scrollPane d=scroll pane getVisibleRect get visible rect getSize get size if scrollPane scroll pane getBorder get border != { setSize set size getWidth get width scrollInsets scroll insets left scrollInsets scroll insets right getHeight get height scrollInsets scroll insets top scrollInsets scroll insets bottom } if <= getWidth get width { = getWidth get width 20 } if <= getHeight get height { = getHeight get height 20 } desktop setAllSize set all size scrollPane scroll pane invalidate scrollPane scroll pane validate } } } 