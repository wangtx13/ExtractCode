org jhotdraw app import awt * import awt event * import util prefs * import javax swing * import util * OSXPaletteHandler palette handler { private HashSet<Window> hash set< window> palettes = new HashSet<Window> hash set< window> private HashMap<Window hash map< window project> windows = new HashMap<Window hash map< window project> private OSXPaletteHandler palette handler instance private javax swing timer timer private DefaultOSXApplication default application app private WindowFocusListener window focus listener focusHandler focus handler = new WindowFocusListener window focus listener { windowGainedFocus window gained focus WindowEvent window event { timer stop if windows containsKey contains key getWindow get window { app setCurrentProject set current project project windows get getWindow get window showPalettes show palettes } } windowLostFocus window lost focus WindowEvent window event { timer restart } } OSXPaletteHandler palette handler DefaultOSXApplication default application app { this app = app timer = new javax swing timer 60 new ActionListener action listener { actionPerformed action performed ActionEvent action event evt { maybeHidePalettes maybe hide palettes } } timer setRepeats set repeats } add window window project project { window addWindowFocusListener add window focus listener focusHandler focus handler windows put window project } remove window window project project { windows remove window window removeWindowFocusListener remove window focus listener focusHandler focus handler } addPalette add palette window palette { palette addWindowFocusListener add window focus listener focusHandler focus handler palettes add palette } removePalette remove palette window palette { palettes remove palette palette removeWindowFocusListener remove window focus listener focusHandler focus handler } Set<Window> set< window> getPalettes get palettes { collections unmodifiableSet unmodifiable set palettes } private showPalettes show palettes { for window palette palettes { if ! palette isVisible visible { palette setVisible set visible } } } private isFocused focused window { if isFocused focused window ownedWindows owned windows = getOwnedWindows get owned windows for i=0 < ownedWindows owned windows length i++ { if isFocused focused ownedWindows owned windows { } } } private maybeHidePalettes maybe hide palettes { hasFocus has focus = for window window windows keySet key set { if isFocused focused window { hasFocus has focus = break } } if ! hasFocus has focus windows size > 0 { for window palette palettes { if isFocused focused palette { hasFocus has focus = break } } } if ! hasFocus has focus { for window palette palettes { palette setVisible set visible } } } } 