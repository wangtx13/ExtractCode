org jhotdraw draw import awt * import awt geom * import awt event * import util * DragTracker drag tracker AbstractTool tool { figure anchorFigure anchor figure Point2D point2 oldPoint old point Point2D point2 anchorPoint anchor point private isDragging dragging DragTracker drag tracker figure figure { anchorFigure anchor figure = figure } mouseMoved mouse moved MouseEvent mouse event evt { updateCursor update cursor editor findView find view container evt getSource get source new point evt getX get evt getY get } mousePressed mouse pressed MouseEvent mouse event evt { super mousePressed mouse pressed evt DrawingView drawing view view = getView get view if evt isShiftDown shift down { view setHandleDetailLevel set handle detail level 0 view toggleSelection toggle selection anchorFigure anchor figure if ! view isFigureSelected figure selected anchorFigure anchor figure { anchorFigure anchor figure = } } else if ! view isFigureSelected figure selected anchorFigure anchor figure { view setHandleDetailLevel set handle detail level 0 view clearSelection clear selection view addToSelection add to selection anchorFigure anchor figure } Point2D point2 origin = new Point2D point2 MAX_VALUE MAX_VALUE for figure view getSelectedFigures get selected figures { Rectangle2D rectangle2 = getBounds get bounds origin = math min origin origin = math min origin } Point2D point2 constrainedOrigin constrained origin = view getConstrainer get constrainer constrainPoint constrain point new Point2D point2 origin origin oldPoint old point = view getConstrainer get constrainer constrainPoint constrain point view viewToDrawing view to drawing new point evt getX get evt getY get oldPoint old point += origin constrainedOrigin constrained origin oldPoint old point += origin constrainedOrigin constrained origin anchorPoint anchor point = oldPoint old point } mouseDragged mouse dragged MouseEvent mouse event evt { DrawingView drawing view view = getView get view if isDragging dragging = { isDragging dragging = updateCursor update cursor editor findView find view container evt getSource get source new point evt getX get evt getY get } Point2D point2 newPoint new point = view getConstrainer get constrainer constrainPoint constrain point view viewToDrawing view to drawing new point evt getX get evt getY get AffineTransform affine transform tx = new AffineTransform affine transform tx translate newPoint new point oldPoint old point newPoint new point oldPoint old point for figure view getSelectedFigures get selected figures { willChange will change basicTransform basic transform tx changed } oldPoint old point = newPoint new point } mouseReleased mouse released MouseEvent mouse event evt { super mouseReleased mouse released evt isDragging dragging = = evt getX get = evt getY get updateCursor update cursor editor findView find view container evt getSource get source new point evt getX get evt getY get Point2D point2 = getView get view getConstrainer get constrainer constrainPoint constrain point getView get view viewToDrawing view to drawing new point Collection<Figure> collection< figure> draggedFigures dragged figures = new LinkedList linked list getView get view getSelectedFigures get selected figures figure dropTarget drop target = getDrawing get drawing findFigureExcept find figure draggedFigures dragged figures if dropTarget drop target != { snapBack snap back = dropTarget drop target handleDrop handle drop draggedFigures dragged figures getView get view if snapBack snap back { AffineTransform affine transform tx = new AffineTransform affine transform tx translate anchorPoint anchor point oldPoint old point anchorPoint anchor point oldPoint old point for figure draggedFigures dragged figures { willChange will change basicTransform basic transform tx changed } } else { AffineTransform affine transform tx = new AffineTransform affine transform tx translate anchorPoint anchor point + oldPoint old point anchorPoint anchor point + oldPoint old point if ! tx isIdentity identity { getDrawing get drawing fireUndoableEditHappened fire undoable edit happened new TransformEdit transform edit draggedFigures dragged figures tx } } } else { AffineTransform affine transform tx = new AffineTransform affine transform tx translate anchorPoint anchor point + oldPoint old point anchorPoint anchor point + oldPoint old point if ! tx isIdentity identity { getDrawing get drawing fireUndoableEditHappened fire undoable edit happened new TransformEdit transform edit draggedFigures dragged figures tx } } fireToolDone fire tool done } } 