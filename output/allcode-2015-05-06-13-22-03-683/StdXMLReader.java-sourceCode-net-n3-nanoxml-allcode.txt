net n3 nanoxml import InputStream input stream import InputStreamReader input stream reader import IOException import import FileInputStream input stream import FileNotFoundException not found import LineNumberReader line number reader import PushbackReader pushback reader import PushbackInputStream pushback input stream import reader import StringReader reader import UnsupportedEncodingException unsupported encoding import net MalformedURLException malformed import net URL import util stack StdXMLReader std xml reader implements IXMLReader xml reader { private StackedReader stacked reader { PushbackReader pushback reader pbReader pb reader LineNumberReader line number reader lineReader line reader URL systemId publicId } private stack readers private StackedReader stacked reader currentReader current reader IXMLReader xml reader stringReader reader { new StdXMLReader std xml reader new StringReader reader } IXMLReader xml reader fileReader reader filename FileNotFoundException not found IOException { StdXMLReader std xml reader = new StdXMLReader std xml reader new FileInputStream input stream filename setSystemID set systemid filename for = 0 < readers size i++ { StackedReader stacked reader sr = StackedReader stacked reader readers elementAt element sr systemId = currentReader current reader systemId } } StdXMLReader std xml reader publicid systemid MalformedURLException malformed FileNotFoundException not found IOException { URL systemIDasURL systemidas = try { systemIDasURL systemidas = new URL systemid } catch MalformedURLException malformed { systemid = + systemid try { systemIDasURL systemidas = new URL systemid } catch MalformedURLException malformed e2 { } } this currentReader current reader = new StackedReader stacked reader this readers = new stack reader reader = this openStream open stream publicid systemIDasURL systemidas toString to this currentReader current reader lineReader line reader = new LineNumberReader line number reader reader this currentReader current reader pbReader pb reader = new PushbackReader pushback reader this currentReader current reader lineReader line reader 2 } StdXMLReader std xml reader reader reader { this currentReader current reader = new StackedReader stacked reader this readers = new stack this currentReader current reader lineReader line reader = new LineNumberReader line number reader reader this currentReader current reader pbReader pb reader = new PushbackReader pushback reader this currentReader current reader lineReader line reader 2 this currentReader current reader publicId = try { this currentReader current reader systemId = new URL } catch MalformedURLException malformed { } } finalize throwable { this currentReader current reader lineReader line reader = this currentReader current reader pbReader pb reader = this currentReader current reader systemId = this currentReader current reader publicId = this currentReader current reader = this readers clear super finalize } getEncoding get encoding { if ! startsWith starts with <?xml { } index = 5 while index < length { StringBuffer buffer key = new StringBuffer buffer while index < length charAt char index <= ' ' { index++ } while index < length charAt char index >= 'a' charAt char index <= 'z' { key append charAt char index index++ } while index < length charAt char index <= ' ' { index++ } if index >= length || charAt char index != '=' { break } while index < length charAt char index != '\'' charAt char index != ' ' { index++ } if index >= length { break } char delimiter = charAt char index index++ index2 = indexOf index of delimiter index if index2 < 0 { break } if key toString to equals encoding { substring index index2 } index = index2 + 1 } } reader stream2reader InputStream input stream stream StringBuffer buffer charsRead chars read IOException { PushbackInputStream pushback input stream pbstream = new PushbackInputStream pushback input stream stream = pbstream read switch { case 0x00 case 0xFE 0x case 0xFF 0x pbstream unread new InputStreamReader input stream reader pbstream UTF 16 case 0xEF 0x for = 0 < 2 i++ { pbstream read } new InputStreamReader input stream reader pbstream UTF 8 case 0x3C 0x3 = pbstream read charsRead chars read append '<' while > 0 != 0x3E 0x3 { charsRead chars read append char = pbstream read } if > 0 { charsRead chars read append char } encoding = this getEncoding get encoding charsRead chars read toString to if encoding == { new InputStreamReader input stream reader pbstream UTF 8 } charsRead chars read setLength set length 0 try { new InputStreamReader input stream reader pbstream encoding } catch UnsupportedEncodingException unsupported encoding { new InputStreamReader input stream reader pbstream UTF 8 } default charsRead chars read append char new InputStreamReader input stream reader pbstream UTF 8 } } StdXMLReader std xml reader InputStream input stream stream IOException { PushbackInputStream pushback input stream pbstream = new PushbackInputStream pushback input stream stream StringBuffer buffer charsRead chars read = new StringBuffer buffer reader reader = this stream2reader stream charsRead chars read this currentReader current reader = new StackedReader stacked reader this readers = new stack this currentReader current reader lineReader line reader = new LineNumberReader line number reader reader this currentReader current reader pbReader pb reader = new PushbackReader pushback reader this currentReader current reader lineReader line reader 2 this currentReader current reader publicId = try { this currentReader current reader systemId = new URL } catch MalformedURLException malformed { } this startNewStream start new stream new StringReader reader charsRead chars read toString to } char read IOException { ch = this currentReader current reader pbReader pb reader read while ch < 0 { if this readers empty { new IOException unexpected EOF } this currentReader current reader pbReader pb reader close this currentReader current reader = StackedReader stacked reader this readers pop ch = this currentReader current reader pbReader pb reader read } char ch } atEOFOfCurrentStream of current stream IOException { ch = this currentReader current reader pbReader pb reader read if ch < 0 { } else { this currentReader current reader pbReader pb reader unread ch } } atEOF IOException { ch = this currentReader current reader pbReader pb reader read while ch < 0 { if this readers empty { } this currentReader current reader pbReader pb reader close this currentReader current reader = StackedReader stacked reader this readers pop ch = this currentReader current reader pbReader pb reader read } this currentReader current reader pbReader pb reader unread ch } unread char ch IOException { this currentReader current reader pbReader pb reader unread ch } reader openStream open stream publicid systemid MalformedURLException malformed FileNotFoundException not found IOException { URL url = new URL this currentReader current reader systemId systemid if url getRef get ref != { ref = url getRef get ref if url getFile get length > 0 { url = new URL url getProtocol get protocol url getHost get host url getPort get port url getFile get url = new URL jar + url + '!' + ref } else { url = StdXMLReader std xml reader getResource get resource ref } } this currentReader current reader publicId = publicid this currentReader current reader systemId = url StringBuffer buffer charsRead chars read = new StringBuffer buffer reader reader = this stream2reader url openStream open stream charsRead chars read if charsRead chars read length == 0 { reader } charsReadStr chars read = charsRead chars read toString to PushbackReader pushback reader pbreader = new PushbackReader pushback reader reader charsReadStr chars read length for = charsReadStr chars read length 1 >= 0 { pbreader unread charsReadStr chars read charAt char } pbreader } startNewStream start new stream reader reader { this startNewStream start new stream reader } startNewStream start new stream reader reader isInternalEntity internal entity { StackedReader stacked reader oldReader old reader = this currentReader current reader this readers push this currentReader current reader this currentReader current reader = new StackedReader stacked reader if isInternalEntity internal entity { this currentReader current reader lineReader line reader = this currentReader current reader pbReader pb reader = new PushbackReader pushback reader reader 2 } else { this currentReader current reader lineReader line reader = new LineNumberReader line number reader reader this currentReader current reader pbReader pb reader = new PushbackReader pushback reader this currentReader current reader lineReader line reader 2 } this currentReader current reader systemId = oldReader old reader systemId this currentReader current reader publicId = oldReader old reader publicId } getStreamLevel get stream level { this readers size } getLineNr get line nr { if this currentReader current reader lineReader line reader == { StackedReader stacked reader sr = StackedReader stacked reader this readers peek if sr lineReader line reader == { 0 } else { sr lineReader line reader getLineNumber get line number + 1 } } this currentReader current reader lineReader line reader getLineNumber get line number + 1 } setSystemID set systemid systemid MalformedURLException malformed { this currentReader current reader systemId = new URL this currentReader current reader systemId systemid } setPublicID set publicid publicid { this currentReader current reader publicId = publicid } getSystemID get systemid { this currentReader current reader systemId toString to } getPublicID get publicid { this currentReader current reader publicId } } 