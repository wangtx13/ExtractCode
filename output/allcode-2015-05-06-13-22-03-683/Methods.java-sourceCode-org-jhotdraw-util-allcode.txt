org jhotdraw util import lang reflect * { private { } methodName NoSuchMethodException no such { try { = getClass get getMethod get methodName new 0 result = new 0 result } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } methodName stringParameter NoSuchMethodException no such { try { = getClass get getMethod get methodName new { } result = new { stringParameter } result } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } invokeStatic clazz methodName NoSuchMethodException no such { try { = clazz getMethod get methodName new 0 result = new 0 result } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } invokeStatic clazz methodName NoSuchMethodException no such { try { invokeStatic forName for clazz methodName } catch ClassNotFoundException not found { new NoSuchMethodException no such +clazz+ not found } } invokeStatic clazz methodName types values NoSuchMethodException no such { try { = clazz getMethod get methodName types result = values result } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } invokeStatic clazz methodName types values NoSuchMethodException no such { try { invokeStatic forName for clazz methodName types values } catch ClassNotFoundException not found { new NoSuchMethodException no such +clazz+ not found } } invokeStatic clazz methodName types values defaultValue default value { try { invokeStatic forName for clazz methodName types values } catch ClassNotFoundException not found { defaultValue default value } catch NoSuchMethodException no such { defaultValue default value } } invokeGetter getter methodName defaultValue default value { try { = getClass get getMethod get methodName new 0 result = new 0 integer result intValue value } catch NoSuchMethodException no such { defaultValue default value } catch IllegalAccessException illegal access { defaultValue default value } catch InvocationTargetException invocation target { defaultValue default value } } long invokeGetter getter methodName long defaultValue default value { try { = getClass get getMethod get methodName new 0 result = new 0 long result longValue long value } catch NoSuchMethodException no such { defaultValue default value } catch IllegalAccessException illegal access { defaultValue default value } catch InvocationTargetException invocation target { defaultValue default value } } invokeGetter getter methodName defaultValue default value { try { = getClass get getMethod get methodName new 0 result = new 0 result booleanValue value } catch NoSuchMethodException no such { defaultValue default value } catch IllegalAccessException illegal access { defaultValue default value } catch InvocationTargetException invocation target { defaultValue default value } } invokeGetter getter methodName defaultValue default value { try { = getClass get getMethod get methodName new 0 result = new 0 result } catch NoSuchMethodException no such { defaultValue default value } catch IllegalAccessException illegal access { defaultValue default value } catch InvocationTargetException invocation target { defaultValue default value } } invokeStaticGetter getter clazz methodName defaultValue default value { try { = clazz getMethod get methodName new 0 result = new 0 result booleanValue value } catch NoSuchMethodException no such { defaultValue default value } catch IllegalAccessException illegal access { defaultValue default value } catch InvocationTargetException invocation target { defaultValue default value } } methodName newValue new value NoSuchMethodException no such { try { = getClass get getMethod get methodName new { TYPE} e} new { new newValue new value } } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } methodName newValue new value NoSuchMethodException no such { try { = getClass get getMethod get methodName new { integer TYPE} e} new { new integer newValue new value } } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } methodName float newValue new value NoSuchMethodException no such { try { = getClass get getMethod get methodName new { float TYPE} e} new { new float newValue new value } } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } methodName clazz newValue new value NoSuchMethodException no such { try { = getClass get getMethod get methodName new { clazz } new { newValue} new value} } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { new InternalError internal getMessage get message } } methodName clazz newValue new value NoSuchMethodException no such { try { = getClass get getMethod get methodName clazz newValue new value } catch IllegalAccessException illegal access { new NoSuchMethodException no such methodName+ name+ not accessible } catch InvocationTargetException invocation target { InternalError internal = new InternalError internal getMessage get message initCause init cause getCause get cause != ? getCause get cause } } invokeIfExists if methodName { try { methodName } catch NoSuchMethodException no such { } } invokeIfExists if methodName float newValue new value { try { methodName newValue new value } catch NoSuchMethodException no such { } } invokeIfExists if methodName newValue new value { try { methodName newValue new value } catch NoSuchMethodException no such { } } invokeIfExists if methodName clazz newValue new value { try { methodName clazz newValue new value } catch NoSuchMethodException no such { } } } 