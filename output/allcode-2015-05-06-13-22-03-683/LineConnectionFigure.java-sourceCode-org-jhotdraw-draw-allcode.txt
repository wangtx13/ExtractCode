org jhotdraw draw import org jhotdraw util * import awt * import awt event * import awt geom * import util * import javax swing undo * import * import org jhotdraw geom * import org jhotdraw xml DOMInput dom input import org jhotdraw xml DOMOutput dom output LineConnectionFigure line connection figure LineFigure line figure implements ConnectionFigure connection figure { private connector startConnector start connector private connector endConnector connector private liner liner private ConnectionHandler connection handler connectionHandler connection handler = new ConnectionHandler connection handler this private ConnectionHandler connection handler implements FigureListener figure listener { private LineConnectionFigure line connection figure owner private ConnectionHandler connection handler LineConnectionFigure line connection figure owner { this owner = owner } figureRequestRemove figure request remove FigureEvent figure event { } figureRemoved figure removed FigureEvent figure event evt { owner fireFigureRequestRemove fire figure request remove } figureChanged figure changed FigureEvent figure event { if getSource get source == owner getStartFigure get start figure || getSource get source == owner getEndFigure get figure { owner willChange will change owner updateConnection update connection owner changed } } figureAdded figure added FigureEvent figure event { } figureAttributeChanged figure attribute changed FigureEvent figure event { } figureAreaInvalidated figure area invalidated FigureEvent figure event { } } LineConnectionFigure line connection figure { } basicTransform basic transform AffineTransform affine transform tx { super basicTransform basic transform tx updateConnection update connection } Collection<Handle> collection< handle> createHandles create handles detailLevel detail level { ArrayList<Handle> list< handle> handles = new ArrayList<Handle> list< handle> getNodeCount get node count switch detailLevel detail level { case 0 if getLiner get liner == { for = 1 = getNodeCount get node count 1 < i++ { handles add new BezierNodeHandle bezier node handle this } } handles add new ChangeConnectionStartHandle change connection start handle this handles add new ChangeConnectionEndHandle change connection handle this break } handles } canConnect can connect { } updateConnection update connection { willChange will change if getStartConnector get start connector != { Point2D point2 start = getStartConnector get start connector findStart find start this if start != { basicSetStartPoint basic set start point start } } if getEndConnector get connector != { Point2D point2 = getEndConnector get connector findEnd find this if != { basicSetEndPoint basic set point } } changed } validate { super validate lineout } canConnect can connect figure start figure { start canConnect can connect canConnect can connect } connectsSame connects same ConnectionFigure connection figure other { other getStartConnector get start connector == getStartConnector get start connector other getEndConnector get connector == getEndConnector get connector } connector getEndConnector get connector { endConnector connector } figure getEndFigure get figure { endConnector connector == ? endConnector connector getOwner get owner } connector getStartConnector get start connector { startConnector start connector } figure getStartFigure get start figure { startConnector start connector == ? startConnector start connector getOwner get owner } setEndConnector set connector connector newEnd new { connector oldEnd old = endConnector connector if newEnd new != oldEnd old { willChange will change basicSetEndConnector basic set connector newEnd new fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { getPresentationName get presentation { verbindung setzen } undo CannotUndoException cannot undo { super undo willChange will change basicSetEndConnector basic set connector oldEnd old changed } redo CannotUndoException cannot undo { super redo willChange will change basicSetEndConnector basic set connector newEnd new changed } } changed } } basicSetEndConnector basic set connector connector newEnd new { if newEnd new != endConnector connector { if endConnector connector != { getEndFigure get figure removeFigureListener remove figure listener connectionHandler connection handler if getStartFigure get start figure != { handleDisconnect handle disconnect getStartFigure get start figure getEndFigure get figure } } endConnector connector = newEnd new if endConnector connector != { getEndFigure get figure addFigureListener add figure listener connectionHandler connection handler if getStartFigure get start figure != getEndFigure get figure != { handleConnect handle connect getStartFigure get start figure getEndFigure get figure updateConnection update connection } } } } setStartConnector set start connector connector newStart new start { connector oldStart old start = startConnector start connector if newStart new start != oldStart old start { willChange will change basicSetStartConnector basic set start connector newStart new start fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { getPresentationName get presentation { start verbindung setzen } undo CannotUndoException cannot undo { super undo willChange will change basicSetStartConnector basic set start connector oldStart old start changed } redo CannotUndoException cannot undo { super redo willChange will change basicSetStartConnector basic set start connector newStart new start changed } } changed } } basicSetStartConnector basic set start connector connector newStart new start { if newStart new start != startConnector start connector { if startConnector start connector != { getStartFigure get start figure removeFigureListener remove figure listener connectionHandler connection handler if getEndFigure get figure != { handleDisconnect handle disconnect getStartFigure get start figure getEndFigure get figure } } startConnector start connector = newStart new start if startConnector start connector != { getStartFigure get start figure addFigureListener add figure listener connectionHandler connection handler if getStartFigure get start figure != getEndFigure get figure != { handleConnect handle connect getStartFigure get start figure getEndFigure get figure updateConnection update connection } } } } addNotify add notify drawing drawing { super addNotify add notify drawing } removeNotify remove notify drawing drawing { super removeNotify remove notify drawing } handleDisconnect handle disconnect figure start figure { } handleConnect handle connect figure start figure { } LineConnectionFigure line connection figure clone { LineConnectionFigure line connection figure that = LineConnectionFigure line connection figure super clone that connectionHandler connection handler = new ConnectionHandler connection handler that if this liner != { that liner = liner this liner clone } if this startConnector start connector != { that startConnector start connector = connector this startConnector start connector clone that getStartFigure get start figure addFigureListener add figure listener that connectionHandler connection handler } if this endConnector connector != { that endConnector connector = connector this endConnector connector clone that getEndFigure get figure addFigureListener add figure listener that connectionHandler connection handler } if that startConnector start connector != that endConnector connector != { that handleConnect handle connect that getStartFigure get start figure that getEndFigure get figure that updateConnection update connection } that } remap map oldToNew old to new { willChange will change super remap oldToNew old to new figure newStartFigure new start figure = figure newEndFigure new figure = if getStartFigure get start figure != { newStartFigure new start figure = figure oldToNew old to new get getStartFigure get start figure if newStartFigure new start figure == newStartFigure new start figure = getStartFigure get start figure } if getEndFigure get figure != { newEndFigure new figure = figure oldToNew old to new get getEndFigure get figure if newEndFigure new figure == newEndFigure new figure = getEndFigure get figure } if newStartFigure new start figure != { setStartConnector set start connector newStartFigure new start figure findCompatibleConnector find compatible connector getStartConnector get start connector } if newEndFigure new figure != { setEndConnector set connector newEndFigure new figure findCompatibleConnector find compatible connector getEndConnector get connector } updateConnection update connection changed } canConnect can connect figure start { start canConnect can connect } handleMouseClick handle mouse click Point2D point2 MouseEvent mouse event evt DrawingView drawing view view { if getLiner get liner == evt getClickCount get click count == 2 { willChange will change index = basicSplitSegment basic split segment float 5f / view getScaleFactor get scale factor if index != 1 { BezierPath bezier path node newNode new node = getNode get node index fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { redo CannotRedoException cannot redo { super redo willChange will change basicAddNode basic add node index newNode new node changed } undo CannotUndoException cannot undo { super undo willChange will change basicRemoveNode basic remove node index changed } } changed } } } readPoints read points DOMInput dom input IOException { super readPoints read points openElement open element startConnector start connector setStartConnector set start connector connector readObject read closeElement close element openElement open element endConnector connector setEndConnector set connector connector readObject read closeElement close element } read DOMInput dom input IOException { readPoints read points readAttributes read attributes readLiner read liner } readLiner read liner DOMInput dom input IOException { if getElementCount get element count liner > 0 { openElement open element liner liner = liner readObject read closeElement close element } } write DOMOutput dom output out IOException { writePoints write points out writeAttributes write attributes out writeLiner write liner out } writeLiner write liner DOMOutput dom output out IOException { if liner != { out openElement open element liner out writeObject write liner out closeElement close element } } writePoints write points DOMOutput dom output out IOException { super writePoints write points out out openElement open element startConnector start connector out writeObject write getStartConnector get start connector out closeElement close element out openElement open element endConnector connector out writeObject write getEndConnector get connector out closeElement close element } setLiner set liner liner newValue new value { willChange will change this liner = newValue new value changed } basicSetNode basic set node index BezierPath bezier path node { if index != 0 index != getPointCount get point count 1 { if getStartConnector get start connector != { Point2D point2 start = getStartConnector get start connector findStart find start this if start != { basicSetStartPoint basic set start point start } } if getEndConnector get connector != { Point2D point2 = getEndConnector get connector findEnd find this if != { basicSetEndPoint basic set point } } } super basicSetNode basic set node index } lineout { if liner != { liner lineout this } } BezierPath bezier path getBezierPath get bezier path { path } liner getLiner get liner { liner } setStartPoint set start point Point2D point2 { setPoint set point 0 } setPoint set point index Point2D point2 { setPoint set point index 0 } setEndPoint set point Point2D point2 { setPoint set point getPointCount get point count 1 } reverseConnection reverse connection { if startConnector start connector != endConnector connector != { handleDisconnect handle disconnect startConnector start connector getOwner get owner endConnector connector getOwner get owner connector tmpC tmp = startConnector start connector startConnector start connector = endConnector connector endConnector connector = tmpC tmp Point2D point2 tmpP tmp = getStartPoint get start point setStartPoint set start point getEndPoint get point setEndPoint set point tmpP tmp handleConnect handle connect startConnector start connector getOwner get owner endConnector connector getOwner get owner updateConnection update connection } } } 