org jhotdraw xml import awt * import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * JavaxDOMOutput javax dom output implements DOMOutput dom output { private doctype private HashMap<Object hash map< string> objectids private HashMap<String hash map< object> prototypes private document document private node current private DOMFactory dom factory factory JavaxDOMOutput javax dom output DOMFactory dom factory factory IOException { this factory = factory try { objectids = new HashMap<Object hash map< string> document = DocumentBuilderFactory document builder factory newInstance new instance newDocumentBuilder new document builder newDocument new document current = document } catch ParserConfigurationException parser configuration { IOException = new IOException getMessage get message initCause init cause } } save OutputStream output stream out IOException { try { if doctype != { OutputStreamWriter output stream writer = new OutputStreamWriter output stream writer out UTF8 f8 write <!DOCTYPE <! write doctype write >\n flush } transformer = TransformerFactory transformer factory newInstance new instance newTransformer new transformer transform new DOMSource dom source document new StreamResult stream result out } catch TransformerException transformer { IOException = new IOException getMessage get message initCause init cause } } save writer out IOException { try { if doctype != { out write <!DOCTYPE <! out write doctype out write >\n } transformer = TransformerFactory transformer factory newInstance new instance newTransformer new transformer transform new DOMSource dom source document new StreamResult stream result out } catch TransformerException transformer { IOException = new IOException getMessage get message initCause init cause } } openElement open element tagName tag { element newElement new element = document createElement create element tagName tag current appendChild append child newElement new element current = newElement new element } closeElement close element { current = current getParentNode get parent node } addComment add comment comment { current appendChild append child document createComment create comment comment } addText add text text { current appendChild append child document createTextNode create text node text } addAttribute add attribute value { if value != { element current setAttribute set attribute value } } addAttribute add attribute value { element current setAttribute set attribute integer toString to value } addAttribute add attribute value { element current setAttribute set attribute toString to value } addAttribute add attribute float value { = float toString to value if endsWith with 0 = substring 0 length 2 element current setAttribute set attribute } addAttribute add attribute value { = toString to value if endsWith with 0 = substring 0 length 2 element current setAttribute set attribute } writeObject write IOException { if == { openElement open element closeElement close element } else if instanceof DOMStorable dom storable { writeStorable write storable DOMStorable dom storable } else if instanceof { openElement open element addText add text closeElement close element } else if instanceof integer { openElement open element addText add text toString to closeElement close element } else if instanceof long { openElement open element long addText add text toString to closeElement close element } else if instanceof { openElement open element addText add text toString to closeElement close element } else if instanceof float { openElement open element float addText add text toString to closeElement close element } else if instanceof { openElement open element addText add text toString to closeElement close element } else if instanceof color { color = color openElement open element color addAttribute add attribute rgba # +Integer + integer toHexString to hex getRGB get closeElement close element } else if instanceof { openElement open element intArray = for i=0 < length i++ { writeObject write new integer } closeElement close element } else if instanceof float { openElement open element floatArray float float = float for i=0 < length i++ { writeObject write new float } closeElement close element } else if instanceof { openElement open element doubleArray = for i=0 < length i++ { writeObject write new } closeElement close element } else if instanceof font { font = font openElement open element font addAttribute add attribute getName get addAttribute add attribute style getStyle get style addAttribute add attribute size getSize get size closeElement close element } else if instanceof enum { openElement open element enum enum = enum addAttribute add attribute type factory getEnumName get enum addText add text factory getEnumValue get enum value closeElement close element } else { new IllegalArgumentException illegal argument unable to store +o+ +o getClass get } } private writeStorable write storable DOMStorable dom storable IOException { tagName tag = factory getName get if tagName tag == new IllegalArgumentException illegal argument no tag for +o openElement open element tagName tag if objectids containsKey contains key { addAttribute add attribute ref objectids get } else { = integer toString to objectids size 16 objectids put addAttribute add attribute write this } closeElement close element } addAttribute add attribute float value float defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if ! value equals defaultValue default value { addAttribute add attribute value } } getPrototype get prototype { if prototypes == { prototypes = new HashMap<String hash map< object> } if ! prototypes containsKey contains key current getNodeName get node { prototypes put current getNodeName get node factory create current getNodeName get node } prototypes get current getNodeName get node } setDoctype set doctype doctype { this doctype = doctype } } 