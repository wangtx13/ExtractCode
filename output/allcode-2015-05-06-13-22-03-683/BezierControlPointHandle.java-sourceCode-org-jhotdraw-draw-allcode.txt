org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * BezierControlPointHandle bezier control point handle AbstractHandle handle { index controlPointIndex control point index private CompositeEdit composite edit edit BezierControlPointHandle bezier control point handle BezierFigure bezier figure owner index coord { super owner this index = index this controlPointIndex control point index = coord } BezierFigure bezier figure getBezierFigure get bezier figure { BezierFigure bezier figure getOwner get owner } point getLocation get location { getBezierFigure get bezier figure getPointCount get point count > index ? view drawingToView drawing to view getBezierFigure get bezier figure getPoint get point index controlPointIndex control point index new point 10 10 } draw Graphics2D graphics2 { BezierFigure bezier figure = getBezierFigure get bezier figure if getPointCount get point count > index { BezierPath bezier path node = getNode get node index if keepColinear keep colinear mask == BezierPath bezier path C1C2_MASK index > 0 index < getNodeCount get node count || isClosed closed { drawCircle draw circle color white color blue } else { drawCircle draw circle color blue color white } setColor set color color blue draw new Line2D line2 view drawingToView drawing to view new Point2D point2 0 0 view drawingToView drawing to view new Point2D point2 controlPointIndex control point index controlPointIndex control point index } } rectangle basicGetBounds basic get bounds { rectangle = new rectangle getLocation get location grow getHandlesize get handlesize / 2 getHandlesize get handlesize / 2 } trackStart track start point anchor modifiersEx modifiers { view getDrawing get drawing fireUndoableEditHappened fire undoable edit happened edit = new CompositeEdit composite edit punkt verschieben Point2D point2 location = view getConstrainer get constrainer constrainPoint constrain point view viewToDrawing view to drawing getLocation get location Point2D point2 = view getConstrainer get constrainer constrainPoint constrain point view viewToDrawing view to drawing anchor } trackStep track step point anchor point modifiersEx modifiers { BezierFigure bezier figure figure = getBezierFigure get bezier figure Point2D point2 = view getConstrainer get constrainer constrainPoint constrain point view viewToDrawing view to drawing BezierPath bezier path node = figure getNode get node index fireAreaInvalidated fire area invalidated figure willChange will change if ! keepColinear keep colinear { figure basicSetPoint basic set point index controlPointIndex control point index } else { = math PI + math atan2 0 0 c2 = controlPointIndex control point index == 1 ? 2 1 = math sqrt c2 0 * c2 0 + c2 0 * c2 0 sina = math sin cosa = math cos Point2D point2 p2 = new Point2D point2 * cosa + 0 * sina + 0 figure basicSetPoint basic set point index controlPointIndex control point index figure basicSetPoint basic set point index c2 p2 } figure changed fireAreaInvalidated fire area invalidated figure getNode get node index } private fireAreaInvalidated fire area invalidated BezierPath bezier path node { Rectangle2D rectangle2 dr = new Rectangle2D rectangle2 0 0 0 0 for i=1 < 3 i++ { dr add } rectangle vr = view drawingToView drawing to view dr vr grow getHandlesize get handlesize getHandlesize get handlesize fireAreaInvalidated fire area invalidated vr } trackEnd track point anchor point modifiersEx modifiers { BezierFigure bezier figure figure = getBezierFigure get bezier figure if modifiersEx modifiers InputEvent input event META_DOWN_MASK | InputEvent input event CTRL_DOWN_MASK != 0 { figure willChange will change BezierPath bezier path node = figure getNode get node index keepColinear keep colinear = ! keepColinear keep colinear if keepColinear keep colinear { Point2D point2 = figure getPoint get point index controlPointIndex control point index = math PI + math atan2 0 0 c2 = controlPointIndex control point index == 1 ? 2 1 = math sqrt c2 0 * c2 0 + c2 0 * c2 0 sina = math sin cosa = math cos Point2D point2 p2 = new Point2D point2 * cosa + 0 * sina + 0 c2 = p2 c2 = p2 } figure setNode set node index figure changed } view getDrawing get drawing fireUndoableEditHappened fire undoable edit happened edit } isCombinableWith combinable with handle { if super isCombinableWith combinable with { BezierControlPointHandle bezier control point handle that = BezierControlPointHandle bezier control point handle that index == this index that controlPointIndex control point index == this controlPointIndex control point index that getBezierFigure get bezier figure getNodeCount get node count == this getBezierFigure get bezier figure getNodeCount get node count } } } 