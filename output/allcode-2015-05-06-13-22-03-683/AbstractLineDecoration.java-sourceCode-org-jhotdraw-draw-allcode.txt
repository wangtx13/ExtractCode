org jhotdraw draw import * import awt * import awt geom * import org jhotdraw geom geom import org jhotdraw util * import org jhotdraw draw AttributeKeys attribute keys * AbstractLineDecoration line decoration implements LineDecoration line decoration { private isFilled filled private isStroked stroked private isSolid solid AbstractLineDecoration line decoration isFilled filled isStroked stroked isSolid solid { this isFilled filled = isFilled filled this isStroked stroked = isStroked stroked this isSolid solid = isSolid solid } isFilled filled { isFilled filled } isStroked stroked { isStroked stroked } isSolid solid { isSolid solid } draw Graphics2D graphics2 figure Point2D point2 p1 Point2D point2 p2 { GeneralPath general path path = getTransformedDecoratorPath get transformed decorator path p1 p2 color color if isFilled filled { if isSolid solid { color = STROKE_COLOR get } else { color = FILL_COLOR get } if color != { setColor set color color fill path } } if isStroked stroked { color = STROKE_COLOR get if color != { setColor set color color setStroke set stroke AttributeKeys attribute keys getStroke get stroke draw path } } } Rectangle2D rectangle2 getDrawBounds get draw bounds figure Point2D point2 p1 Point2D point2 p2 { GeneralPath general path path = getTransformedDecoratorPath get transformed decorator path p1 p2 Rectangle2D rectangle2 = path getBounds2D get bounds2 Rectangle2D rectangle2 bounds = new Rectangle2D rectangle2 getX get getY get getWidth get width getHeight get height if isStroked stroked { strokeWidth stroke width = STROKE_WIDTH get strokeJoin stroke join = STROKE_JOIN get float miterLimit miter limit = float STROKE_MITER_LIMIT_FACTOR get * strokeWidth stroke width grow if strokeJoin stroke join == BasicStroke basic stroke JOIN_MITER { grow = 1 + strokeWidth stroke width / 2 * miterLimit miter limit } else { grow = 1 + strokeWidth stroke width / 2 } geom grow bounds grow grow } bounds } getDecorationRadius get decoration radius figure { strokeWidth stroke width = STROKE_WIDTH get scaleFactor scale factor if strokeWidth stroke width > 1f { scaleFactor scale factor = 1d + strokeWidth stroke width 1d / 2d } else { scaleFactor scale factor = 1d } getDecoratorPathRadius get decorator path radius * scaleFactor scale factor } private GeneralPath general path getTransformedDecoratorPath get transformed decorator path figure Point2D point2 p1 Point2D point2 p2 { GeneralPath general path path = getDecoratorPath get decorator path strokeWidth stroke width = STROKE_WIDTH get AffineTransform affine transform transform = new AffineTransform affine transform transform translate p1 p1 transform rotate math atan2 p1 p2 p2 p1 if strokeWidth stroke width > 1f { transform scale 1d + strokeWidth stroke width 1d / 2d 1d + strokeWidth stroke width 1d / 2d } path transform transform path } setFilled set filled { isFilled filled = } setStroked set stroked { isStroked stroked = } setSolid set solid { isSolid solid = } GeneralPath general path getDecoratorPath get decorator path figure getDecoratorPathRadius get decorator path radius figure } 