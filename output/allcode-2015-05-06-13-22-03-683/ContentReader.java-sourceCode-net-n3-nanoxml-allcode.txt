net n3 nanoxml import reader import IOException ContentReader content reader reader { private IXMLReader xml reader reader private buffer private bufferIndex buffer index private IXMLEntityResolver xml entity resolver resolver ContentReader content reader IXMLReader xml reader reader IXMLEntityResolver xml entity resolver resolver buffer { this reader = reader this resolver = resolver this buffer = buffer this bufferIndex buffer index = 0 } finalize throwable { this reader = this resolver = this buffer = super finalize } read char outputBuffer output buffer offset size IOException { try { charsRead chars read = 0 bufferLength buffer length = this buffer length if offset + size > outputBuffer output buffer length { size = outputBuffer output buffer length offset } while charsRead chars read < size { = char ch if this bufferIndex buffer index >= bufferLength buffer length { = XMLUtil xml util read this reader ' ' ch = charAt char 0 } else { ch = this buffer charAt char this bufferIndex buffer index this bufferIndex++ buffer index++ outputBuffer output buffer charsRead chars read = ch charsRead++ chars read++ continue } if ch == '<' { this reader unread ch break } if ch == ' ' length > 1 { if charAt char 1 == '#' { ch = XMLUtil xml util processCharLiteral process char literal } else { XMLUtil xml util processEntity process entity this reader this resolver continue } } outputBuffer output buffer charsRead chars read = ch charsRead++ chars read++ } if charsRead chars read == 0 { charsRead chars read = 1 } charsRead chars read } catch XMLParseException xml parse { new IOException getMessage get message } } close IOException { try { bufferLength buffer length = this buffer length for { = char ch if this bufferIndex buffer index >= bufferLength buffer length { = XMLUtil xml util read this reader ' ' ch = charAt char 0 } else { ch = this buffer charAt char this bufferIndex buffer index this bufferIndex++ buffer index++ continue } if ch == '<' { this reader unread ch break } if ch == ' ' length > 1 { if charAt char 1 != '#' { XMLUtil xml util processEntity process entity this reader this resolver } } } } catch XMLParseException xml parse { new IOException getMessage get message } } } 