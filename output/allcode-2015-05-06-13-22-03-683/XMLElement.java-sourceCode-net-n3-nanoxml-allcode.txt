net n3 nanoxml import serializable import util * XMLElement xml element implements IXMLElement xml element serializable { long serialVersionUID serial uid = 2383376380548624920L 2383376380548624920 NO_LINE = 1 private IXMLElement xml element parent private ArrayList list attributes private ArrayList list children private private fullName full private namespace private content private systemid private lineNr line nr XMLElement xml element { this NO_LINE } XMLElement xml element fullName full { this fullName full NO_LINE } XMLElement xml element fullName full systemid lineNr line nr { this fullName full systemid lineNr line nr } XMLElement xml element fullName full namespace { this fullName full namespace NO_LINE } XMLElement xml element fullName full namespace systemid lineNr line nr { this attributes = new ArrayList list this children = new ArrayList list 8 this fullName full = fullName full if namespace == { this = fullName full } else { index = fullName full indexOf index of ' ' if index >= 0 { this = fullName full substring index + 1 } else { this = fullName full } } this namespace = namespace this content = this lineNr line nr = lineNr line nr this systemid = systemid this parent = } IXMLElement xml element createPCDataElement create data element { new XMLElement xml element } IXMLElement xml element createElement create element fullName full { new XMLElement xml element fullName full } IXMLElement xml element createElement create element fullName full systemid lineNr line nr { new XMLElement xml element fullName full systemid lineNr line nr } IXMLElement xml element createElement create element fullName full namespace { new XMLElement xml element fullName full namespace } IXMLElement xml element createElement create element fullName full namespace systemid lineNr line nr { new XMLElement xml element fullName full namespace systemid lineNr line nr } finalize throwable { this attributes clear this attributes = this children = this fullName full = this = this namespace = this content = this systemid = this parent = super finalize } IXMLElement xml element getParent get parent { this parent } getFullName get full { this fullName full } getName get { this } getNamespace get namespace { this namespace } setName set { this = this fullName full = this namespace = } setName set fullName full namespace { index = fullName full indexOf index of ' ' if namespace == || index < 0 { this = fullName full } else { this = fullName full substring index + 1 } this fullName full = fullName full this namespace = namespace } addChild add child IXMLElement xml element child { if child == { new IllegalArgumentException illegal argument child must not be } if child getName get == ! this children isEmpty empty { IXMLElement xml element lastChild last child = IXMLElement xml element this children get this children size 1 if lastChild last child getName get == { lastChild last child setContent set content lastChild last child getContent get content + child getContent get content } } XMLElement xml element child parent = this this children add child } insertChild insert child IXMLElement xml element child index { if child == { new IllegalArgumentException illegal argument child must not be } if child getName get == ! this children isEmpty empty { IXMLElement xml element lastChild last child = IXMLElement xml element this children get this children size 1 if lastChild last child getName get == { lastChild last child setContent set content lastChild last child getContent get content + child getContent get content } } XMLElement xml element child parent = this this children add index child } removeChild remove child IXMLElement xml element child { if child == { new IllegalArgumentException illegal argument child must not be } this children remove child } removeChildAtIndex remove child index index { this children remove index } iterator iterateChildren iterate children { this children iterator } isLeaf leaf { this children isEmpty empty } hasChildren has children { ! this children isEmpty empty } getChildrenCount get children count { this children size } ArrayList list getChildren get children { this children } IXMLElement xml element getChildAtIndex get child index index ArrayIndexOutOfBoundsException index out of bounds { IXMLElement xml element this children get index } IXMLElement xml element getFirstChildNamed get first child named { iterator enm = this children iterator while enm hasNext has next { IXMLElement xml element child = IXMLElement xml element enm next childName child = child getFullName get full if childName child != childName child equals { child } } } IXMLElement xml element getFirstChildNamed get first child named namespace { iterator enm = this children iterator while enm hasNext has next { IXMLElement xml element child = IXMLElement xml element enm next = child getName get found = != equals = child getNamespace get namespace if == { found = == } else { found = equals namespace } if found { child } } } ArrayList list getChildrenNamed get children named { ArrayList list result = new ArrayList list this children size iterator enm = this children iterator while enm hasNext has next { IXMLElement xml element child = IXMLElement xml element enm next childName child = child getFullName get full if childName child != childName child equals { result add child } } result } ArrayList list getChildrenNamed get children named namespace { ArrayList list result = new ArrayList list this children size iterator enm = this children iterator while enm hasNext has next { IXMLElement xml element child = IXMLElement xml element enm next = child getName get found = != equals = child getNamespace get namespace if == { found = == } else { found = equals namespace } if found { result add child } } result } private XMLAttribute xml attribute findAttribute find attribute fullName full { iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next if attr getFullName get full equals fullName full { attr } } } private XMLAttribute xml attribute findAttribute find attribute namespace { iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next found = attr getName get equals if namespace == { found = attr getNamespace get namespace == } else { found = namespace equals attr getNamespace get namespace } if found { attr } } } getAttributeCount get attribute count { this attributes size } getAttribute get attribute { this getAttribute get attribute } getAttribute get attribute defaultValue default value { XMLAttribute xml attribute attr = this findAttribute find attribute if attr == { defaultValue default value } else { attr getValue get value } } getAttribute get attribute namespace defaultValue default value { XMLAttribute xml attribute attr = this findAttribute find attribute namespace if attr == { defaultValue default value } else { attr getValue get value } } getAttribute get attribute defaultValue default value { value = this getAttribute get attribute integer toString to defaultValue default value integer parseInt parse value } getAttribute get attribute namespace defaultValue default value { value = this getAttribute get attribute namespace integer toString to defaultValue default value integer parseInt parse value } getAttributeType get attribute type { XMLAttribute xml attribute attr = this findAttribute find attribute if attr == { } else { attr getType get type } } getAttributeNamespace get attribute namespace { XMLAttribute xml attribute attr = this findAttribute find attribute if attr == { } else { attr getNamespace get namespace } } getAttributeType get attribute type namespace { XMLAttribute xml attribute attr = this findAttribute find attribute namespace if attr == { } else { attr getType get type } } setAttribute set attribute value { XMLAttribute xml attribute attr = this findAttribute find attribute if attr == { attr = new XMLAttribute xml attribute value CDATA this attributes add attr } else { attr setValue set value value } } setAttribute set attribute fullName full namespace value { index = fullName full indexOf index of ' ' = fullName full substring index + 1 XMLAttribute xml attribute attr = this findAttribute find attribute namespace if attr == { attr = new XMLAttribute xml attribute fullName full namespace value CDATA this attributes add attr } else { attr setValue set value value } } removeAttribute remove attribute { for = 0 < this attributes size i++ { XMLAttribute xml attribute attr = XMLAttribute xml attribute this attributes get if attr getFullName get full equals { this attributes remove } } } removeAttribute remove attribute namespace { for = 0 < this attributes size i++ { XMLAttribute xml attribute attr = XMLAttribute xml attribute this attributes get found = attr getName get equals if namespace == { found = attr getNamespace get namespace == } else { found = attr getNamespace get namespace equals namespace } if found { this attributes remove } } } iterator iterateAttributeNames iterate attribute names { ArrayList list result = new ArrayList list iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next result add attr getFullName get full } result iterator } hasAttribute has attribute { this findAttribute find attribute != } hasAttribute has attribute namespace { this findAttribute find attribute namespace != } properties getAttributes get attributes { properties result = new properties iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next result put attr getFullName get full attr getValue get value } result } properties getAttributesInNamespace get attributes namespace namespace { properties result = new properties iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next if namespace == { if attr getNamespace get namespace == { result put attr getName get attr getValue get value } } else { if namespace equals attr getNamespace get namespace { result put attr getName get attr getValue get value } } } result } getSystemID get systemid { this systemid } getLineNr get line nr { this lineNr line nr } getContent get content { this content } setContent set content content { this content = content } equals rawElement raw element { try { this equalsXMLElement equals xml element IXMLElement xml element rawElement raw element } catch ClassCastException cast { } } equalsXMLElement equals xml element IXMLElement xml element elt { if ! this equals elt getName get { } if this attributes size != elt getAttributeCount get attribute count { } iterator enm = this attributes iterator while enm hasNext has next { XMLAttribute xml attribute attr = XMLAttribute xml attribute enm next if ! elt hasAttribute has attribute attr getName get attr getNamespace get namespace { } value = elt getAttribute get attribute attr getName get attr getNamespace get namespace if ! attr getValue get value equals value { } type = elt getAttributeType get attribute type attr getName get attr getNamespace get namespace if ! attr getType get type equals type { } } if this children size != elt getChildrenCount get children count { } for = 0 < this children size i++ { IXMLElement xml element child1 = this getChildAtIndex get child index IXMLElement xml element child2 = elt getChildAtIndex get child index if ! child1 equalsXMLElement equals xml element child2 { } } } } 