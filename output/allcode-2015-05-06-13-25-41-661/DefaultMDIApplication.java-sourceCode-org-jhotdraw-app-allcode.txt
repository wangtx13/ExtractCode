org jhotdraw app import org jhotdraw gui * import org jhotdraw util * import org jhotdraw util prefs * import awt * import awt event * import beans * import * import util * import util prefs * import javax swing * import javax swing event * import org jhotdraw app action * default application application { private frame parent frame private scroll pane scroll pane private didesktop pane desktop pane private preferences prefs private project current project private linked list< action> tool bar actions default application { } init application actions { application model mo = get model mo put action about action new about action this mo put action exit action new exit action this mo put action drop dock action new drop dock action this mo put action new action new new action this mo put action open action new open action this mo put action clear recent files action new clear recent files action this mo put action save action new save action this mo put action save action new save action this mo put action close action new close action this mo put action undo action new undo action this mo put action redo action new redo action this mo put action cut action new cut action mo put action copy action new copy action mo put action paste action new paste action mo put action delete action new delete action mo put action duplicate action new duplicate action mo put action select all action new select all action mo put action arrange action VERTICAL_ID new arrange action desktop pane arrangeable arrangement mo put action arrange action HORIZONTAL_ID new arrange action desktop pane arrangeable arrangement z mo put action arrange action CASCADE_ID new arrange action desktop pane arrangeable arrangement } init project actions project { put action focus action new focus action } launch args { set property apple awt graphics use quartz super launch args } init { super init prefs = preferences user node for get model == ? get get model get init look and feel init labels parent frame = new frame get parent frame set default close operation frame DO_NOTHING_ON_CLOSE desktop pane = new didesktop pane scroll pane = new scroll pane scroll pane set viewport view desktop pane tool bar actions = new linked list< action> init application actions parent frame get content pane add wrap desktop pane scroll pane tool bar actions parent frame add window listener new window adapter { window closing window event evt { get model get action exit action action performed new action event parent frame action event ACTION_PERFORMED window closing } } parent frame set menu bar create menu bar preferences util install frame prefs handler prefs parent frame parent frame parent frame set visible } init look and feel { if set property apple laf use screen menu bar set property com apple macos use screen menu bar set property apple awt graphics use quartz try { laf = manager get look and feel manager set look and feel laf } catch { stack trace } if manager get option pane css == { manager put option pane css } } show project { if ! showing { set showing = get internal frame = new internal frame title if == { title = labels get unnamed } else { title = get } set title labels get formatted internal frame title title get get multiple open set default close operation internal frame DO_NOTHING_ON_CLOSE set closable set maximizable set resizable set iconifiable preferences util install internal frame prefs handler prefs project desktop pane point = get location moved { moved = for iterator i=projects iterator has next { project project = project next if project != project showing swing utilities get root pane project get component get parent get location equals { += 22 += 22 moved = break } } } while moved set location add internal frame listener new internal frame adapter { @ internal frame closing internal frame event evt { set current project get model get action close action action performed new action event action event ACTION_PERFORMED window closing } } add property change listener new property change listener { property change property change event evt { = evt get property if equals has unsaved changes { internal frame get root pane get parent put client property window modified new has unsaved changes } else if equals { set title get == ? unnamed get get } } } add property change listener new property change listener { property change property change event evt { = evt get property if equals selected { if evt get new value equals { set current project } } } } get content pane add get component set visible desktop pane add to front try { set selected } catch property veto { } get component request focus window } } hide project { if showing { internal frame = internal frame swing utilities get root pane get component get parent set visible remove get component desktop pane remove dispose } } project get current project { current project } set current project project new value { project old value = current project current project = new value fire property change current project old value new value } sharing tools among projects { } component get component { parent frame } component wrap desktop pane component linked list< action> tool bar actions { if get model != { id=0 for tool bar tb new reversed list< tool bar> get model create tool bars this { id++ panel panel = new panel new border layout panel add tb border layout panel add border layout = panel preferences util install tool bar prefs handler prefs toolbar +id tb tool bar actions add first new toggle tool bar action tb tb get } tool bar tb = new tool bar tb set labels get standard tool bar title add standard actions to tb id++ panel panel = new panel new border layout panel add tb border layout panel add border layout = panel preferences util install tool bar prefs handler prefs toolbar +id tb tool bar actions add first new toggle tool bar action tb tb get panel put client property tool bar actions tool bar actions } } add standard actions to tool bar tb { button application model mo = get model = tb add mo get action new action set focusable = tb add mo get action open action set focusable = tb add mo get action save action tb add separator = tb add mo get action undo action set focusable = tb add mo get action redo action set focusable tb add separator = tb add mo get action cut action set focusable = tb add mo get action copy action set focusable = tb add mo get action paste action set focusable } menu bar create menu bar { resource bundle util labels = resource bundle util get bundle org jhotdraw app labels application model mo = get model menu bar mb = new menu bar menu menu item mi menu open recent menu = new menu labels configure menu add mo get action new action add mo get action open action open recent menu = new menu labels configure menu open recent menu open recent open recent menu add mo get action clear recent files action update open recent menu open recent menu add open recent menu add separator add mo get action close action add mo get action save action add mo get action save action if mo get action export action != { mi = add mo get action export action } add separator add mo get action exit action mb add = new menu labels configure menu edit add mo get action undo action add mo get action redo action add separator add mo get action cut action add mo get action copy action add mo get action paste action add mo get action duplicate action add mo get action delete action add separator add mo get action select all action mb add for menu mm mo create menus this { mb add mm } = new menu menu window menu = labels configure menu window add mo get action arrange action CASCADE_ID add mo get action arrange action VERTICAL_ID add mo get action arrange action HORIZONTAL_ID add separator for project projects { if get action focus action != { window menu add get action focus action } } if tool bar actions size > 0 { add separator for action tool bar actions { check box menu item cbmi = new check box menu item actions configure check box menu item cbmi add cbmi } } mb add = new menu labels configure menu labels get help add mo get action about action mb add add property change listener new property change listener { property change property change event evt { = evt get property application model mo = get model if == project count { menu = window menu remove all add mo get action arrange action CASCADE_ID add mo get action arrange action VERTICAL_ID add mo get action arrange action HORIZONTAL_ID add separator for iterator i=projects iterator has next { project = project next if get action focus action != { add get action focus action } } if tool bar actions size > 0 { add separator for action tool bar actions { check box menu item cbmi = new check box menu item actions configure check box menu item cbmi add cbmi } } } else if == recent files { update open recent menu open recent menu } } } mb } private update open recent menu menu open recent menu { if open recent menu get item count > 0 { menu item clear recent files item = menu item open recent menu get item open recent menu get item count 1 open recent menu remove all for recent files { open recent menu add new open recent action default application this } if recent files size > 0 { open recent menu add separator } open recent menu add clear recent files item } } } 