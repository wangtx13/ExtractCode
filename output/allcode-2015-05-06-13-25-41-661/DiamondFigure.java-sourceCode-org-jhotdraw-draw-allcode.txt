org jhotdraw draw import awt * import awt geom * import * import util * import org jhotdraw draw attribute keys * import org jhotdraw geom geom import org omg diamond figure attributed figure { attribute key< boolean> IS_QUADRATIC = new attribute key< boolean> quadratic private rectangle2 rectangle diamond figure { this 0 0 0 0 } diamond figure width height { rectangle = new rectangle2 width height } draw fill graphics2 { rectangle2 = rectangle2 rectangle clone if quadratic { side = math max width height = side width / 2 = side height / 2 width = height = side } grow = attribute keys get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line length = math sqrt * + * scale = grow / line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } general path diamond = new general path diamond move to float + width / 2 float diamond line to float + width float + height / 2 diamond line to float + width / 2 float + height diamond line to float float + height / 2 diamond close path fill diamond } draw stroke graphics2 { rectangle2 = rectangle2 rectangle clone if quadratic { side = math max width height = side width / 2 = side height / 2 width = height = side } grow = attribute keys get perpendicular draw growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line length = math sqrt * + * scale = grow / line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } general path diamond = new general path diamond move to float + width / 2 float diamond line to float + width float + height / 2 diamond line to float + width / 2 float + height diamond line to float float + height / 2 diamond close path draw diamond } rectangle2 get bounds { rectangle2 bounds = rectangle2 rectangle clone bounds } rectangle2 get figure draw bounds { rectangle2 = rectangle2 rectangle clone if quadratic { side = math max width height = side width / 2 = side height / 2 width = height = side } grow = attribute keys get perpendicular hit growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line length = math sqrt * + * scale = grow / line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } } contains point2 { rectangle2 = rectangle2 rectangle clone if quadratic { side = math max width height = side width / 2 = side height / 2 width = height = side } grow = attribute keys get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line length = math sqrt * + * scale = grow / line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } general path diamond = new general path diamond move to float + width / 2 float diamond line to float + width float + height / 2 diamond line to float + width / 2 float + height diamond line to float float + height / 2 diamond close path diamond contains } basic set bounds point2 anchor point2 { rectangle = math min anchor rectangle = math min anchor rectangle width = math max 0 1 math anchor rectangle height = math max 0 1 math anchor } basic transform affine transform tx { point2 anchor = get start point point2 = get point basic set bounds point2 tx transform anchor anchor point2 tx transform } restore to geometry { rectangle2 = rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } get restore data { rectangle clone } quadratic { = get attribute IS_QUADRATIC == ? value } set quadratic new value { set attribute IS_QUADRATIC new value } connector find connector point2 connection figure prototype { new chop diamond connector this } connector find compatible connector connector start { new chop diamond connector this } diamond figure clone { diamond figure that = diamond figure super clone that rectangle = rectangle2 this rectangle clone that } } 