net n3 nanoxml import input stream import input stream reader import import import input stream import not found import line number reader import pushback reader import pushback input stream import reader import reader import unsupported encoding import net malformed import net import util stack std xml reader implements xml reader { private stacked reader { pushback reader pb reader line number reader line reader } private stack readers private stacked reader current reader xml reader reader { new std xml reader new reader } xml reader reader filename not found { std xml reader = new std xml reader new input stream filename set systemid filename for = 0 < readers size i++ { stacked reader sr = stacked reader readers element sr = current reader } } std xml reader publicid systemid malformed not found { systemidas = try { systemidas = new systemid } catch malformed { systemid = + systemid try { systemidas = new systemid } catch malformed e2 { } } this current reader = new stacked reader this readers = new stack reader reader = this open stream publicid systemidas to this current reader line reader = new line number reader reader this current reader pb reader = new pushback reader this current reader line reader 2 } std xml reader reader reader { this current reader = new stacked reader this readers = new stack this current reader line reader = new line number reader reader this current reader pb reader = new pushback reader this current reader line reader 2 this current reader = try { this current reader = new } catch malformed { } } finalize throwable { this current reader line reader = this current reader pb reader = this current reader = this current reader = this current reader = this readers clear super finalize } get encoding { if ! starts with <?xml { } index = 5 while index < length { buffer key = new buffer while index < length char index <= ' ' { index++ } while index < length char index >= 'a' char index <= 'z' { key append char index index++ } while index < length char index <= ' ' { index++ } if index >= length || char index != '=' { break } while index < length char index != '\'' char index != ' ' { index++ } if index >= length { break } char delimiter = char index index++ index2 = index of delimiter index if index2 < 0 { break } if key to equals encoding { substring index index2 } index = index2 + 1 } } reader stream2reader input stream stream buffer chars read { pushback input stream pbstream = new pushback input stream stream = pbstream read switch { case 0x00 case 0x case 0x pbstream unread new input stream reader pbstream 16 case 0x for = 0 < 2 i++ { pbstream read } new input stream reader pbstream 8 case 0x3 = pbstream read chars read append '<' while > 0 != 0x3 { chars read append char = pbstream read } if > 0 { chars read append char } encoding = this get encoding chars read to if encoding == { new input stream reader pbstream 8 } chars read set length 0 try { new input stream reader pbstream encoding } catch unsupported encoding { new input stream reader pbstream 8 } default chars read append char new input stream reader pbstream 8 } } std xml reader input stream stream { pushback input stream pbstream = new pushback input stream stream buffer chars read = new buffer reader reader = this stream2reader stream chars read this current reader = new stacked reader this readers = new stack this current reader line reader = new line number reader reader this current reader pb reader = new pushback reader this current reader line reader 2 this current reader = try { this current reader = new } catch malformed { } this start new stream new reader chars read to } char read { ch = this current reader pb reader read while ch < 0 { if this readers empty { new unexpected } this current reader pb reader close this current reader = stacked reader this readers pop ch = this current reader pb reader read } char ch } of current stream { ch = this current reader pb reader read if ch < 0 { } else { this current reader pb reader unread ch } } { ch = this current reader pb reader read while ch < 0 { if this readers empty { } this current reader pb reader close this current reader = stacked reader this readers pop ch = this current reader pb reader read } this current reader pb reader unread ch } unread char ch { this current reader pb reader unread ch } reader open stream publicid systemid malformed not found { url = new this current reader systemid if url get ref != { ref = url get ref if url get length > 0 { url = new url get protocol url get host url get port url get url = new jar + url + '!' + ref } else { url = std xml reader get resource ref } } this current reader = publicid this current reader = url buffer chars read = new buffer reader reader = this stream2reader url open stream chars read if chars read length == 0 { reader } chars read = chars read to pushback reader pbreader = new pushback reader reader chars read length for = chars read length 1 >= 0 { pbreader unread chars read char } pbreader } start new stream reader reader { this start new stream reader } start new stream reader reader internal entity { stacked reader old reader = this current reader this readers push this current reader this current reader = new stacked reader if internal entity { this current reader line reader = this current reader pb reader = new pushback reader reader 2 } else { this current reader line reader = new line number reader reader this current reader pb reader = new pushback reader this current reader line reader 2 } this current reader = old reader this current reader = old reader } get stream level { this readers size } get line nr { if this current reader line reader == { stacked reader sr = stacked reader this readers peek if sr line reader == { 0 } else { sr line reader get line number + 1 } } this current reader line reader get line number + 1 } set systemid systemid malformed { this current reader = new this current reader systemid } set publicid publicid { this current reader = publicid } get systemid { this current reader to } get publicid { this current reader } } 