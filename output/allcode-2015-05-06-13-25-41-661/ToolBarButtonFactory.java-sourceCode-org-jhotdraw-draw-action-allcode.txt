org jhotdraw draw action import org jhotdraw util * import awt * import awt event * import beans * import text * import util * import javax swing * import javax swing text * import org jhotdraw app action * import org jhotdraw draw attribute keys * import org jhotdraw geom * import org jhotdraw draw * tool bar button factory { map< color> DEFAULT_COLORS { linked hash map< color> = new linked hash map< color> put cayenne new color 128 0 0 put asparagus new color 128 128 0 put clover new color 0 128 0 put teal new color 0 128 128 put midnight new color 0 0 128 put plum new color 128 0 128 put tin new color 127 127 127 put nickel new color 128 128 128 put maraschino new color 255 0 0 put lemon new color 255 255 0 put spring new color 0 255 0 put turquoise new color 0 255 255 put blueberry new color 0 0 255 put magenta new color 255 0 255 put steel new color 102 102 102 put aluminium new color 153 153 153 put salmon new color 255 102 102 put banana new color 255 255 102 put flora new color 102 255 102 put ice new color 102 255 255 put orchid new color 102 102 255 put bubblegum new color 255 102 255 put iron new color 76 76 76 put magnesium new color 179 179 179 put mocha new color 128 64 0 put fern new color 64 128 0 put moss new color 0 128 64 put ocean new color 0 64 128 put eggplant new color 64 0 128 put maroon new color 128 0 64 put tungsten new color 51 51 51 put silver new color 204 204 204 put tangerine new color 255 128 0 put lime new color 128 255 0 put sea foam new color 0 255 128 put aqua new color 0 128 255 put grape new color 128 0 255 put strawberry new color 255 0 128 put new color 25 25 25 put mercury new color 230 230 230 put cantaloupe new color 255 204 102 put honeydew new color 204 255 102 put spindrift new color 102 255 204 put sky new color 102 204 255 put lavender new color 204 102 255 put carnation new color 255 111 207 put licorice new color 0 0 0 put snow new color 255 255 255 put transparent DEFAULT_COLORS = collections unmodifiable map } private tool button listener implements item listener { private tool tool private drawing editor editor tool button listener tool drawing editor editor { this tool = this editor = editor } item state changed item event evt { if evt get state change == item event { editor set tool tool } } } private tool bar button factory { } collection< action> create drawing actions drawing editor editor { linked list< action> = new linked list< action> add new cut action add new copy action add new paste action add new select all action add new select same action editor } collection< action> create selection actions drawing editor editor { linked list< action> = new linked list< action> add new duplicate action add add new group action editor add new ungroup action editor add add new move to front action editor add new move to back action editor } add selection tool to tool bar tb drawing editor editor { add selection tool to tb editor create drawing actions editor create selection actions editor } add selection tool to tool bar tb drawing editor editor collection< action> drawing actions collection< action> selection actions { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels toggle button tool tool hash map< object> attributes button group group if tb get client property tool button group instanceof button group { group = button group tb get client property tool button group } else { group = new button group tb put client property tool button group group } tool selection tool = new delegation selection tool drawing actions selection actions editor set tool selection tool = new toggle button toggle button default tool button = tool listener tool handler if tb get client property tool handler instanceof tool listener { tool handler = tool listener tb get client property tool handler } else { tool handler = new tool listener { tool started tool event event { } tool done tool event event { default tool button set selected } area invalidated tool event { } } tb put client property tool handler tool handler } labels configure tool bar button selection tool set selected add item listener new tool button listener selection tool editor set focusable group add tb add } add tool to tool bar tb drawing editor editor tool tool label key resource bundle util labels { button group group = button group tb get client property tool button group tool listener tool handler = tool listener tb get client property tool handler toggle button = new toggle button labels configure tool bar button label key add item listener new tool button listener tool editor set focusable tool add tool listener tool handler group add tb add } add zoom buttons to tool bar bar drawing editor editor { bar add create zoom button editor } button create zoom button drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button zoom popup button = new popup button labels configure tool bar button zoom popup button view zoom zoom popup button set focusable if editor get drawing views size == 0 { zoom popup button set text 100 % } else { zoom popup button set text editor get drawing views iterator next get scale factor * 100 + % } editor add property change listener new property change listener { property change property change event evt { if evt get property == focused view { if evt get new value == { zoom popup button set text 100 % } else { zoom popup button set text editor get focused view get scale factor * 100 + % } } } } factors = {16 8 5 4 3 2 1 5 1 25 1 0 75 0 5 0 25 0 10} for i=0 < factors length i++ { zoom popup button add new zoom editor action editor factors zoom popup button { action performed awt event action event { super action performed zoom popup button set text editor get view get scale factor * 100 + % } } } zoom popup button set focusable zoom popup button } button create zoom button drawing view view { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button zoom popup button = new popup button labels configure tool bar button zoom popup button view zoom zoom popup button set focusable zoom popup button set text view get scale factor * 100 + % view add property change listener new property change listener { property change property change event evt { if evt get property == scale factor { zoom popup button set text view get scale factor * 100 + % } } } factors = {5 4 3 2 1 5 1 25 1 0 75 0 5 0 25 0 10} for i=0 < factors length i++ { zoom popup button add new zoom action view factors zoom popup button { action performed awt event action event { super action performed zoom popup button set text view get scale factor * 100 + % } } } zoom popup button set focusable zoom popup button } add attributes buttons to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels button = bar add new pick attributes action editor set focusable = bar add new apply attributes action editor set focusable bar add separator add color buttons to bar editor bar add separator add stroke buttons to bar editor bar add separator add font buttons to bar editor } add color buttons to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels add color button to bar editor STROKE_COLOR DEFAULT_COLORS 8 attribute stroke color labels add color button to bar editor FILL_COLOR DEFAULT_COLORS 8 attribute fill color labels add color button to bar editor TEXT_COLOR DEFAULT_COLORS 8 attribute text color labels } add color button to tool bar bar drawing editor editor attribute key attribute key map< color> color map column count label key resource bundle util labels { popup button popup button = new popup button popup button set action new default attribute action editor attribute key new rectangle 0 0 22 22 popup button set column count column count for map entry< color> entry color map entry set { attribute action popup button add a= new attribute action editor attribute key entry get value new color icon entry get value put value action SHORT_DESCRIPTION entry get key } image icon chooser icon = new image icon tool bar button factory get resource /org/jhotdraw/draw/action/images/show color chooser png popup button add new color chooser action editor attribute key chooser icon labels configure tool bar button popup button label key popup button set icon new color attribute icon editor attribute key labels get image icon label key tool bar button factory get image popup button set focusable editor add property change listener new property change listener { property change property change event evt { popup button repaint } } bar add popup button } add stroke buttons to tool bar bar drawing editor editor { add stroke decoration button to bar editor add stroke width button to bar editor add stroke dashes button to bar editor add stroke type button to bar editor add stroke placement button to bar editor } add stroke width button to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button stroke width popup button = new popup button labels configure tool bar button stroke width popup button attribute stroke width stroke width popup button set focusable widths = {0 5d 1d 2d 3d 5d 7d 9d 11d} number format formatter = number format get instance if formatter instanceof decimal format { decimal format formatter set maximum fraction digits 1 decimal format formatter set minimum fraction digits 0 } for i=0 < widths length i++ { label = to widths stroke width popup button add new attribute action editor STROKE_WIDTH new widths label new stroke icon new basic stroke float widths basic stroke CAP_BUTT basic stroke JOIN_BEVEL } bar add stroke width popup button } add stroke decoration button to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button stroke decoration popup button = new popup button labels configure tool bar button stroke decoration popup button attribute stroke decoration stroke decoration popup button set focusable stroke decoration popup button set column count 2 line decoration decorations = { new arrow tip 0 35 12 11 3 new arrow tip 0 35 13 7 } for i=0 < decorations length i++ { stroke decoration popup button add new attribute action editor START_DECORATION decorations new line decoration icon decorations stroke decoration popup button add new attribute action editor END_DECORATION decorations new line decoration icon decorations } bar add stroke decoration popup button } add stroke dashes button to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button stroke dashes popup button = new popup button labels configure tool bar button stroke dashes popup button attribute stroke dashes stroke dashes popup button set focusable dashes = { {4d 4d} {2d 2d} {4d 2d} {2d 4d} {8d 2d} {6d 2d 2d 2d} } for i=0 < dashes length i++ { float fdashes if dashes == { fdashes = } else { fdashes = new float dashes length for = 0 < dashes length j++ { fdashes = float dashes } } stroke dashes popup button add new attribute action editor STROKE_DASHES dashes new stroke icon new basic stroke 2f basic stroke CAP_BUTT basic stroke JOIN_BEVEL 10f fdashes 0 } bar add stroke dashes popup button } add stroke type button to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button stroke type popup button = new popup button labels configure tool bar button stroke type popup button attribute stroke type stroke type popup button set focusable stroke type popup button add new attribute action editor STROKE_TYPE attribute keys stroke type labels get attribute stroke type basic new stroke icon new basic stroke 1 basic stroke CAP_BUTT basic stroke JOIN_BEVEL hash map< attribute key object> attr = new hash map< attribute key object> attr put STROKE_TYPE attribute keys stroke type attr put STROKE_INNER_WIDTH_FACTOR 2d stroke type popup button add new attribute action editor attr labels get attribute stroke type new stroke icon new stroke 2 1 attr = new hash map< attribute key object> attr put STROKE_TYPE attribute keys stroke type attr put STROKE_INNER_WIDTH_FACTOR 3d stroke type popup button add new attribute action editor attr labels get attribute stroke type new stroke icon new stroke 3 1 attr = new hash map< attribute key object> attr put STROKE_TYPE attribute keys stroke type attr put STROKE_INNER_WIDTH_FACTOR 4d stroke type popup button add new attribute action editor attr labels get attribute stroke type new stroke icon new stroke 4 1 bar add stroke type popup button } add stroke placement button to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button stroke placement popup button = new popup button labels configure tool bar button stroke placement popup button attribute stroke placement stroke placement popup button set focusable hash map< attribute key object> attr attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement center attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement inside attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement outside attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement center filled attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement inside filled attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement outside filled attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement center unfilled attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement inside unfilled attr = new hash map< attribute key object> attr put STROKE_PLACEMENT attribute keys stroke placement sid attr put FILL_UNDER_STROKE attribute keys underfill stroke placement popup button add new attribute action editor attr labels get attribute stroke placement outside unfilled bar add stroke placement popup button } add font buttons to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels popup button font popup button button bold toggle button button italic toggle button button underline toggle button font popup button = new popup button bold toggle button = new button italic toggle button = new button underline toggle button = new button labels configure tool bar button font popup button attribute font font popup button set focusable font all fonts = graphics environment get local graphics environment get all fonts hash set< string> font exclusion list = new hash set< string> arrays list new { # gung seo # head line # myungjo # pil gi bayan apple gothic apple sung apple myungjo arial hebrew ayuthaya baghdad biau kai charcoal corsiva hebrew deco type naskh devanagari fang song b18030 bitmap geeza geezah geneva gujarati gurmukhi hei helvetica hiragino kaku gothic std hiragino maru gothic hiragino mincho hiragino kaku gothic inai mathi kai krungthep kufi standard hei song mshtakan monaco nadeem new peninim osaka plantagenet cherokee raanana fangsong heiti kaiti song sathu silom thonburi times arial unicode batang estrangelo edessa gautami kartika latha lucida sans unicode mangal marlett mincho outlook boli 10 raavi shruti sim sun sylfaen symbol tunga vrinda wingdings wingdings 2 wingdings 3 z adobe } linked list< font> font list = new linked list< font> for i=0 < all fonts length i++ { if ! font exclusion list contains all fonts get family { font list add all fonts } } all fonts = new font font list size all fonts = font font list to all fonts arrays sort all fonts new comparator< font> { compare font f1 font f2 { result = f1 get family compare to f2 get family if result == 0 { result = f1 get font compare to f2 get font } result } } linked list< font> font families = new linked list< font> menu submenu = for i=0 < all fonts length i++ { if submenu != { if ! all fonts get family equals all fonts 1 get family { submenu = } } if submenu == { if < all fonts length 2 all fonts get family equals all fonts + 1 get family { font families add all fonts submenu = new menu all fonts get family font popup button add submenu } } action action = new attribute action editor FONT_FACE all fonts submenu == ? all fonts get family all fonts get font new styled editor kit font family action all fonts get font all fonts get family if submenu == { font families add all fonts font popup button add action } else { menu item item = submenu add action } } font popup button set column count math max 1 font families size /32 labels configure tool bar button bold toggle button attribute font bold bold toggle button set focusable labels configure tool bar button italic toggle button attribute font italic italic toggle button set focusable labels configure tool bar button underline toggle button attribute font underline underline toggle button set focusable bold toggle button add action listener new attribute toggler editor FONT_BOLD new styled editor kit bold action italic toggle button add action listener new attribute toggler editor FONT_ITALIC new styled editor kit italic action underline toggle button add action listener new attribute toggler editor FONT_UNDERLINED new styled editor kit underline action bar add font popup button set focusable bar add bold toggle button set focusable bar add italic toggle button set focusable bar add underline toggle button set focusable } add alignment buttons to tool bar bar drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels bar add new align action west editor set focusable bar add new align action east editor set focusable bar add new align action horizontal editor set focusable bar add new align action north editor set focusable bar add new align action south editor set focusable bar add new align action vertical editor set focusable bar add separator bar add new move action west editor set focusable bar add new move action east editor set focusable bar add new move action north editor set focusable bar add new move action south editor set focusable bar add separator bar add new move to front action editor set focusable bar add new move to back action editor set focusable } button create toggle grid button drawing editor editor { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels toggle button toggle grid button toggle grid button = new toggle button labels configure tool bar button toggle grid button align grid toggle grid button set focusable toggle grid button add item listener new item listener { item state changed item event event { constrainer if toggle grid button selected { = new grid constrainer 10 10 } else { = new grid constrainer 1 1 } for drawing view editor get drawing views { set constrainer get container repaint } } } toggle grid button } button create toggle grid button drawing view view { resource bundle util labels = resource bundle util get bundle org jhotdraw draw labels toggle button toggle grid button toggle grid button = new toggle button labels configure tool bar button toggle grid button align grid toggle grid button set focusable toggle grid button add item listener new item listener { item state changed item event event { constrainer if toggle grid button selected { = new grid constrainer 10 10 } else { = new grid constrainer 1 1 } view set constrainer view get container repaint } } view add property change listener new property change listener { property change property change event evt { if evt get property == grid constrainer { constrainer = constrainer evt get new value toggle grid button set selected visible } } } toggle grid button } } 