org jhotdraw xml import util * import * import awt * import net n3 nanoxml * nano xml dom input implements dom input { private hash map< object> idobjects = new hash map< object> private xml element document private xml element current private dom factory factory private stack< xml element> stack = new stack< xml element> nano xml dom input dom factory factory input stream { this factory new input stream reader f8 } nano xml dom input dom factory factory reader { this factory = factory try { xml parser parser = xml parser factory create default xml parser xml reader reader = new std xml reader parser set reader reader document = new xml element current = xml element parser parse document add child current current = document } catch { = new get message init cause } } get tag { current get } get attribute default value { value = current get attribute value == || value length == 0 ? default value value } util list< string> get inherited attribute { linked list< string> values = new linked list< string> for xml element node stack { value = node get attribute values add value } value = current get attribute values add value values } get text { get text } get text default value { value = current get content value == ? default value value } get attribute default value { value = current get attribute value == || value length == 0 ? default value long decode value value } get attribute default value { value = current get attribute value == || value length == 0 ? default value parse value } get attribute default value { value = current get attribute value == || value length == 0 ? default value value of value value } get element count { current get children count } get element count tag { count = 0 list list = current get children for i=0 < list size i++ { xml element node = xml element list get if node get equals tag { count++ } } count } open element index { stack push current list list = current get children current = xml element list get index } open element tag { list list = current get children for i=0 < list size i++ { xml element node = xml element list get if node get equals tag { stack push current current = node } } new no such element +tag } open element tag index { count = 0 list list = current get children for i=0 < list size i++ { xml element node = xml element list get if node get equals tag { if count++ == index { stack push current current = node } } } new no such element +tag name+ index +index } close element { current = xml element stack pop } read { read 0 } read index { open element index tag = get tag if tag equals { = } else if tag equals { = get text } else if tag equals { = integer decode get text } else if tag equals long { = long decode get text } else if tag equals float { = new float float parse float get text } else if tag equals { = new parse get text } else if tag equals { = value of get text } else if tag equals color { = new color get attribute rgba 0xff } else if tag equals { = new get element count for i=0 < length i++ { = integer read value } = } else if tag equals float { float = new float get element count for i=0 < length i++ { = float read float value } = } else if tag equals { = new get element count for i=0 < length i++ { = read value } = } else if tag equals font { = new font get attribute dialog get attribute style 0 get attribute size 0 } else if tag equals enum { = factory create enum get attribute type get text } else { ref = get attribute ref = get attribute ref if == { = factory create get tag } else if idobjects contains key { = idobjects get } else { = factory create get tag idobjects put } if ref == { if instanceof dom storable { dom storable read this } } } close element } } 