org jhotdraw draw import org jhotdraw util * import javax swing event * import awt * import awt event * import awt font * import awt geom * import util * import javax swing * import javax swing undo * import * import org jhotdraw geom * figure implements figure { event listener list listener list = new event listener list private connectors visible private connection figure courting connection private drawing drawing private interactive private visible = figure decorator private draw decorator first = changing depth = 0 figure { } add figure listener figure listener { listener list add figure listener } remove figure listener figure listener { listener list remove figure listener } add undoable edit listener undoable edit listener { listener list add undoable edit listener } remove undoable edit listener undoable edit listener { listener list remove undoable edit listener } add notify drawing { this drawing = fire figure added } remove notify drawing { fire figure removed this drawing = } drawing get drawing { drawing } get lock { get drawing == ? this get drawing get lock } set draw decorator first new value { draw decorator first = new value } draw decorator first { draw decorator first } fire area invalidated { fire area invalidated get draw bounds } fire area invalidated rectangle2 invalidated area { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this invalidated area figure listener listeners i+1 figure area invalidated event } } } } fire figure request remove { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure request remove event } } } } fire figure added { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure added event } } } } fire figure removed { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this get bounds figure listener listeners i+1 figure removed event } } } } fire figure changed { fire figure changed get bounds } fire figure changed rectangle2 changed area { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this changed area figure listener listeners i+1 figure changed event } } } } fire figure changed figure event event { if listener list get listener count > 0 { listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { figure listener listeners i+1 figure changed event } } } } fire attribute changed attribute key attribute old value new value { if listener list get listener count > 0 { figure event event = listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if listeners == figure listener { if event == event = new figure event this attribute old value new value figure listener listeners i+1 figure attribute changed event } } } } fire undoable edit happened undoable edit edit { undoable edit event event = if listener list get listener count > 0 { listeners = listener list get listener list for = listeners length 2 i>=0 =2 { if event == event = new undoable edit event this edit if listeners == undoable edit listener { undoable edit listener listeners i+1 undoable edit happened event } } } } figure clone { try { figure that = figure super clone that listener list = new event listener list that connectors visible = that courting connection = if this decorator != { that decorator = figure this decorator clone } that } catch clone not supported { internal = new internal get message init cause } } figure basic clone hash map< figure figure> old to new { } remap hash map< figure figure> old to new { } collection< handle> create handles detail level { linked list< handle> handles = new linked list< handle> if detail level == 0 { box handle kit add box handles this handles } handles } cursor get cursor point2 { if contains { cursor get predefined cursor cursor HAND_CURSOR } else { cursor get default cursor } } set bounds rectangle2 bounds { set bounds new point2 bounds bounds new point2 bounds + bounds width bounds + bounds height } set bounds point2 anchor point2 { point2 old anchor = get start point point2 old = get point if ! old anchor equals anchor || ! old equals { will change basic set bounds anchor changed fire undoable edit happened new set bounds edit this old anchor old anchor } } can connect { } invalidate { fire area invalidated get draw bounds } changing { changing depth != 0 } get changing depth { changing depth } will change { changing depth++ invalidate } validate { } changed { if changing depth <= 1 { validate fire figure changed get draw bounds changing depth = 0 } else { changing depth } } transform affine transform tx { will change basic transform tx fire undoable edit happened new transform edit this tx changed } basic transform affine transform ty connector find connector point2 connection figure prototype { new chop box connector this } includes figure figure { figure == this } figure find figure inside point2 { contains ? this } connector find compatible connector connector start { new chop box connector this } collection< action> get actions point2 { collections empty list } tool get tool point2 { } handle mouse click point2 mouse event evt drawing view view { } handle drop point2 collection< figure> dropped figures drawing view view { } point2 get point { rectangle2 = get bounds new point2 + width + height } point2 get start point { rectangle2 = get bounds new point2 } dimension2 get preferred size { rectangle2 = get bounds new dimension2 width height } remap map old to new { } interactive { interactive } set interactive { interactive = } visible { visible } set visible new value { if new value != visible { will change visible = new value changed } } set connectors visible visible connection figure connection { will change connectors visible = visible courting connection = connection changed } connectors visible { connectors visible } connection figure get courting connection { courting connection } collection< figure> get decomposition { linked list< figure> list = new linked list< figure> list add this list } font render context get font render context { font render context frc = if frc == { frc = new font render context new affine transform options text antialiased options fractional metrics } frc } request remove { fire figure request remove } get layer { 0 } get tooltip point2 { } set decorator figure new value { will change decorator = new value if decorator != { decorator basic set bounds get start point get point } changed } figure get decorator { decorator } draw graphics2 { if draw decorator first { draw decorator draw figure } else { draw figure draw decorator } } draw figure graphics2 draw decorator graphics2 { if decorator != { update decorator bounds decorator draw } } update decorator bounds { if decorator != { point2 = get start point point2 = get point insets2 decorator insets = attribute keys DECORATOR_INSETS get this = decorator insets left = decorator insets top += decorator insets right += decorator insets bottom decorator basic set bounds } } rectangle2 get draw bounds { rectangle2 figure draw bounds = get figure draw bounds if decorator != { update decorator bounds figure draw bounds add decorator get draw bounds } figure draw bounds } rectangle2 get figure draw bounds to { builder buf = new builder buf append get get substring get get last index of ' ' +1 buf append '@' buf append hash buf to } } 