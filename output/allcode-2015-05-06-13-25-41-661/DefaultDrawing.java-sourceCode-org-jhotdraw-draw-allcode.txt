org jhotdraw draw import org jhotdraw util reversed list import awt * import awt geom * import javax swing * import javax swing event * import javax swing undo * import org jhotdraw util * import util * default drawing drawing implements figure listener undoable edit listener { private list< figure> figures = new list< figure> private needs sorting = default drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure figure add figure listener this figure add undoable edit listener this invalidate sort order } basic remove figure figure { figures remove figure figure remove figure listener this figure remove undoable edit listener this invalidate sort order } draw graphics2 { synchronized get lock { ensure sorted list< figure> to draw = new list< figure> figures size rectangle clip rect = get clip bounds for figure figures { if get draw bounds intersects clip rect { to draw add } } draw to draw } } draw graphics2 collection< figure> figures { for figure figures { if visible { draw } } } collection< figure> sort collection< figure> { hash set< figure> unsorted = new hash set< figure> unsorted add all list< figure> sorted = new list< figure> size for figure figures { if unsorted contains { sorted add unsorted remove } } for figure { if unsorted contains { sorted add unsorted remove } } sorted } figure area invalidated figure event { fire area invalidated get invalidated area } figure changed figure event { invalidate sort order fire area invalidated get invalidated area } figure added figure event { } figure removed figure event { } figure request remove figure event { remove get figure } figure find figure point2 { for figure get figures front to back { if visible contains { } } } figure find figure point2 figure ignore { for figure get figures front to back { if != ignore visible contains { } } } figure find figure point2 collection< figure> ignore { for figure get figures front to back { if ! ignore contains visible contains { } } } collection< figure> find figures rectangle2 bounds { list< figure> intersection = new list< figure> for figure figures { if visible get bounds intersects bounds { intersection add } } intersection } collection< figure> find figures within rectangle2 bounds { list< figure> contained = new list< figure> for figure figures { if visible bounds contains get bounds { contained add } } contained } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 { figure = find figure == ? find figure inside } util list< figure> get figures front to back { ensure sorted new reversed list< figure> figures } bring to front figure figure { if figures remove figure { figures add figure invalidate sort order fire area invalidated figure get draw bounds } } send to back figure figure { if figures remove figure { figures add 0 figure invalidate sort order fire area invalidated figure get draw bounds } } undoable edit happened undoable edit event { fire undoable edit happened get edit } figure attribute changed figure event { } contains figure { figures contains } private invalidate sort order { needs sorting = } private ensure sorted { if needs sorting { collections sort figures figure layer comparator needs sorting = } } } 