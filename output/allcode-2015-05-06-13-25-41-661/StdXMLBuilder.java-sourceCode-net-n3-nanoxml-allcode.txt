net n3 nanoxml import import reader import util stack std xml builder implements xml builder { private stack stack private xml element root private xml element prototype std xml builder { this new xml element } std xml builder xml element prototype { this stack = this root = this prototype = prototype } finalize throwable { this prototype = this root = this stack clear this stack = super finalize } start building systemid line nr { this stack = new stack this root = } new processing instruction target reader reader { } start element prefix systemid line nr { full = if prefix != { full = prefix + ' ' + } xml element elt = this prototype create element full systemid line nr if this stack empty { this root = elt } else { xml element top = xml element this stack peek top add child elt } this stack push elt } element attributes processed prefix { } element prefix { xml element elt = xml element this stack pop if elt get children count == 1 { xml element child = elt get child index 0 if child get == { elt set content child get content elt remove child index 0 } } } add attribute key prefix value type { full = key if prefix != { full = prefix + ' ' + key } xml element top = xml element this stack peek if top has attribute full { new xml parse top get systemid top get line nr duplicate attribute + key } if prefix != { top set attribute full value } else { top set attribute full value } } add data reader reader systemid line nr { buf size = 2048 size read = 0 buffer = new buffer buf size char buf = new char buf size for { if size read >= buf size { buf size *= 2 ensure capacity buf size } size try { size = reader read buf } catch { break } if size < 0 { break } append buf 0 size size read += size } xml element elt = this prototype create element systemid line nr elt set content to if ! this stack empty { xml element top = xml element this stack peek top add child elt } } get result { this root } } 