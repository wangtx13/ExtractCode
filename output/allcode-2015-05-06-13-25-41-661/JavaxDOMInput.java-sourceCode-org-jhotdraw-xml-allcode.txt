org jhotdraw xml import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * import awt * javax dom input implements dom input { private hash map< object> idobjects = new hash map< object> private document document private node current private dom factory factory javax dom input dom factory factory input stream { this factory = factory try { transformer = transformer factory new instance new transformer dom result result = new dom result transform new stream source result document = document result get node current = document } catch transformer { = new get message init cause } } javax dom input dom factory factory reader { this factory = factory try { transformer = transformer factory new instance new transformer dom result result = new dom result transform new stream source result document = document result get node current = document } catch transformer { = new get message init cause } } get tag { element current get tag } get attribute default value { value = element current get attribute value length == 0 ? default value value } get text { get text } get text default value { if current get child nodes get length == 0 default value builder buf = new builder get text current buf buf to } private get text node builder buf { if get node value != buf append get node value node list children = get child nodes for i=0 < children get length i++ { get text children item buf } } util list< string> get inherited attribute { linked list< string> values = new linked list< string> node node = current while node != { value = element node get attribute values add first value node = node get parent node } values } get attribute default value { value = element current get attribute value length == 0 ? default value long decode value value } get attribute default value { value = element current get attribute value length == 0 ? default value parse value } get attribute default value { value = element current get attribute value length == 0 ? default value value of value value } get element count { count = 0 node list list = current get child nodes for i=0 < list get length i++ { node node = list item if node instanceof element { count++ } } count } get element count tag { count = 0 node list list = current get child nodes for i=0 < list get length i++ { node node = list item if node instanceof element element node get tag equals tag { count++ } } count } open element index { count = 0 node list list = current get child nodes len = list get length for i=0 < len i++ { node node = list item if node instanceof element { if count++ == index { current = node } } } } open element tag { count = 0 node list list = current get child nodes len = list get length for i=0 < len i++ { node node = list item if node instanceof element element node get tag equals tag { current = node } } new illegal argument element not found +tag } open element tag index { count = 0 node list list = current get child nodes len = list get length for i=0 < len i++ { node node = list item if node instanceof element element node get tag equals tag { if count++ == index { current = node } } } new illegal argument no such child +tag name+ +index+ } close element { current = current get parent node } read { read 0 } read index { open element index tag = get tag if tag equals { = } else if tag equals { = get text } else if tag equals { = integer decode get text } else if tag equals long { = long decode get text } else if tag equals float { = new float float parse float get text } else if tag equals { = new parse get text } else if tag equals { = value of get text } else if tag equals color { = new color get attribute rgba 0xff } else if tag equals { = new get element count for i=0 < length i++ { = integer read value } = } else if tag equals float { float = new float get element count for i=0 < length i++ { = float read float value } = } else if tag equals { = new get element count for i=0 < length i++ { = read value } = } else if tag equals font { = new font get attribute dialog get attribute style 0 get attribute size 0 } else if tag equals enum { = factory create enum get attribute type get text } else { ref = get attribute ref = get attribute ref if == { = factory create get tag } else if idobjects contains key { = idobjects get } else { = factory create get tag idobjects put } if ref == { if instanceof dom storable { dom storable read this } } } close element } } 