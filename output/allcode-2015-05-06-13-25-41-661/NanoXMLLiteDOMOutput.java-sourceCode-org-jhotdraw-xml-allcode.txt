org jhotdraw xml import awt * import util * import * import nanoxml * nano xml lite dom output implements dom output { private doctype private hash map< string> objectids private hash map< object> prototypes private xml element document private xml element current private dom factory factory private stack< xml element> stack nano xml lite dom output dom factory factory { this factory = factory objectids = new hash map< string> document = new xml element new hash map current = document stack = new stack< xml element> stack push current } save output stream out { writer = new output stream writer out f8 save flush } save writer out { if doctype != { out write <! out write doctype out write >\n } xml element document get children get 0 write out } writer out { xml element document get children get 0 out } open element tag { xml element new element = new xml element new hash map new element set tag current add child new element stack push current current = new element } close element { current = xml element stack pop } add comment comment { } add text text { old = current get content if old == { current set content text } else { current set content old+text } } add attribute value { if value != { current set attribute value } } add attribute value { current set attribute integer to value } add attribute value { current set attribute new value to } add attribute float value { = float to value if with 0 = substring 0 length 2 current set attribute } add attribute value { = to value if with 0 = substring 0 length 2 current set attribute } write { if == { open element close element } else if instanceof dom storable { write storable dom storable } else if instanceof { open element add text close element } else if instanceof integer { open element add text to close element } else if instanceof long { open element long add text to close element } else if instanceof { open element = to if with 0 = substring 0 length 2 add text close element } else if instanceof float { open element float = to if with 0 = substring 0 length 2 add text close element } else if instanceof { open element add text to close element } else if instanceof color { color = color open element color add attribute rgba # + integer to hex get close element } else if instanceof { open element = for i=0 < length i++ { write new integer } close element } else if instanceof float { open element float float = float for i=0 < length i++ { write new float } close element } else if instanceof { open element = for i=0 < length i++ { write new } close element } else if instanceof font { font = font open element font add attribute get add attribute style get style add attribute size get size close element } else if instanceof enum { open element enum enum = enum add attribute type factory get enum add text factory get enum value close element } else { new illegal argument unable to store +o+ +o get } } private xml element write storable dom storable { tag = factory get if tag == new illegal argument no tag for +o open element tag xml element element = current if objectids contains key { add attribute ref objectids get } else { = integer to objectids size 16 objectids put add attribute write this } close element element } add attribute float value float default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if value != ! value equals default value { add attribute value } } get prototype { if prototypes == { prototypes = new hash map< object> } if ! prototypes contains key current get { prototypes put current get factory create current get } prototypes get current get } set doctype doctype { this doctype = doctype } } 