org jhotdraw draw action import lang reflect * generic listener { create listener listener target target { listener = get listener listener listener target = get target target target listener get types if target == { target = get target target target new 0 } if target == { new runtime no such +target name+ +target get } create listener target target } create listener target target { invocation handler handler = new default invoker { proxy args throwable { if listener equals { if target get types length == 0 { target target new 0 } else { target target args } } else { super proxy args } } } cls = listener get declaring loader = cls get loader proxy new proxy instance new {cls} handler } private default invoker implements invocation handler { proxy args throwable { if get declaring == { = get if equals hash { proxy hash proxy } else if equals equals { proxy equals proxy args 0 } else if equals to { proxy to proxy } } value of get type } integer proxy hash proxy { new integer identity hash proxy } proxy equals proxy other { proxy == other ? } proxy to proxy { proxy get get + '@' + integer to hex proxy hash } private character char_0 = new character char 0 private byte byte_0 = new byte byte 0 private value of rt { if !rt primitive { } else if rt == { } else if rt == { } else if rt == char { char_0 } else { byte_0 } } } private get listener listener listener { = listener get result = for = 0 < length i++ { if listener equals get { if result != { new runtime ambiguous +m + vs +result } result = } } if result == { new runtime no such +listener name+ +listener } result } private get target target target types { = target get get result = each for = 0 < length i++ { if !target equals get continue each = get types if length != types length continue each for = 0 < length j++ { if !p assignable from types continue each } if result != { new runtime ambiguous +m + vs +result } result = } if result == { } result = raise to result if result != result = result result } private raise to { = get declaring if modifier get modifiers modifier get modifiers sc = get superclass if sc != { sm = raise to sc if sm != sm } ints = get for = 0 < ints length i++ { = raise to ints if != } } private raise to { try { sm = get get get types raise to sm } catch no such ee { } } private generic listener {} } 