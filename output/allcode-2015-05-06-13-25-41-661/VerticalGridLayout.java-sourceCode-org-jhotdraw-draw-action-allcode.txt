org jhotdraw draw action import awt * vertical grid layout implements layout manager serializable { hgap vgap cols vertical = vertical grid layout { this 1 0 0 0 } vertical grid layout cols { this cols 0 0 } vertical grid layout cols vertical { this cols 0 0 vertical } vertical grid layout cols hgap vgap { this cols hgap vgap } vertical grid layout cols hgap vgap vertical { if == 0 cols == 0 { new illegal argument and cols cannot both be zero } this = this cols = cols this hgap = hgap this vgap = vgap this vertical = vertical } get { } set { if == 0 this cols == 0 { new illegal argument and cols cannot both be zero } this = } set vertical { vertical = } vertical { vertical } get columns { cols } set columns cols { if cols == 0 this == 0 { new illegal argument and cols cannot both be zero } this cols = cols } get hgap { hgap } set hgap hgap { this hgap = hgap } get vgap { vgap } set vgap vgap { this vgap = vgap } add layout component component comp { } remove layout component component comp { } dimension preferred layout size container parent { synchronized parent get tree lock { insets insets = parent get insets ncomponents = parent get component count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { component comp = parent get component dimension = comp get preferred size if < width { = width } if < height { = height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } dimension minimum layout size container parent { synchronized parent get tree lock { insets insets = parent get insets ncomponents = parent get component count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { component comp = parent get component dimension = comp get minimum size if < width { = width } if < height { = height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } layout container container parent { synchronized parent get tree lock { insets insets = parent get insets ncomponents = parent get component count nrows = ncols = cols ltr = parent get component orientation left to right if ncomponents == 0 { } if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } = parent get width insets left + insets right = parent get height insets top + insets bottom = ncols 1 * hgap / ncols = nrows 1 * vgap / nrows if ltr { for = 0 = insets left < ncols c++ += + hgap { for = 0 = insets top < nrows r++ += + vgap { if vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent get component set bounds } } } } else { for = 0 = parent get width insets right < ncols c++ = + hgap { for = 0 = insets top < nrows r++ += + vgap { if vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent get component set bounds } } } } } } to { get get + hgap= + hgap + vgap= + vgap + rows= + + cols= + cols + } } 