org jhotdraw xml import util * default dom factory implements dom factory { private hash map< string> to map = new hash map< string> private hash map< object> to prototype map = new hash map< object> private hash map< string> enum to map = new hash map< string> private hash map< class> to enum map = new hash map< class> private hash map< enum string> enum to value map = new hash map< enum string> private hash map< set< enum>> value to enum map = new hash map< set< enum>> default dom factory { } add storable { to prototype map put to map put } add storable dom storable prototype { to prototype map put prototype to map put prototype get } add enum { enum to map put to enum map put } add enum value enum { enum to value map put value set< enum> enums if value to enum map contains key value { enums = value to enum map get value } else { enums = new hash set< enum> value to enum map put value enums } enums add } create { = to prototype map get if == { new illegal argument storable not known to factory +name } if instanceof { try { new instance } catch { illegal argument = new illegal argument storable not instantiable by factory +name init cause } } else { try { get get clone } catch { illegal argument = new illegal argument storable prototype not cloneable by factory +name init cause } } } get dom storable { = to map get get if == { new illegal argument storable not known to factory storable +o+ factory +this get } } get enum enum { = enum to map get get if == { new illegal argument enum not known to factory +e get } } get enum value enum { enum to value map contains key ? enum to value map get to } enum create enum value { enum = to enum map get if enum == { new illegal argument enum not known to factory +name } set< enum> enums = value to enum map get value if enums == { enum value of enum value } for enum enums { if get == enum { } } new illegal argument enum value not known to factory +value } } 