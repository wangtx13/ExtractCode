org jhotdraw geom import awt geom * import util * import awt * quad tree2 double< t> { private hash map< rectangle2 double> outside = new hash map< rectangle2 double> private quad node root private max capacity = 32 private min size = 32 private max outside = 32 quad tree2 { root = new quad node new rectangle2 0 0 800 600 } quad tree2 rectangle2 bounds { root = new quad node bounds } add rectangle2 bounds { if root bounds contains bounds { root add rectangle2 bounds clone } else { outside put rectangle2 bounds clone if outside size > max outside { reorganize } } } reorganize { root join outside put all root root clear iterator< map entry< rectangle2 double>> = outside entry set iterator map entry< rectangle2 double> entry = next rectangle2 tree bounds = rectangle2 entry get value clone while has next { entry = next rectangle2 bounds = entry get value tree bounds add bounds } root bounds = tree bounds = outside entry set iterator while has next { entry = next root add entry get key entry get value } outside clear } remove { outside remove root remove } collection< t> find contains point2 { hash set< t> result = new hash set< t> root find contains result for map entry< rectangle2 double> entry outside entry set { if entry get value contains { result add entry get key } } result } collection< t> find intersects rectangle2 { find intersects new rectangle2 get get get width get height } collection< t> find intersects rectangle2 { hash set< t> result = new hash set< t> root find intersects result for map entry< rectangle2 double> entry outside entry set { if entry get value intersects { result add entry get key } } result } collection< t> find inside rectangle2 { hash set< t> result = new hash set< t> root find inside result for map entry< rectangle2 double> entry outside entry set { if contains entry get value { result add entry get key } } result } private quad node { private rectangle2 bounds private hash map< rectangle2 double> private quad node north east private quad node north west private quad node south east private quad node south west quad node rectangle2 bounds { this bounds = bounds this = new hash map< rectangle2 double> } leaf { north east == } remove { if remove == ! leaf { north east remove north west remove south east remove south west remove } } add rectangle2 bounds { if leaf size >= max capacity bounds width > min size bounds height > min size { split } if leaf || bounds contains bounds { put bounds } else { if north east bounds intersects bounds { north east add bounds } if north west bounds intersects bounds { north west add bounds } if south east bounds intersects bounds { south east add bounds } if south west bounds intersects bounds { south west add bounds } } } split { if leaf { hw = bounds width / 2 hh = bounds height / 2 north west = new quad node new rectangle2 bounds bounds hw hh north east = new quad node new rectangle2 bounds + hw bounds bounds width hw hh south west = new quad node new rectangle2 bounds bounds + hh hw bounds height hh south east = new quad node new rectangle2 bounds + hw bounds + hh bounds width hw bounds height hh hash map< rectangle2 double> temp = = new hash map< rectangle2 double> for map entry< rectangle2 double> entry temp entry set { add entry get key entry get value } } } join { if ! leaf { north west join north east join south west join south east join put all north west put all north east put all south west put all south east north west = north east = south west = south east = } } find contains point2 hash set< t> result { if bounds contains { for map entry< rectangle2 double> entry entry set { if entry get value contains { result add entry get key } } if ! leaf { north west find contains result north east find contains result south west find contains result south east find contains result } } } find intersects rectangle2 hash set< t> result { if bounds intersects { old size = result size for map entry< rectangle2 double> entry entry set { if entry get value intersects { result add entry get key } } if ! leaf { north west find intersects result north east find intersects result south west find intersects result south east find intersects result } } } find inside rectangle2 hash set< t> result { if bounds intersects { for map entry< rectangle2 double> entry entry set { if contains entry get value { result add entry get key } } if ! leaf { north west find inside result north east find inside result south west find inside result south east find inside result } } } } } 