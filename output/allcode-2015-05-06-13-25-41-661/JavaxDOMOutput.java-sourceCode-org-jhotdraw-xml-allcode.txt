org jhotdraw xml import awt * import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * javax dom output implements dom output { private doctype private hash map< string> objectids private hash map< object> prototypes private document document private node current private dom factory factory javax dom output dom factory factory { this factory = factory try { objectids = new hash map< string> document = document builder factory new instance new document builder new document current = document } catch parser configuration { = new get message init cause } } save output stream out { try { if doctype != { output stream writer = new output stream writer out f8 write <! write doctype write >\n flush } transformer = transformer factory new instance new transformer transform new dom source document new stream result out } catch transformer { = new get message init cause } } save writer out { try { if doctype != { out write <! out write doctype out write >\n } transformer = transformer factory new instance new transformer transform new dom source document new stream result out } catch transformer { = new get message init cause } } open element tag { element new element = document create element tag current append child new element current = new element } close element { current = current get parent node } add comment comment { current append child document create comment comment } add text text { current append child document create text node text } add attribute value { if value != { element current set attribute value } } add attribute value { element current set attribute integer to value } add attribute value { element current set attribute to value } add attribute float value { = float to value if with 0 = substring 0 length 2 element current set attribute } add attribute value { = to value if with 0 = substring 0 length 2 element current set attribute } write { if == { open element close element } else if instanceof dom storable { write storable dom storable } else if instanceof { open element add text close element } else if instanceof integer { open element add text to close element } else if instanceof long { open element long add text to close element } else if instanceof { open element add text to close element } else if instanceof float { open element float add text to close element } else if instanceof { open element add text to close element } else if instanceof color { color = color open element color add attribute rgba # + integer to hex get close element } else if instanceof { open element = for i=0 < length i++ { write new integer } close element } else if instanceof float { open element float float = float for i=0 < length i++ { write new float } close element } else if instanceof { open element = for i=0 < length i++ { write new } close element } else if instanceof font { font = font open element font add attribute get add attribute style get style add attribute size get size close element } else if instanceof enum { open element enum enum = enum add attribute type factory get enum add text factory get enum value close element } else { new illegal argument unable to store +o+ +o get } } private write storable dom storable { tag = factory get if tag == new illegal argument no tag for +o open element tag if objectids contains key { add attribute ref objectids get } else { = integer to objectids size 16 objectids put add attribute write this } close element } add attribute float value float default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if value != default value { add attribute value } } add attribute value default value { if ! value equals default value { add attribute value } } get prototype { if prototypes == { prototypes = new hash map< object> } if ! prototypes contains key current get node { prototypes put current get node factory create current get node } prototypes get current get node } set doctype doctype { this doctype = doctype } } 