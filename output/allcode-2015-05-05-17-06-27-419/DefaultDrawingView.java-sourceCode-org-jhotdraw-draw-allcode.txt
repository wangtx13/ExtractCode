org jhotdraw draw import org jhotdraw gui datatransfer Composite Transferable import org jhotdraw util * import org jhotdraw undo * import awt * import awt datatransfer * import awt geom * import awt color * import awt event * import * import util * import javax swing * import org jhotdraw app Editable Component import org jhotdraw geom * import org jhotdraw xml * import org jhotdraw xml Xml Transferable Default Drawing View J Component implements Drawing View Drawing Listener Handle Listener Editable Component { private Drawing drawing private Set< Figure> dirty Figures = new Hash Set< Figure> private Set< Figure> selected Figures = new Hash Set< Figure> private rainbow = 0 private Linked List< Handle> selection Handles = new Linked List< Handle> private Handle secondary Handle Owner private Linked List< Handle> secondary Handles = new Linked List< Handle> private handles Are Valid = private Dimension preferred Size private scale Factor = 1 private Point2 translate = new Point2 0 0 private detail Level private Dom Factory dom Factory private Drawing Editor editor private Constrainer constrainer = new Grid Constrainer 1 1 private J Label empty Drawing Label Default Drawing View { init Components set Focusable add Focus Listener new Focus Listener { focus Gained Focus Event { repaint } focus Lost Focus Event { repaint } } } private init Components { button Group1 = new javax swing Button Group set Layout set Background new awt Color 255 255 255 } Drawing get Drawing { drawing } util Set get Tools { } set Empty Drawing Message String new Value { String old Value = empty Drawing Label == ? empty Drawing Label get Text if new Value == { empty Drawing Label = } else { empty Drawing Label = new J Label new Value empty Drawing Label set Horizontal Alignment J Label C E N T E R } fire Property Change empty Drawing Message old Value new Value repaint } String get Empty Drawing Message { empty Drawing Label == ? empty Drawing Label get Text } paint Component Graphics gr { Graphics2 = Graphics2 gr set Rendering Hint Rendering Hints KEY_ALPHA_INTERPOLATION Rendering Hints VALUE_ALPHA_INTERPOLATION_QUALITY set Rendering Hint Rendering Hints KEY_ANTIALIASING Rendering Hints VALUE_ANTIALIAS_ON set Rendering Hint Rendering Hints KEY_STROKE_CONTROL Rendering Hints VALUE_STROKE_NORMALIZE set Rendering Hint Rendering Hints KEY_FRACTIONALMETRICS Options Fractional Metrics ? Rendering Hints VALUE_FRACTIONALMETRICS_ON Rendering Hints VALUE_FRACTIONALMETRICS_OFF set Rendering Hint Rendering Hints KEY_FRACTIONALMETRICS Rendering Hints VALUE_FRACTIONALMETRICS_OFF set Rendering Hint Rendering Hints KEY_INTERPOLATION Rendering Hints VALUE_INTERPOLATION_BICUBIC set Rendering Hint Rendering Hints KEY_RENDERING Rendering Hints VALUE_RENDER_QUALITY set Rendering Hint Rendering Hints KEY_TEXT_ANTIALIASING Options Text Antialiased ? Rendering Hints VALUE_TEXT_ANTIALIAS_ON Rendering Hints VALUE_TEXT_ANTIALIAS_OFF draw Background draw Grid draw Drawing draw Handles draw Tool } draw Background Graphics2 { = -translate * scale Factor = -translate * scale Factor = get Width = get Height set Color get Background fill Rect - - if > 0 { set Color new Color 0xf0f0f0 fill Rect 0 0 } if > 0 { set Color new Color 0xf0f0f0 fill Rect 0 0 } } draw Grid Graphics2 { constrainer draw this } draw Drawing Graphics2 gr { if drawing != { if drawing get Figure Count == 0 empty Drawing Label != { empty Drawing Label set Bounds 0 0 get Width get Height empty Drawing Label paint gr } else { Graphics2 = Graphics2 gr create Affine Transform tx = get Transform tx translate -translate * scale Factor -translate * scale Factor tx scale scale Factor scale Factor set Transform tx drawing set Font Render Context get Font Render Context drawing draw dispose } } } draw Handles awt Graphics2 { if editor != editor get Focused View == this { validate Handles for Handle get Selection Handles { draw } for Handle get Secondary Handles { draw } } } draw Tool Graphics2 { if editor != editor get View == this editor get Tool != { editor get Tool draw } } set Drawing Drawing { if this drawing != { this drawing remove Drawing Listener this clear Selection } this drawing = if this drawing != { this drawing add Drawing Listener this } invalidate Dimension invalidate if get Parent != get Parent validate repaint } repaint Rectangle2 { Rectangle vr = drawing To View vr grow 1 1 repaint vr } area Invalidated Drawing Event evt { repaint evt get Invalidated Area invalidate Dimension } area Invalidated Handle Event evt { repaint evt get Invalidated Area invalidate Dimension } figure Added Drawing Event evt { if evt get Drawing get Figure Count == 1 { repaint } else { repaint evt get Invalidated Area } invalidate Dimension } figure Removed Drawing Event evt { if evt get Drawing get Figure Count == 0 { repaint } else { repaint evt get Invalidated Area } remove From Selection evt get Figure invalidate Dimension } invalidate { invalidate Dimension super invalidate } add To Selection Figure figure { selected Figures add figure invalidate Handles fire Selection Changed repaint } add To Selection Collection< Figure> figures { selected Figures add All figures invalidate Handles fire Selection Changed repaint } remove From Selection Figure figure { if selected Figures remove figure { invalidate Handles fire Selection Changed } repaint } toggle Selection Figure figure { if selected Figures contains figure { selected Figures remove figure } else { selected Figures add figure } fire Selection Changed invalidate Handles repaint } select All { selected Figures clear selected Figures add All drawing get Figures invalidate Handles fire Selection Changed repaint } clear Selection { if get Selection Count > 0 { selected Figures clear invalidate Handles fire Selection Changed } repaint } Figure Selected Figure check Figure { selected Figures contains check Figure } Collection< Figure> get Selected Figures { Collections unmodifiable Set selected Figures } get Selection Count { selected Figures size } private util List< Handle> get Selection Handles { validate Handles Collections unmodifiable List selection Handles } private util List< Handle> get Secondary Handles { validate Handles Collections unmodifiable List secondary Handles } private invalidate Handles { if handles Are Valid { handles Are Valid = Rectangle invalidated Area = for Handle handle selection Handles { handle remove Handle Listener this if invalidated Area == { invalidated Area = handle get Draw Bounds } else { invalidated Area add handle get Draw Bounds } handle dispose } selection Handles clear secondary Handles clear switch selected Figures size { case 0 if invalidated Area != { repaint invalidated Area } break case 1 if invalidated Area != { repaint invalidated Area } break default repaint break } } } private validate Handles { if ! handles Are Valid { handles Are Valid = Rectangle invalidated Area = level = detail Level { for Figure figure get Selected Figures { for Handle handle figure create Handles level { handle set View this selection Handles add handle handle add Handle Listener this if invalidated Area == { invalidated Area = handle get Bounds } else { invalidated Area add handle get Bounds } } } } while level-- > 0 selection Handles size == 0 detail Level = level + 1 if invalidated Area != { repaint invalidated Area } } } Handle find Handle Point { validate Handles for Handle handle new Reversed List< Handle> get Secondary Handles { if handle contains { handle } } for Handle handle new Reversed List< Handle> get Selection Handles { if handle contains { handle } } } Collection< Handle> get Compatible Handles Handle master { validate Handles Hash Set< Figure> owners = new Hash Set< Figure> Linked List< Handle> compatible Handles = new Linked List< Handle> owners add master get Owner compatible Handles add master for Handle handle get Selection Handles { if ! owners contains handle get Owner handle Combinable With master { owners add handle get Owner compatible Handles add handle } } compatible Handles } Figure find Figure Point { get Drawing find Figure view To Drawing } Collection< Figure> find Figures Rectangle { get Drawing find Figures view To Drawing } Collection< Figure> find Figures Within Rectangle { get Drawing find Figures Within view To Drawing } add Figure Selection Listener Figure Selection Listener fsl { listener List add Figure Selection Listener fsl } remove Figure Selection Listener Figure Selection Listener fsl { listener List remove Figure Selection Listener fsl } fire Selection Changed { if listener List get Listener Count > 0 { Figure Selection Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Selection Listener { if event == event = new Figure Selection Event this Figure Selection Listener listeners i+1 selection Changed event } } } } handle Request Remove Handle Event { selection Handles remove get Handle get Handle dispose invalidate Handles repaint get Invalidated Area } invalidate Dimension { preferred Size = } Constrainer get Constrainer { constrainer } set Constrainer Constrainer new Value { Constrainer old Value = constrainer constrainer = new Value repaint fire Property Change constrainer old Value new Value } Dimension get Preferred Size { if preferred Size == { Dimension2 = new Dimension2 if drawing != { translate = 0 translate = 0 for Figure drawing get Figures { Rectangle2 = get Draw Bounds width = Math max width + width height = Math max height + height translate = Math min translate translate = Math min translate } } preferred Size = new Dimension width + 10 - translate * scale Factor height + 10 - translate * scale Factor fire View Transform Changed repaint } preferred Size } Point drawing To View Point2 { new Point - translate * scale Factor - translate * scale Factor } Point2 view To Drawing Point { new Point2 / scale Factor + translate / scale Factor + translate } Rectangle drawing To View Rectangle2 { new Rectangle - translate * scale Factor - translate * scale Factor width * scale Factor height * scale Factor } Rectangle2 view To Drawing Rectangle { new Rectangle2 / scale Factor + translate / scale Factor + translate width / scale Factor height / scale Factor } Container get Container { this } get Scale Factor { scale Factor } set Scale Factor new Value { old Value = scale Factor scale Factor = new Value fire View Transform Changed fire Property Change scale Factor old Value new Value invalidate Dimension invalidate if get Parent != get Parent validate repaint } fire View Transform Changed { for Handle handle selection Handles { handle view Transform Changed } for Handle handle secondary Handles { handle view Transform Changed } } set Handle Detail Level new Value { detail Level = new Value invalidate Handles repaint } get Handle Detail Level { detail Level } handle Request Secondary Handles Handle Event { secondary Handle Owner = get Handle secondary Handles clear secondary Handles add All secondary Handle Owner create Secondary Handles for Handle secondary Handles { set View this add Handle Listener this } repaint } Affine Transform get Drawing To View Transform { Affine Transform = new Affine Transform scale scale Factor scale Factor translate - translate - translate } set Dom Factory Dom Factory new Value { Dom Factory old Value = dom Factory this dom Factory = new Value fire Property Change Dom Factory old Value new Value } Dom Factory get Dom Factory { dom Factory } copy { if dom Factory == { get Toolkit beep } Hash Set< Figure> to Be Copied = new Hash Set< Figure> get Selected Figures if to Be Copied size == 0 Byte Array Output Stream out = new Byte Array Output Stream try { Nano Xml Lite Dom Output domo = new Nano Xml Lite Dom Output dom Factory domo open Element Drawing Clip for Figure get Drawing get Figures { if to Be Copied contains { domo write Object } } domo close Element domo save out byte data = out to Byte Array Composite Transferable transfer = new Composite Transferable transfer add new Xml Transferable data application/x-drawing-clip Drawing Clip transfer add new Xml Transferable data text/xml Drawing Clip Toolkit get Default Toolkit get System Clipboard set Contents transfer transfer } catch I O Exception { Stack Trace get Toolkit beep } } cut { if dom Factory == { get Toolkit beep } copy delete } delete { Array List< Figure> to Be Deleted = new Array List< Figure> get Selected Figures clear Selection get Drawing remove All to Be Deleted } paste { if dom Factory == { get Toolkit beep } try { Array List< Figure> to Be Selected = new Array List< Figure> Data Flavor flavor = new Data Flavor application/x-drawing-clip Drawing Clip Transferable transfer = Toolkit get Default Toolkit get System Clipboard get Contents this if transfer Data Flavor Supported flavor { Composite Edit = new Composite Edit Paste get Drawing fire Undoable Edit Happened for Figure new Linked List< Figure> get Selected Figures { get Drawing remove } Input Stream = try { = Input Stream transfer get Transfer Data flavor Nano Xml Lite Dom Input domi = new Nano Xml Lite Dom Input dom Factory domi open Element Drawing Clip for i=0 n=domi get Element Count < i++ { Figure = Figure domi read Object get Drawing add to Be Selected add } } finally { if != close } clear Selection add To Selection to Be Selected get Drawing fire Undoable Edit Happened } else { Toolkit get Default Toolkit beep } } catch Throwable { Stack Trace } } duplicate { Collection< Figure> sorted = get Drawing sort get Selected Figures Hash Map< Figure Figure> original To Duplicate Map = new Hash Map< Figure Figure> sorted size clear Selection Drawing drawing = get Drawing Array List< Figure> duplicates = new Array List< Figure> sorted size Affine Transform tx = new Affine Transform tx translate 5 5 for Figure sorted { Figure = Figure clone basic Transform tx duplicates add original To Duplicate Map put drawing add } for Figure duplicates { remap original To Duplicate Map } add To Selection duplicates } remove Notify Drawing Editor editor { this editor = repaint } add Notify Drawing Editor editor { this editor = editor repaint } private javax swing Button Group button Group1 } 