org jhotdraw xml import awt * import util * import * import net n3 nanoxml * Nano Xml Dom Output implements Dom Output { private String doctype private Hash Map< Object String> objectids private Hash Map< String Object> prototypes private Xml Element document private Xml Element current private Dom Factory factory private Stack< Xml Element> stack Nano Xml Dom Output Dom Factory factory { this factory = factory objectids = new Hash Map< Object String> document = new Xml Element current = document stack = new Stack< Xml Element> stack push current } save Output Stream out I O Exception { Writer = new Output Stream Writer out U T F8 save flush } save Writer out I O Exception { if doctype != { out write <! O C T Y P E out write doctype out write >\n } Xml Writer writer = new Xml Writer out writer write Xml Element document get Children get 0 } Print Writer out { Xml Writer writer = new Xml Writer out try { writer write Xml Element document get Children get 0 } catch I O Exception { Internal Error error = new Internal Error error init Cause error } } open Element String tag Name { Xml Element new Element = new Xml Element new Element set Name tag Name current add Child new Element stack push current current = new Element } close Element { current = Xml Element stack pop } add Comment String comment { } add Text String text { String old = current get Content if old == { current set Content text } else { current set Content old+text } } add Attribute String String value { if value != { current set Attribute value } } add Attribute String value { current set Attribute Integer to String value } add Attribute String value { current set Attribute new Boolean value to String } add Attribute String float value { String = Float to String value if With 0 = substring 0 length - 2 current set Attribute } add Attribute String value { String = to String value if With 0 = substring 0 length - 2 current set Attribute } write Object Object I O Exception { if == { open Element close Element } else if instanceof Dom Storable { write Storable Dom Storable } else if instanceof String { open Element add Text String close Element } else if instanceof Integer { open Element add Text to String close Element } else if instanceof Long { open Element long add Text to String close Element } else if instanceof { open Element String = to String if With 0 = substring 0 length - 2 add Text close Element } else if instanceof Float { open Element float String = to String if With 0 = substring 0 length - 2 add Text close Element } else if instanceof Boolean { open Element add Text to String close Element } else if instanceof Color { Color = Color open Element color add Attribute rgba # + Integer to Hex String get R G B close Element } else if instanceof { open Element Array = for i=0 < length i++ { write Object new Integer } close Element } else if instanceof float { open Element float Array float = float for i=0 < length i++ { write Object new Float } close Element } else if instanceof { open Element Array = for i=0 < length i++ { write Object new } close Element } else if instanceof Font { Font = Font open Element font add Attribute get Name add Attribute style get Style add Attribute size get Size close Element } else if instanceof Enum { open Element enum Enum = Enum add Attribute type factory get Enum Name add Text factory get Enum Value close Element } else { new Illegal Argument Exception unable to store +o+ +o get Class } } private Xml Element write Storable Dom Storable I O Exception { String tag Name = factory get Name if tag Name == new Illegal Argument Exception no tag for +o open Element tag Name Xml Element element = current if objectids contains Key { add Attribute ref String objectids get } else { String = Integer to String objectids size 16 objectids put add Attribute write this } close Element element } add Attribute String float value float default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String String value String default Value { if value != ! value equals default Value { add Attribute value } } Object get Prototype { if prototypes == { prototypes = new Hash Map< String Object> } if ! prototypes contains Key current get Name { prototypes put current get Name factory create current get Name } prototypes get current get Name } set Doctype String doctype { this doctype = doctype } } 