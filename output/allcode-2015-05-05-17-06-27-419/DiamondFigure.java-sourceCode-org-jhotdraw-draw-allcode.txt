org jhotdraw draw import awt * import awt geom * import * import util * import org jhotdraw draw Attribute Keys * import org jhotdraw geom Geom import org omg C O R B A M A R S H A L Diamond Figure Attributed Figure { Attribute Key< Boolean> IS_QUADRATIC = new Attribute Key< Boolean> Quadratic private Rectangle2 rectangle Diamond Figure { this 0 0 0 0 } Diamond Figure width height { rectangle = new Rectangle2 width height } draw Fill Graphics2 { Rectangle2 = Rectangle2 rectangle clone if Quadratic { side = Math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = Attribute Keys get Perpendicular Fill Growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line Length = Math sqrt * + * scale = grow / line Length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb Geom grow growx growy } General Path diamond = new General Path diamond move To float + width / 2 float diamond line To float + width float + height / 2 diamond line To float + width / 2 float + height diamond line To float float + height / 2 diamond close Path fill diamond } draw Stroke Graphics2 { Rectangle2 = Rectangle2 rectangle clone if Quadratic { side = Math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = Attribute Keys get Perpendicular Draw Growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line Length = Math sqrt * + * scale = grow / line Length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb Geom grow growx growy } General Path diamond = new General Path diamond move To float + width / 2 float diamond line To float + width float + height / 2 diamond line To float + width / 2 float + height diamond line To float float + height / 2 diamond close Path draw diamond } Rectangle2 get Bounds { Rectangle2 bounds = Rectangle2 rectangle clone bounds } Rectangle2 get Figure Draw Bounds { Rectangle2 = Rectangle2 rectangle clone if Quadratic { side = Math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = Attribute Keys get Perpendicular Hit Growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line Length = Math sqrt * + * scale = grow / line Length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb Geom grow growx growy } } contains Point2 { Rectangle2 = Rectangle2 rectangle clone if Quadratic { side = Math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = Attribute Keys get Perpendicular Fill Growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d line Length = Math sqrt * + * scale = grow / line Length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb Geom grow growx growy } General Path diamond = new General Path diamond move To float + width / 2 float diamond line To float + width float + height / 2 diamond line To float + width / 2 float + height diamond line To float float + height / 2 diamond close Path diamond contains } basic Set Bounds Point2 anchor Point2 { rectangle = Math min anchor rectangle = Math min anchor rectangle width = Math max 0 1 Math - anchor rectangle height = Math max 0 1 Math - anchor } basic Transform Affine Transform tx { Point2 anchor = get Start Point Point2 = get End Point basic Set Bounds Point2 tx transform anchor anchor Point2 tx transform } restore To Object geometry { Rectangle2 = Rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } Object get Restore Data { rectangle clone } Quadratic { Boolean = Boolean get Attribute IS_QUADRATIC == ? Value } set Quadratic new Value { set Attribute IS_QUADRATIC new Value } Connector find Connector Point2 Connection Figure prototype { new Chop Diamond Connector this } Connector find Compatible Connector Connector Start { new Chop Diamond Connector this } Diamond Figure clone { Diamond Figure that = Diamond Figure super clone that rectangle = Rectangle2 this rectangle clone that } } 