org jhotdraw draw import org jhotdraw beans * import org jhotdraw undo * import org jhotdraw xml * import awt * import awt geom * import awt font * import javax swing * import javax swing event * import javax swing undo * import org jhotdraw util * import util * import * Abstract Drawing Abstract Bean implements Drawing { private Object lock = new J Panel get Tree Lock Event Listener List listener List = new Event Listener List private Font Render Context font Render Context Abstract Drawing { } add Drawing Listener Drawing Listener listener { listener List add Drawing Listener listener } remove Drawing Listener Drawing Listener listener { listener List remove Drawing Listener listener } add Undoable Edit Listener Undoable Edit Listener { listener List add Undoable Edit Listener } remove Undoable Edit Listener Undoable Edit Listener { listener List remove Undoable Edit Listener } add All Collection< Figure> figures { Composite Edit edit = new Composite Edit Figuren hinzuf\u00fcgen fire Undoable Edit Happened edit for Figure figures { add } fire Undoable Edit Happened edit } clear { remove All get Figures } get Figure Count { get Figures size } remove All Collection< Figure> to Be Removed { Composite Edit edit = new Composite Edit Figuren entfernen fire Undoable Edit Happened edit for Figure new Array List< Figure> to Be Removed { remove } fire Undoable Edit Happened edit } basic Add All Collection< Figure> figures { for Figure figures { basic Add } } basic Remove All Collection< Figure> to Be Orphaned { for Figure new Array List< Figure> to Be Orphaned { basic Remove } } add Figure figure { index = get Figure Count basic Add index figure figure add Notify this fire Figure Added figure fire Undoable Edit Happened new Abstract Undoable Edit { String get Presentation Name { Figur einf\u00fcgen } undo Cannot Undo Exception { super undo basic Remove figure figure remove Notify Abstract Drawing this fire Figure Removed figure } redo Cannot Undo Exception { super redo basic Add index figure figure add Notify Abstract Drawing this fire Figure Added figure } } } basic Add Figure figure { basic Add get Figure Count figure } remove Figure figure { if contains figure { index = index Of figure basic Remove figure figure remove Notify this fire Figure Removed figure fire Undoable Edit Happened new Abstract Undoable Edit { String get Presentation Name { Figur entfernen } redo Cannot Undo Exception { super redo basic Remove figure figure remove Notify Abstract Drawing this fire Figure Removed figure } undo Cannot Undo Exception { super undo basic Add index figure figure add Notify Abstract Drawing this fire Figure Added figure } } } else { fire Area Invalidated figure get Draw Bounds } } index Of Figure figure fire Area Invalidated Rectangle2 dirty Region { Drawing Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Drawing Listener { if event == event = new Drawing Event this dirty Region Drawing Listener listeners i+1 area Invalidated event } } } fire Undoable Edit Happened Undoable Edit edit { Undoable Edit Event event = if listener List get Listener Count > 0 { Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if event == event = new Undoable Edit Event this edit if listeners == Undoable Edit Listener { Undoable Edit Listener listeners i+1 undoable Edit Happened event } } } } fire Figure Added Figure { Drawing Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Drawing Listener { if event == event = new Drawing Event this get Draw Bounds Drawing Listener listeners i+1 figure Added event } } } fire Figure Removed Figure { Drawing Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Drawing Listener { if event == event = new Drawing Event this get Draw Bounds Drawing Listener listeners i+1 figure Removed event } } } Font Render Context get Font Render Context { font Render Context } set Font Render Context Font Render Context frc { font Render Context = frc } read Dom Input I O Exception { open Element figures for i=0 < get Element Count i++ { Figure add = Figure read Object } close Element } write Dom Output out I O Exception { out open Element figures for Figure get Figures { out write Object } out close Element } Object get Lock { lock } } 