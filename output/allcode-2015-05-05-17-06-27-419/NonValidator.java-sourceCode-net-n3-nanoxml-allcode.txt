net n3 nanoxml import Reader import I O Exception import String Reader import util Enumeration import util Hashtable import util Properties import util Stack Non Validator implements I Xml Validator { I Xml Entity Resolver Entity Resolver Hashtable attribute Default Values Stack current Elements Non Validator { this attribute Default Values = new Hashtable this current Elements = new Stack this Entity Resolver = new Xml Entity Resolver } finalize Throwable { this Entity Resolver = this attribute Default Values clear this attribute Default Values = this current Elements clear this current Elements = super finalize } set Parameter Entity Resolver I Xml Entity Resolver resolver { this Entity Resolver = resolver } I Xml Entity Resolver get Parameter Entity Resolver { this Entity Resolver } parse T String publicid I Xml Reader reader I Xml Entity Resolver entity Resolver external Exception { Xml Util skip Whitespace reader orig Level = reader get Stream Level for { String = Xml Util read reader '%' char ch = char At 0 if ch == '%' { Xml Util process Entity reader this Entity Resolver continue } else if ch == '<' { this process Element reader entity Resolver } else if ch == ' ' { } else { Xml Util error Invalid Input reader get Systemid reader get Line Nr } { ch = reader read if external reader get Stream Level < orig Level { reader unread ch } } while ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' reader unread ch } } process Element I Xml Reader reader I Xml Entity Resolver entity Resolver Exception { String = Xml Util read reader '%' char ch = char At 0 if ch != '!' { Xml Util skip Tag reader } = Xml Util read reader '%' ch = char At 0 switch ch { case '-' Xml Util skip Comment reader break case ' ' this process Conditional Section reader entity Resolver break case ' E' this process Entity reader entity Resolver break case ' A' this process Att List reader entity Resolver break default Xml Util skip Tag reader } } process Conditional Section I Xml Reader reader I Xml Entity Resolver entity Resolver Exception { Xml Util skip Whitespace reader String = Xml Util read reader '%' char ch = char At 0 if ch != ' I' { Xml Util skip Tag reader } = Xml Util read reader '%' ch = char At 0 switch ch { case ' G' this process Ignore Section reader entity Resolver case ' N' break default Xml Util skip Tag reader } if ! Xml Util check Literal reader C L U E { Xml Util skip Tag reader } Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 if ch != ' ' { Xml Util skip Tag reader } Reader subreader = new C A T A Reader reader String Buffer buf = new String Buffer 1024 for { ch2 = subreader read if ch2 < 0 { break } buf append char ch2 } subreader close reader start New Stream new String Reader buf to String } process Ignore Section I Xml Reader reader I Xml Entity Resolver entity Resolver Exception { if ! Xml Util check Literal reader N O R E { Xml Util skip Tag reader } Xml Util skip Whitespace reader String = Xml Util read reader '%' char ch = char At 0 if ch != ' ' { Xml Util skip Tag reader } Reader subreader = new C A T A Reader reader subreader close } process Att List I Xml Reader reader I Xml Entity Resolver entity Resolver Exception { if ! Xml Util check Literal reader T T L I S T { Xml Util skip Tag reader } Xml Util skip Whitespace reader String = Xml Util read reader '%' char ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } reader unread ch String element Name = Xml Util scan Identifier reader Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } Properties props = new Properties while ch != '>' { reader unread ch String att Name = Xml Util scan Identifier reader Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } if ch == ' ' { while ch != ' ' { = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } } } else { reader unread ch Xml Util scan Identifier reader } Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } if ch == '#' { = Xml Util scan Identifier reader Xml Util skip Whitespace reader if ! equals F I X E { Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } continue } } else { reader unread ch } String value = Xml Util scan String reader '%' this Entity Resolver props put att Name value Xml Util skip Whitespace reader = Xml Util read reader '%' ch = char At 0 while ch == '%' { Xml Util process Entity reader this Entity Resolver = Xml Util read reader '%' ch = char At 0 } } if ! props Empty { this attribute Default Values put element Name props } } process Entity I Xml Reader reader I Xml Entity Resolver entity Resolver Exception { if ! Xml Util check Literal reader N T I T Y { Xml Util skip Tag reader } Xml Util skip Whitespace reader char ch = Xml Util read Char reader '\0' if ch == '%' { Xml Util skip Whitespace reader entity Resolver = this Entity Resolver } else { reader unread ch } String key = Xml Util scan Identifier reader Xml Util skip Whitespace reader ch = Xml Util read Char reader '%' String systemid = String publicid = switch ch { case ' P' if ! Xml Util check Literal reader U B L I C { Xml Util skip Tag reader } Xml Util skip Whitespace reader publicid = Xml Util scan String reader '%' this Entity Resolver Xml Util skip Whitespace reader systemid = Xml Util scan String reader '%' this Entity Resolver Xml Util skip Whitespace reader Xml Util read Char reader '%' break case ' S' if ! Xml Util check Literal reader Y S T E M { Xml Util skip Tag reader } Xml Util skip Whitespace reader systemid = Xml Util scan String reader '%' this Entity Resolver Xml Util skip Whitespace reader Xml Util read Char reader '%' break case ' ' case '\'' reader unread ch String value = Xml Util scan String reader '%' this Entity Resolver entity Resolver add Internal Entity key value Xml Util skip Whitespace reader Xml Util read Char reader '%' break default Xml Util skip Tag reader } if systemid != { entity Resolver add External Entity key publicid systemid } } element Started String String Id line Nr { Properties attribs = Properties this attribute Default Values get if attribs == { attribs = new Properties } else { attribs = Properties attribs clone } this current Elements push attribs } element Ended String String Id line Nr { } element Attributes Processed String Properties extra Attributes String Id line Nr { Properties props = Properties this current Elements pop Enumeration enm = props keys while enm has More Elements { String key = String enm next Element extra Attributes put key props get key } } attribute Added String key String value String Id line Nr { Properties props = Properties this current Elements peek if props contains Key key { props remove key } } P C Data Added String Id line Nr { } } 