org jhotdraw draw import org jhotdraw geom Dimension2 import org jhotdraw geom Geom import org jhotdraw util * import awt * import awt geom * import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output import org jhotdraw xml Dom Storable Bezier Label Locator implements Locator Dom Storable { private relative Position private angle private distance Bezier Label Locator { } Bezier Label Locator relative Position angle distance { this relative Position = relative Position this angle = angle this distance = distance } Point2 locate Figure owner { get Relative Point Bezier Figure owner } Point2 locate Figure owner Figure label { Point2 relative Point = get Relative Label Point Bezier Figure owner label relative Point } Point2 get Relative Point Bezier Figure owner { Point2 point = owner get Point On Path float relative Position 3 Point2 next Point = owner get Point On Path relative Position < 0 5 ? float relative Position + 0 1f float relative Position - 0 1f 3 dir = Math atan2 next Point - point next Point - point if relative Position >= 0 5 { dir += Math P I } alpha = dir + angle Point2 = new Point2 point + distance * Math cos alpha point + distance * Math sin alpha if Na N = point } Point2 get Relative Label Point Bezier Figure owner Figure label { Point2 point = owner get Point On Path float relative Position 3 if point == { new Point2 0 0 } Point2 next Point = owner get Point On Path relative Position < 0 5 ? float relative Position + 0 1f float relative Position - 0 1f 3 dir = Math atan2 next Point - point next Point - point if relative Position >= 0 5 { dir += Math P I } alpha = dir + angle Point2 = new Point2 point + distance * Math cos alpha point + distance * Math sin alpha if Na N = point Dimension2 label Dim = label get Preferred Size if relative Position == 0 5 >= point - distance / 2 <= point + distance / 2 { if >= point { new Point2 - label Dim width / 2 } else { new Point2 - label Dim width / 2 - label Dim height } } else { if >= point { if >= point { new Point2 } else { new Point2 - label Dim height } } else { if >= point { new Point2 - label Dim width } else { new Point2 - label Dim width - label Dim height } } } } read Dom Input { relative Position = get Attribute relative Position 0d angle = get Attribute angle 0d distance = get Attribute distance 0 } write Dom Output out { out add Attribute relative Position relative Position out add Attribute angle angle out add Attribute distance distance } } 