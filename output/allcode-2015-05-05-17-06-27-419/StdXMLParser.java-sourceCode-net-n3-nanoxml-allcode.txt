net n3 nanoxml import I O Exception import Char Array Reader import Reader import util Enumeration import util Properties import util Vector Std Xml Parser implements I Xml Parser { private I Xml Builder builder private I Xml Reader reader private I Xml Entity Resolver entity Resolver private I Xml Validator validator Std Xml Parser { this builder = this validator = this reader = this entity Resolver = new Xml Entity Resolver } finalize Throwable { this builder = this reader = this entity Resolver = this validator = super finalize } set Builder I Xml Builder builder { this builder = builder } I Xml Builder get Builder { this builder } set Validator I Xml Validator validator { this validator = validator } I Xml Validator get Validator { this validator } set Resolver I Xml Entity Resolver resolver { this entity Resolver = resolver } I Xml Entity Resolver get Resolver { this entity Resolver } set Reader I Xml Reader reader { this reader = reader } I Xml Reader get Reader { this reader } Object parse Xml Exception { try { this builder start Building this reader get Systemid this reader get Line Nr this scan Data this builder get Result } catch Xml Exception { } catch Exception { Xml Exception error = new Xml Exception error init Cause error } } scan Data Exception { while ! this reader E O F this builder get Result == { String = Xml Util read this reader ' ' char ch = char At 0 if ch == ' ' { Xml Util process Entity this reader this entity Resolver continue } switch ch { case '<' this scan Some Tag new Properties break case ' ' case '\t' case '\r' case '\n' break default Xml Util error Invalid Input reader get Systemid reader get Line Nr ` + ch + ' 0x + Integer to Hex String ch + ' ' } } } scan Some Tag allow C A T A String default Namespace Properties namespaces Exception { String = Xml Util read this reader ' ' char ch = char At 0 if ch == ' ' { Xml Util error Unexpected Entity reader get Systemid reader get Line Nr } switch ch { case '?' this process P I break case '!' this process Special Tag allow C A T A break default this reader unread ch this process Element default Namespace namespaces } } process P I Exception { Xml Util skip Whitespace this reader String target = Xml Util scan Identifier this reader Xml Util skip Whitespace this reader Reader reader = new P I Reader this reader if ! target equals Ignore Case xml { this builder new Processing Instruction target reader } reader close } process Special Tag allow C A T A Exception { String = Xml Util read this reader ' ' char ch = char At 0 if ch == ' ' { Xml Util error Unexpected Entity reader get Systemid reader get Line Nr } switch ch { case ' ' if allow C A T A { this process C A T A } else { Xml Util error Unexpected C A T A reader get Systemid reader get Line Nr } case ' D' this process Doc Type case '-' Xml Util skip Comment this reader } } process C A T A Exception { if ! Xml Util check Literal this reader C A T A { Xml Util error Expected Input reader get Systemid reader get Line Nr <! C A T A } this validator P C Data Added this reader get Systemid this reader get Line Nr Reader reader = new C A T A Reader this reader this builder add P C Data reader this reader get Systemid this reader get Line Nr reader close } process Doc Type Exception { if ! Xml Util check Literal this reader O C T Y P E { Xml Util error Expected Input reader get Systemid reader get Line Nr <! O C T Y P E } Xml Util skip Whitespace this reader String systemid = String Buffer publicid = new String Buffer String root Element = Xml Util scan Identifier this reader Xml Util skip Whitespace this reader char ch = this reader read if ch == ' P' { systemid = Xml Util scan Publicid publicid reader Xml Util skip Whitespace this reader ch = this reader read } else if ch == ' S' { systemid = Xml Util scan Systemid reader Xml Util skip Whitespace this reader ch = this reader read } if ch == ' ' { this validator parse T publicid to String this reader this entity Resolver Xml Util skip Whitespace this reader ch = this reader read } if ch != '>' { Xml Util error Expected Input reader get Systemid reader get Line Nr `>' } if { if systemid != { Reader reader = this reader open Stream publicid to String systemid this reader start New Stream reader this reader set Systemid systemid this reader set Publicid publicid to String this validator parse T publicid to String this reader this entity Resolver } } } process Element String default Namespace Properties namespaces Exception { String full Name = Xml Util scan Identifier this reader String = full Name Xml Util skip Whitespace this reader String prefix = colon Index = index Of ' ' if colon Index > 0 { prefix = substring 0 colon Index = substring colon Index + 1 } Vector attr Names = new Vector Vector attr Values = new Vector Vector attr Types = new Vector this validator element Started full Name this reader get Systemid this reader get Line Nr char ch for { ch = this reader read if ch == '/' || ch == '>' { break } this reader unread ch this process Attribute attr Names attr Values attr Types Xml Util skip Whitespace this reader } Properties extra Attributes = new Properties this validator element Attributes Processed full Name extra Attributes this reader get Systemid this reader get Line Nr Enumeration enm = extra Attributes keys while enm has More Elements { String key = String enm next Element String value = extra Attributes get Property key attr Names add Element key attr Values add Element value attr Types add Element C A T A } for = 0 < attr Names size i++ { String key = String attr Names element At String value = String attr Values element At String type = String attr Types element At if key equals xmlns { default Namespace = value } else if key starts With xmlns { namespaces put key substring 6 value } } if prefix == { this builder start Element prefix default Namespace this reader get Systemid this reader get Line Nr } else { this builder start Element prefix namespaces get Property prefix this reader get Systemid this reader get Line Nr } for = 0 < attr Names size i++ { String key = String attr Names element At if key starts With xmlns { continue } String value = String attr Values element At String type = String attr Types element At colon Index = key index Of ' ' if colon Index > 0 { String att Prefix = key substring 0 colon Index key = key substring colon Index + 1 this builder add Attribute key att Prefix namespaces get Property att Prefix value type } else { this builder add Attribute key value type } } if prefix == { this builder element Attributes Processed prefix default Namespace } else { this builder element Attributes Processed prefix namespaces get Property prefix } if ch == '/' { if this reader read != '>' { Xml Util error Expected Input reader get Systemid reader get Line Nr `>' } this validator element Ended this reader get Systemid this reader get Line Nr if prefix == { this builder Element prefix default Namespace } else { this builder Element prefix namespaces get Property prefix } } String Buffer buffer = new String Buffer 16 for { buffer set Length 0 String for { Xml Util skip Whitespace this reader buffer = Xml Util read this reader ' ' if char At 0 == ' ' char At 1 != '#' { Xml Util process Entity this reader this entity Resolver } else { break } } if char At 0 == '<' { = Xml Util read this reader '\0' if char At 0 == '/' { Xml Util skip Whitespace this reader = Xml Util scan Identifier this reader if ! equals full Name { Xml Util error Wrong Closing Tag reader get Systemid reader get Line Nr } Xml Util skip Whitespace this reader if this reader read != '>' { Xml Util error Closing Tag Not Empty reader get Systemid reader get Line Nr } this validator element Ended full Name this reader get Systemid this reader get Line Nr if prefix == { this builder Element prefix default Namespace } else { this builder Element prefix namespaces get Property prefix } break } else { this reader unread char At 0 this scan Some Tag default Namespace Properties namespaces clone } } else { if char At 0 == ' ' { ch = Xml Util process Char Literal buffer append ch } else { reader unread char At 0 } this validator P C Data Added this reader get Systemid this reader get Line Nr Reader = new Content Reader this reader this entity Resolver buffer to String this builder add P C Data this reader get Systemid this reader get Line Nr close } } } process Attribute Vector attr Names Vector attr Values Vector attr Types Exception { String key = Xml Util scan Identifier this reader Xml Util skip Whitespace this reader if ! Xml Util read this reader ' ' equals = { Xml Util error Expected Input reader get Systemid reader get Line Nr `=' } Xml Util skip Whitespace this reader String value = Xml Util scan String this reader ' ' this entity Resolver attr Names add Element key attr Values add Element value attr Types add Element C A T A this validator attribute Added key value this reader get Systemid this reader get Line Nr } } 