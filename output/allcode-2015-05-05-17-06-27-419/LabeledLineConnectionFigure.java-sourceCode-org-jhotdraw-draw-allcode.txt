org jhotdraw draw import org jhotdraw util * import util * import awt * import awt geom * import javax swing event * import javax swing undo * Labeled Line Connection Figure Line Connection Figure implements Composite Figure { private Layouter layouter private Array List< Figure> children = new Array List private Rectangle2 draw Bounds private Child Handler child Handler = new Child Handler this private Child Handler implements Figure Listener Undoable Edit Listener { private Labeled Line Connection Figure owner private Child Handler Labeled Line Connection Figure owner { this owner = owner } figure Request Remove Figure Event { owner remove get Figure } figure Removed Figure Event evt { } figure Changed Figure Event { if ! owner Changing { owner will Change owner fire Figure Changed owner changed } } figure Added Figure Event { } figure Attribute Changed Figure Event { } figure Area Invalidated Figure Event { if ! owner Changing { owner fire Area Invalidated get Invalidated Area } } undoable Edit Happened Undoable Edit Event { owner fire Undoable Edit Happened get Edit } } Labeled Line Connection Figure { } draw Figure Graphics2 { super draw Figure for Figure child children { if child Visible { child draw } } } basic Transform Affine Transform tx { super basic Transform tx for Figure children { basic Transform tx } invalidate Bounds } basic Set Bounds Point2 anchor Point2 { super basic Set Bounds anchor invalidate } Rectangle2 get Bounds { super get Bounds } Rectangle2 get Figure Draw Bounds { if draw Bounds == { draw Bounds = super get Figure Draw Bounds for Figure child get Children Front To Back { if child Visible { Rectangle2 child Bounds = child get Draw Bounds if ! child Bounds Empty { draw Bounds add child Bounds } } } } Rectangle2 draw Bounds clone } contains Point2 { if get Draw Bounds contains { for Figure child get Children Front To Back { if child Visible child contains } super contains } } invalidate Bounds { draw Bounds = } set Attribute Attribute Key key Object new Value { will Change super set Attribute key new Value if Attribute Enabled key { if children != { for Figure child children { child set Attribute key new Value } } } changed } Figure find Figure Inside Point2 { if get Draw Bounds contains { Figure found = for Figure child get Children Front To Back { if child Visible { found = child find Figure Inside if found != { found } } } } } update Connection { super update Connection layout } util List< Figure> get Children { Collections unmodifiable List children } get Child Count { children size } Figure get Child index { children get index } set index Figure child { children set index child } util List< Figure> get Children Front To Back { children == ? new Linked List< Figure> new Reversed List< Figure> children } add Figure figure { basic Add figure if get Drawing != { figure add Notify get Drawing } } add index Figure figure { basic Add index figure if get Drawing != { figure add Notify get Drawing } } basic Add Figure figure { basic Add children size figure } basic Add index Figure figure { children add index figure figure add Figure Listener child Handler figure add Undoable Edit Listener child Handler invalidate } remove Figure figure { index = children index Of figure if index == -1 { } else { will Change basic Remove Child index if get Drawing != { figure remove Notify get Drawing } changed } } Figure remove Child index { will Change Figure figure = basic Remove Child index if get Drawing != { figure remove Notify get Drawing } changed figure } basic Remove Figure figure { index = children index Of figure if index == -1 { } else { basic Remove Child index } } Figure basic Remove Child index { Figure figure = children remove index figure remove Figure Listener child Handler figure remove Undoable Edit Listener child Handler figure } remove All Children { will Change while children size > 0 { Figure figure = basic Remove Child children size - 1 if get Drawing != { figure remove Notify get Drawing } } changed } basic Remove All Children { while children size > 0 { basic Remove Child children size - 1 } } Layouter get Layouter { layouter } set Layouter Layouter new Layouter { this layouter = new Layouter } layout { if get Layouter != { Rectangle2 bounds = get Bounds Point2 = new Point2 bounds bounds Rectangle2 = get Layouter layout this invalidate Bounds } } invalidate { super invalidate invalidate Bounds } validate { super validate layout } add Notify Drawing drawing { for Figure child new Linked List< Figure> children { child add Notify drawing } super add Notify drawing } remove Notify Drawing drawing { for Figure child new Linked List< Figure> children { child remove Notify drawing } super remove Notify drawing } Labeled Line Connection Figure clone { Labeled Line Connection Figure that = Labeled Line Connection Figure super clone that child Handler = new Child Handler that that children = new Array List< Figure> for Figure this Child this children { Figure that Child = Figure this Child clone that children add that Child that Child add Figure Listener that child Handler that Child add Undoable Edit Listener that child Handler } that } remap Hash Map< Figure Figure> old To New { super remap old To New for Figure child children { child remap old To New } } } 