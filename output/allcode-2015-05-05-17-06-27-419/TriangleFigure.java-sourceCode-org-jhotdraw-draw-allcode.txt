org jhotdraw draw import awt * import awt geom * import * import util * import javax swing * import org jhotdraw draw Attribute Keys * import org jhotdraw geom * Triangle Figure Attributed Figure { private Rectangle2 rectangle Triangle Figure { this 0 0 0 0 } Triangle Figure Orientation direction { this 0 0 0 0 direction } Triangle Figure width height { this width height Orientation N O R T H } Triangle Figure width height Orientation direction { rectangle = new Rectangle2 width height O R I E N T A T I O N set this direction } Connector find Connector Point2 Connection Figure prototype { new Chop Triangle Connector this } Connector find Compatible Connector Connector Start Connector { new Chop Triangle Connector this } Rectangle2 get Bounds { Rectangle2 bounds = Rectangle2 rectangle clone bounds } draw Fill Graphics2 { Rectangle2 = Rectangle2 rectangle clone Shape triangle = get Bezier Path grow = Attribute Keys get Perpendicular Fill Growth this if grow != 0d { Grow Stroke gs = new Grow Stroke float grow float Attribute Keys get Stroke Total Width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create Stroked Shape triangle } fill triangle } draw Stroke Graphics2 { Shape triangle = get Bezier Path grow = Attribute Keys get Perpendicular Draw Growth this if grow != 0d { Grow Stroke gs = new Grow Stroke float grow float Attribute Keys get Stroke Total Width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create Stroked Shape triangle } draw triangle } Collection< Handle> create Handles detail Level { Linked List< Handle> handles = Linked List< Handle> super create Handles detail Level if detail Level == 0 { handles add new Triangle Rotation Handler this } handles } Bezier Path get Bezier Path { Rectangle2 = Rectangle2 rectangle clone Bezier Path triangle = new Bezier Path switch O R I E N T A T I O N get this { case N O R T H default triangle move To float + width / 2 float triangle line To float + width float + height triangle line To float float + height break case NORTH_EAST triangle move To float float triangle line To float + width float triangle line To float + width float + height break case E A S T triangle move To float float triangle line To float + width float + height / 2d triangle line To float float + height break case SOUTH_EAST triangle move To float + width float triangle line To float + width float + height triangle line To float float + height break case S O U T H triangle move To float + width / 2 float + height triangle line To float float triangle line To float + width float break case SOUTH_WEST triangle move To float + width float + height triangle line To float float + height triangle line To float float break case W E S T triangle move To float float + height / 2 triangle line To float + width float triangle line To float + width float + height break case NORTH_WEST triangle move To float float + height triangle line To float float triangle line To float + width float break } triangle set Closed triangle } contains Point2 { Shape triangle = get Bezier Path grow = Attribute Keys get Perpendicular Hit Growth this if grow != 0d { Grow Stroke gs = new Grow Stroke float grow float Attribute Keys get Stroke Total Width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create Stroked Shape triangle } triangle contains } basic Set Bounds Point2 anchor Point2 { rectangle = Math min anchor rectangle = Math min anchor rectangle width = Math max 0 1 Math - anchor rectangle height = Math max 0 1 Math - anchor } Rectangle2 get Figure Draw Bounds { total Stroke Width = Attribute Keys get Stroke Total Width this width = 0d if STROKE_COLOR get this != { switch STROKE_PLACEMENT get this { case I N Sid E width = 0d break case O U T Sid E if STROKE_JOIN get this == Basic Stroke JOIN_MITER { width = total Stroke Width * STROKE_MITER_LIMIT_FACTOR get this } else { width = total Stroke Width } break case C E N T E R if STROKE_JOIN get this == Basic Stroke JOIN_MITER { width = total Stroke Width / 2d * STROKE_MITER_LIMIT_FACTOR get this } else { width = total Stroke Width / 2d } break } } width++ Rectangle2 = get Bounds Geom grow width width } Point2 chop Point2 { Shape triangle = get Bezier Path grow = Attribute Keys get Perpendicular Hit Growth this if grow != 0d { Grow Stroke gs = new Grow Stroke float grow float Attribute Keys get Stroke Total Width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create Stroked Shape triangle } Geom chop triangle } basic Transform Affine Transform tx { Point2 anchor = get Start Point Point2 = get End Point basic Set Bounds Point2 tx transform anchor anchor Point2 tx transform } Triangle Figure clone { Triangle Figure that = Triangle Figure super clone that rectangle = Rectangle2 this rectangle clone that } restore To Object geometry { Rectangle2 = Rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } Object get Restore Data { rectangle clone } } 