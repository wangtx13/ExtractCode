org jhotdraw draw import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output import org jhotdraw xml Dom Storable import util * import awt * import awt geom * import org jhotdraw geom * Slanted Liner implements Liner Dom Storable { private slant Size Slanted Liner { this 20 } Slanted Liner slant Size { this slant Size = slant Size } Collection< Handle> create Handles Bezier Path path { } lineout Connection Figure figure { Bezier Path path = Line Connection Figure figure get Bezier Path Connector start = figure get Start Connector Connector = figure get End Connector if start == || == || path == { } while path size < 4 { path add 1 new Bezier Path Node 0 0 } while path size < 4 { path remove 1 } Point2 = start find Start figure Point2 = find End figure = figure get Start Point = figure get End Point Rectangle2 sb = start get Bounds Rectangle2 eb = get Bounds path get 0 move To path get path size - 1 move To outcode = sb outcode if outcode == 0 { outcode = Geom outcode sb eb } if outcode Geom OUT_RIGHT != 0 { path get 1 move To + slant Size } else if outcode Geom OUT_LEFT != 0 { path get 1 move To - slant Size } else if outcode Geom OUT_BOTTOM != 0 { path get 1 move To + slant Size } else { path get 1 move To - slant Size } outcode = eb outcode if outcode == 0 { outcode = Geom outcode eb sb } if outcode Geom OUT_RIGHT != 0 { path get 2 move To + slant Size } else if outcode Geom OUT_LEFT != 0 { path get 2 move To - slant Size } else if outcode Geom OUT_BOTTOM != 0 { path get 2 move To + slant Size } else { path get 2 move To - slant Size } path invalidate Path } read Dom Input { slant Size = get Attribute slant 20d } write Dom Output out { out add Attribute slant slant Size } Liner clone { try { Liner super clone } catch Clone Not Supported Exception { Internal Error error = new Internal Error get Message error init Cause error } } } 