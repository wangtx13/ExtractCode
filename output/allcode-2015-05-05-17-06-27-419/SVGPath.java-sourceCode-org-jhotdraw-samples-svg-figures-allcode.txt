org jhotdraw samples svg figures import awt * import awt event * import awt geom * import * import util * import javax swing * import org jhotdraw draw * import org jhotdraw draw action * import org jhotdraw geom * import org jhotdraw samples svg * import org jhotdraw util * import org jhotdraw xml * import org jhotdraw draw Attribute Keys * S V G Path Abstract Attributed Composite Figure implements S V G Figure { private General Path path S V G Path { add new Bezier Figure S V G Util set Defaults this } draw Figure Graphics2 { validate Path if Attribute Keys FILL_COLOR get this != { set Color Attribute Keys FILL_COLOR get this draw Fill } if STROKE_COLOR get this != { set Stroke Attribute Keys get Stroke this set Color STROKE_COLOR get this draw Stroke } if Connectors Visible { draw Connectors } } draw Fill Graphics2 { if get Children size > 0 { fill path } } draw Stroke Graphics2 { draw path } invalidate { super invalidate invalidate Path } validate { validate Path super validate } validate Path { if path == { path = new General Path path set Winding Rule WINDING_RULE get this == Winding Rule EVEN_ODD ? General Path WIND_EVEN_ODD General Path WIND_NON_ZERO for Figure child get Children { Bezier Figure = Bezier Figure child path append get Bezier Path } } } invalidate Path { path = } @ Override write Dom Output out I O Exception { write Points out write Attributes out } write Points Dom Output out { String Builder buf = new String Builder for Figure child get Children { Bezier Figure = Bezier Figure child buf append S V G Util to Path Data get Bezier Path } out add Attribute buf to String } write Attributes Dom Output out I O Exception { S V G Util write Attributes this out } @ Override read Dom Input I O Exception { read Points read Attributes Affine Transform tx = S V G Util get Transform transform basic Transform tx } read Points Dom Input I O Exception { remove All Children if get Tag Name equals polyline { Bezier Path = new Bezier Path String points = get Attribute points String Tokenizer tt = new String Tokenizer points while tt has More Tokens { add new Bezier Path Node value Of tt next Token value Of tt next Token } Bezier Figure child = new Bezier Figure child basic Set Bezier Path basic Add child } else if get Tag Name equals polygon { Bezier Path = new Bezier Path set Closed String points = get Attribute points String Tokenizer tt = new String Tokenizer points while tt has More Tokens { add new Bezier Path Node value Of tt next Token value Of tt next Token } Bezier Figure child = new Bezier Figure child basic Set Bezier Path basic Add child } else { util List< Bezier Path> paths = S V G Util get Path for Bezier Path paths { Bezier Figure child = new Bezier Figure child basic Set Bezier Path basic Add child } if paths size == 0 { Bezier Figure child = new Bezier Figure basic Add child } } } read Attributes Dom Input I O Exception { S V G Util read Attributes this } basic Transform Affine Transform tx { super basic Transform tx invalidate Path } Empty { for Figure child get Children { Bezier Figure = Bezier Figure child if get Point Count > 0 { } } } @ Override Linked List< Handle> create Handles detail Level { Linked List< Handle> handles if detail Level == 0 { handles = Linked List< Handle> super create Handles detail Level handles add new Rotate Handle this } else { handles = new Linked List< Handle> for Figure child get Children { handles add All child create Handles detail Level } } handles } @ Override Collection< Action> get Actions Point2 { Resource Bundle Util labels = Resource Bundle Util get L A F Bundle org jhotdraw samples svg Labels Linked List< Action> actions = new Linked List< Action> actions add new Abstract Action labels get String close Path { action Performed Action Event evt { for Figure child get Children { Bezier Figure = Bezier Figure child set Closed } } } actions add new Abstract Action labels get String open Path { action Performed Action Event evt { for Figure child get Children { Bezier Figure = Bezier Figure child set Closed } } } actions add new Abstract Action labels get String winding Even Odd { action Performed Action Event evt { WINDING_RULE set S V G Path this Winding Rule EVEN_ODD } } actions add new Abstract Action labels get String winding Non Zero { action Performed Action Event evt { WINDING_RULE set S V G Path this Winding Rule NON_ZERO } } actions } } 