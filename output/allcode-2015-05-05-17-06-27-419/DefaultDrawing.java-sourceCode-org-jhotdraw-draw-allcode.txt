org jhotdraw draw import org jhotdraw util Reversed List import awt * import awt geom * import javax swing * import javax swing event * import javax swing undo * import org jhotdraw util * import util * Default Drawing Abstract Drawing implements Figure Listener Undoable Edit Listener { private Array List< Figure> figures = new Array List< Figure> private needs Sorting = Default Drawing { } index Of Figure figure { figures index Of figure } basic Add index Figure figure { figures add index figure figure add Figure Listener this figure add Undoable Edit Listener this invalidate Sort Order } basic Remove Figure figure { figures remove figure figure remove Figure Listener this figure remove Undoable Edit Listener this invalidate Sort Order } draw Graphics2 { synchronized get Lock { ensure Sorted Array List< Figure> to Draw = new Array List< Figure> figures size Rectangle clip Rect = get Clip Bounds for Figure figures { if get Draw Bounds intersects clip Rect { to Draw add } } draw to Draw } } draw Graphics2 Collection< Figure> figures { for Figure figures { if Visible { draw } } } Collection< Figure> sort Collection< Figure> { Hash Set< Figure> unsorted = new Hash Set< Figure> unsorted add All Array List< Figure> sorted = new Array List< Figure> size for Figure figures { if unsorted contains { sorted add unsorted remove } } for Figure { if unsorted contains { sorted add unsorted remove } } sorted } figure Area Invalidated Figure Event { fire Area Invalidated get Invalidated Area } figure Changed Figure Event { invalidate Sort Order fire Area Invalidated get Invalidated Area } figure Added Figure Event { } figure Removed Figure Event { } figure Request Remove Figure Event { remove get Figure } Figure find Figure Point2 { for Figure get Figures Front To Back { if Visible contains { } } } Figure find Figure Except Point2 Figure ignore { for Figure get Figures Front To Back { if != ignore Visible contains { } } } Figure find Figure Except Point2 Collection< Figure> ignore { for Figure get Figures Front To Back { if ! ignore contains Visible contains { } } } Collection< Figure> find Figures Rectangle2 bounds { Array List< Figure> intersection = new Array List< Figure> for Figure figures { if Visible get Bounds intersects bounds { intersection add } } intersection } Collection< Figure> find Figures Within Rectangle2 bounds { Array List< Figure> contained = new Array List< Figure> for Figure figures { if Visible bounds contains get Bounds { contained add } } contained } Collection< Figure> get Figures { Collections unmodifiable Collection figures } Figure find Figure Inside Point2 { Figure = find Figure == ? find Figure Inside } util List< Figure> get Figures Front To Back { ensure Sorted new Reversed List< Figure> figures } bring To Front Figure figure { if figures remove figure { figures add figure invalidate Sort Order fire Area Invalidated figure get Draw Bounds } } send To Back Figure figure { if figures remove figure { figures add 0 figure invalidate Sort Order fire Area Invalidated figure get Draw Bounds } } undoable Edit Happened Undoable Edit Event { fire Undoable Edit Happened get Edit } figure Attribute Changed Figure Event { } contains Figure { figures contains } private invalidate Sort Order { needs Sorting = } private ensure Sorted { if needs Sorting { Collections sort figures Figure Layer Comparator I N S T A N C E needs Sorting = } } } 