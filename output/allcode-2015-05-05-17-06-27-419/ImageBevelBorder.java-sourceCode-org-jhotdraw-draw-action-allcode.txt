org jhotdraw draw action import awt * import javax swing * import javax swing border * import awt image * import javax swing plaf basic * Image Bevel Border implements Border { private V E R B O S E = private Buffered Image image private Insets border Insets private Insets image Insets private fill Content Area Image Bevel Border Image img Insets border Insets { this img border Insets border Insets } Image Bevel Border Image img Insets image Insets Insets border Insets { this img image Insets border Insets } Image Bevel Border Image img Insets image Insets Insets border Insets fill Content Area { if img instanceof Buffered Image { this image = Buffered Image img } else { Frame = new Frame Media Tracker = new Media Tracker add Image img 0 try { wait For All } catch Interrupted Exception {} image = new Buffered Image img get Width img get Height Buffered Image TYPE_INT_ARGB Graphics2 img Graphics = image create Graphics img Graphics draw Image img 0 0 img Graphics dispose dispose } this image Insets = image Insets this border Insets = border Insets this fill Content Area = fill Content Area } Border Opaque { } Insets get Border Insets Component { Insets border Insets clone } paint Border Component Graphics gr width height { if image == Graphics2 = Graphics2 gr top = image Insets top left = image Insets left bottom = image Insets bottom right = image Insets right img Width = image get Width img Height = image get Height if fill Content Area { if width == img Width height == img Height { draw Image image } } if width == img Width { left = img Width right = 0 } if height == img Height { top = img Height bottom = 0 } if width < left + right { left = Math min left width / 2 right = width - left } if height < top + bottom { top = Math min top height / 2 bottom = height - top } if top > 0 left > 0 { draw Image image + left + top 0 0 left top } if top > 0 right > 0 { draw Image image + width - right + width + top img Width - right 0 img Width top } if bottom > 0 left > 0 { draw Image image + height - bottom + left + height 0 img Height - bottom left img Height } if bottom > 0 right > 0 { draw Image image + width - right + height - bottom + width + height img Width - right img Height - bottom img Width img Height } Buffered Image sub Img = Texture Paint paint if top > 0 left + right < width { sub Img = image get Subimage left 0 img Width - right - left top paint = new Texture Paint sub Img new Rectangle x+left img Width - left - right top set Paint paint fill Rect x+left width - left - right top } if bottom > 0 left + right < width { sub Img = image get Subimage left img Height - bottom img Width - right - left bottom paint = new Texture Paint sub Img new Rectangle x+left + height - bottom img Width - left - right bottom set Paint paint fill Rect x+left + height - bottom width - left - right bottom } if left > 0 top + bottom < height { sub Img = image get Subimage 0 top left img Height - top - bottom paint = new Texture Paint sub Img new Rectangle y+top left img Height - top - bottom set Paint paint fill Rect y+top left height - top - bottom } if right > 0 top + bottom < height { sub Img = image get Subimage img Width - right top right img Height - top - bottom paint = new Texture Paint sub Img new Rectangle x+width-right + top right img Height - top - bottom set Paint paint fill Rect x+width-right + top right height - top - bottom } if fill Content Area { set Color Color yellow if left + right < width top + bottom < height { sub Img = image get Subimage left top img Width - right - left img Height - top - bottom paint = new Texture Paint sub Img new Rectangle + left + top img Width - right - left img Height - top - bottom set Paint paint fill Rect x+left + top width - right - left height - top - bottom } } } } 