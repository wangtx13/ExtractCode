org jhotdraw xml import util * import * import awt * import nanoxml * Nano Xml Lite Dom Input implements Dom Input { private Hash Map< String Object> idobjects = new Hash Map< String Object> private Xml Element document private Xml Element current private Dom Factory factory private Stack< Xml Element> stack = new Stack< Xml Element> Nano Xml Lite Dom Input Dom Factory factory Input Stream I O Exception { this factory new Input Stream Reader U T F8 } Nano Xml Lite Dom Input Dom Factory factory Reader I O Exception { this factory = factory Hash Map entities = new Hash Map current = new Xml Element entities current parse From Reader document = new Xml Element entities document add Child current current = document } String get Tag Name { current get Name } String get Attribute String String default Value { String value = String current get Attribute value == || value length == 0 ? default Value value } String get Text { get Text } String get Text String default Value { String value = current get Content value == ? default Value value } util List< String> get Inherited Attribute String { Linked List< String> values = new Linked List< String> for Xml Element node stack { String value = String node get Attribute values add value } String value = String current get Attribute values add value values } get Attribute String default Value { String value = String current get Attribute value == || value length == 0 ? default Value Long decode value Value } get Attribute String default Value { String value = String current get Attribute value == || value length == 0 ? default Value parse value } get Attribute String default Value { String value = String current get Attribute value == || value length == 0 ? default Value Boolean value Of value Value } get Element Count { current count Children } get Element Count String tag Name { count = 0 Array List list = current get Children for i=0 < list size i++ { Xml Element node = Xml Element list get if node get Name equals tag Name { count++ } } count } open Element index { stack push current Array List list = current get Children current = Xml Element list get index } open Element String tag Name { Array List list = current get Children for i=0 < list size i++ { Xml Element node = Xml Element list get if node get Name equals tag Name { stack push current current = node } } new Illegal Argument Exception no such element +tag Name } open Element String tag Name index { count = 0 Array List list = current get Children for i=0 < list size i++ { Xml Element node = Xml Element list get if node get Name equals tag Name { if count++ == index { stack push current current = node } } } new Illegal Argument Exception no such element +tag Name+ index +index } close Element { current = Xml Element stack pop } Object read Object I O Exception { read Object 0 } Object read Object index I O Exception { open Element index Object String tag Name = get Tag Name if tag Name equals { = } else if tag Name equals { = get Text } else if tag Name equals { = Integer decode get Text } else if tag Name equals long { = Long decode get Text } else if tag Name equals float { = new Float Float parse Float get Text } else if tag Name equals { = new parse get Text } else if tag Name equals { = Boolean value Of get Text } else if tag Name equals color { = new Color get Attribute rgba 0xff } else if tag Name equals Array { = new get Element Count for i=0 < length i++ { = Integer read Object Value } = } else if tag Name equals float Array { float = new float get Element Count for i=0 < length i++ { = Float read Object float Value } = } else if tag Name equals Array { = new get Element Count for i=0 < length i++ { = read Object Value } = } else if tag Name equals font { = new Font get Attribute Dialog get Attribute style 0 get Attribute size 0 } else if tag Name equals enum { = factory create Enum get Attribute type String get Text } else { String ref = get Attribute ref String = get Attribute ref if == { = factory create get Tag Name } else if idobjects contains Key { = idobjects get } else { = factory create get Tag Name idobjects put } if ref == { if instanceof Dom Storable { Dom Storable read this } } } close Element } } 