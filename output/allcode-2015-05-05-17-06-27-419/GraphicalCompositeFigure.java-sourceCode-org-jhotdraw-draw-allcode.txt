org jhotdraw draw import I O Exception import org jhotdraw util * import awt * import awt geom * import util * import javax swing undo * import javax swing event * import org jhotdraw draw Attribute Keys * import org jhotdraw geom * import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output Graphical Composite Figure Abstract Composite Figure { Hash Map< Attribute Key Object> attributes = new Hash Map< Attribute Key Object> private Hash Set< Attribute Key> forbidden Attributes private Figure presentation Figure private Presentation Figure Handler presentation Figure Handler = new Presentation Figure Handler this private Presentation Figure Handler implements Figure Listener Undoable Edit Listener { private Graphical Composite Figure owner private Presentation Figure Handler Graphical Composite Figure owner { this owner = owner } figure Request Remove Figure Event { owner remove get Figure } figure Removed Figure Event evt { } figure Changed Figure Event { if ! owner Changing { owner will Change owner fire Figure Changed owner changed } } figure Added Figure Event { } figure Attribute Changed Figure Event { } figure Area Invalidated Figure Event { if ! owner Changing { owner fire Area Invalidated get Invalidated Area } } undoable Edit Happened Undoable Edit Event { owner fire Undoable Edit Happened get Edit } } Graphical Composite Figure { this } Graphical Composite Figure Figure new Presentation Figure { super set Presentation Figure new Presentation Figure } Rectangle2 get Bounds { if get Presentation Figure == super get Bounds get Presentation Figure get Bounds } contains Point2 { if get Presentation Figure != { get Presentation Figure contains } else { super contains } } add Notify Drawing drawing { super add Notify drawing if get Presentation Figure != { get Presentation Figure add Notify drawing } } remove Notify Drawing drawing { super remove Notify drawing if get Presentation Figure != { get Presentation Figure remove Notify drawing } } Rectangle2 get Figure Draw Bounds { Rectangle2 if get Presentation Figure != { Rectangle2 presentation Bounds = get Presentation Figure get Draw Bounds = super get Figure Draw Bounds if Empty { = presentation Bounds } else { add presentation Bounds } } else { = super get Figure Draw Bounds } } basic Set Bounds Point2 anchor Point2 { if get Layouter == { super basic Set Bounds anchor basic Set Presentation Figure Bounds anchor } else { Rectangle2 = get Layouter layout this anchor basic Set Presentation Figure Bounds new Point2 get X get Y new Point2 Math max get Max X Math max get Max Y invalidate } } super Basic Set Bounds Point2 anchor Point2 { super basic Set Bounds anchor } basic Set Presentation Figure Bounds Point2 anchor Point2 { if get Presentation Figure != { get Presentation Figure basic Set Bounds anchor } } basic Transform Affine Transform tx { super basic Transform tx if get Presentation Figure != { get Presentation Figure basic Transform tx } } draw Figure Graphics2 { draw Presentation Figure super draw Figure } draw Presentation Figure Graphics2 { if get Presentation Figure != { get Presentation Figure draw } } Collection< Handle> create Handles detail Level { Linked List< Handle> handles = new Linked List< Handle> if detail Level == 0 { Move Handle add Move Handles this handles } handles } set Presentation Figure Figure new Presentation Figure { if this presentation Figure != { this presentation Figure remove Figure Listener presentation Figure Handler this presentation Figure remove Undoable Edit Listener presentation Figure Handler if get Drawing != { this presentation Figure remove Notify get Drawing } } this presentation Figure = new Presentation Figure if this presentation Figure != { this presentation Figure add Figure Listener presentation Figure Handler this presentation Figure add Undoable Edit Listener presentation Figure Handler if get Drawing != { this presentation Figure add Notify get Drawing } } } Figure get Presentation Figure { presentation Figure } Graphical Composite Figure clone { Graphical Composite Figure that = Graphical Composite Figure super clone that presentation Figure = this presentation Figure == ? Figure this presentation Figure clone if that presentation Figure != { that presentation Figure add Figure Listener that presentation Figure Handler that presentation Figure add Undoable Edit Listener that presentation Figure Handler } that } remap Hash Map< Figure Figure> old To New { super remap old To New if presentation Figure != { presentation Figure remap old To New } } set Attribute Attribute Key key Object new Value { if forbidden Attributes == || ! forbidden Attributes contains key { will Change if get Presentation Figure != { get Presentation Figure set Attribute key new Value } super set Attribute key new Value Object old Value = attributes put key new Value fire Attribute Changed key old Value new Value fire Undoable Edit Happened new Attribute Change Edit this key old Value new Value changed } } basic Set Attribute Attribute Key key Object new Value { if forbidden Attributes == || ! forbidden Attributes contains key { if get Presentation Figure != { get Presentation Figure basic Set Attribute key new Value } super basic Set Attribute key new Value Object old Value = attributes put key new Value } } set Attribute Enabled Attribute Key key { if forbidden Attributes == { forbidden Attributes = new Hash Set< Attribute Key> } if { forbidden Attributes remove key } else { forbidden Attributes add key } } Object get Attribute Attribute Key key { if get Presentation Figure != { get Presentation Figure get Attribute key } else { ! attributes contains Key key ? key get Default Value attributes get key } } apply Attributes To Figure that { for Map Entry< Attribute Key Object> entry attributes entry Set { that set Attribute entry get Key entry get Value } } write Attributes Dom Output out I O Exception { Figure prototype = Figure out get Prototype Element Open = for Map Entry< Attribute Key Object> entry attributes entry Set { Attribute Key key = entry get Key if forbidden Attributes == || ! forbidden Attributes contains key { Object prototype Value = key get prototype Object attribute Value = key get this if prototype Value != attribute Value || prototype Value != attribute Value != ! prototype Value equals attribute Value { if ! Element Open { out open Element Element Open = } out open Element key get Key out write Object entry get Value out close Element } } } if Element Open { out close Element } } read Attributes Dom Input I O Exception { if get Element Count > 0 { open Element for i=in get Element Count - 1 >= 0 i-- { open Element String = get Tag Name Object value = read Object Attribute Key key = get Attribute Key if key != key Assignable value { if forbidden Attributes == || ! forbidden Attributes contains key { set Attribute key value } } close Element } close Element } } Attribute Key get Attribute Key String { Attribute Keys supported Attribute Map get } Map< Attribute Key Object> get Attributes { new Hash Map< Attribute Key Object> attributes } Point2 chop Point2 from { Rectangle2 = get Bounds if STROKE_COLOR get this != { grow switch STROKE_PLACEMENT get this { case C E N T E R default grow = Attribute Keys get Stroke Total Width this break case O U T Sid E grow = Attribute Keys get Stroke Total Width this break case I N Sid E grow = 0d break } Geom grow grow grow } Geom angle To Point Geom point To Angle from } } 