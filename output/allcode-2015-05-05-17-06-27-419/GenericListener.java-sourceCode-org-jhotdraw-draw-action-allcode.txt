org jhotdraw draw action import lang reflect * Generic Listener { Object create Class listener Interface String listener Method Name Object target String target Method Name { Method listener Method = get Listener Method listener Interface listener Method Name Method target Method = get Target Method target target Method Name listener Method get Parameter Types if target Method == { target Method = get Target Method target target Method Name new Class 0 } if target Method == { new Runtime Exception no such +target Method Name+ +target get Class } create listener Method target target Method } Object create Method listener Method Object target Method target Method { Invocation Handler handler = new Default Invoker { Object invoke Object proxy Method Object args Throwable { if listener Method equals { if target Method get Parameter Types length == 0 { target Method invoke target new Object 0 } else { target Method invoke target args } } else { super invoke proxy args } } } Class cls = listener Method get Declaring Class Class Loader = cls get Class Loader Proxy new Proxy Instance new Class {cls} handler } private Default Invoker implements Invocation Handler { Object invoke Object proxy Method Object args Throwable { if get Declaring Class == Object { String Name = get Name if Name equals hash Code { proxy Hash Code proxy } else if Name equals equals { proxy Equals proxy args 0 } else if Name equals to String { proxy To String proxy } } Value Of get Return Type } Integer proxy Hash Code Object proxy { new Integer System identity Hash Code proxy } Boolean proxy Equals Object proxy Object other { proxy == other ? Boolean T R U E Boolean F A L S E } String proxy To String Object proxy { proxy get Class get Name + '@' + Integer to Hex String proxy hash Code } private Character char_0 = new Character char 0 private Byte byte_0 = new Byte byte 0 private Object Value Of Class rt { if !rt Primitive { } else if rt == { } else if rt == { Boolean F A L S E } else if rt == char { char_0 } else { byte_0 } } } private Method get Listener Method Class listener Interface String listener Method Name { Method = listener Interface get Methods Method result = for = 0 < length i++ { if listener Method Name equals get Name { if result != { new Runtime Exception ambiguous +m + vs +result } result = } } if result == { new Runtime Exception no such +listener Method Name+ +listener Interface } result } private Method get Target Method Object target String target Method Name Class Types { Method = target get Class get Methods Method result = each Method for = 0 < length i++ { if !target Method Name equals get Name continue each Method Class = get Parameter Types if length != Types length continue each Method for = 0 < length j++ { if !p Assignable From Types continue each Method } if result != { new Runtime Exception ambiguous +m + vs +result } result = } if result == { } Method Result = raise To Public Class result if Result != result = Result result } private Method raise To Public Class Method { Class = get Declaring Class if Modifier Public get Modifiers Modifier Public get Modifiers Class sc = get Superclass if sc != { Method sm = raise To Public Class sc if sm != sm } Class ints = get Interfaces for = 0 < ints length i++ { Method = raise To Public Class ints if != } } private Method raise To Public Class Method Class { try { Method sm = get Method get Name get Parameter Types raise To Public Class sm } catch No Such Method Exception ee { } } private Generic Listener {} } 