org jhotdraw draw import org jhotdraw undo * import org jhotdraw util * import awt * import awt geom * import awt event * import util * import awt dnd * Connection Tool Abstract Tool implements Figure Listener { private Map< Attribute Key Object> attributes private Connector start Connector private Connector Connector private Connector target Connector private Figure target private Connection Figure connection private split Point private Connection Figure edited Connection private Figure created Figure Connection Figure prototype Pressed Connection Tool Connection Figure prototype { this prototype = prototype } Connection Tool Connection Figure prototype Map attributes { this prototype = prototype this attributes = attributes } Connection Tool String prototype Class Name { this prototype Class Name } Connection Tool String prototype Class Name Map< Attribute Key Object> attributes { try { this prototype = Connection Figure Class for Name prototype Class Name new Instance } catch Exception { Internal Error error = new Internal Error Unable to create Connection Figure from +prototype Class Name error init Cause error } this attributes = attributes } Connection Figure get Prototype { prototype } mouse Moved Mouse Event evt { track Connectors evt } mouse Pressed Mouse Event evt { super mouse Pressed evt Pressed = get View clear Selection Point2 ap = view To Drawing anchor if get Target Figure != { get Target Figure set Connectors Visible } set Target Figure find Connection Start ap get Drawing if get Target Figure != { set Start Connector find Connector ap target prototype if get Start Connector != can Connect get Target Figure { Point2 = get Start Connector get Anchor set Connection create Figure get Connection basic Set Bounds get Connection add Figure Listener this set Created Figure get Connection } } } mouse Dragged awt event Mouse Event { Point2 = view To Drawing new Point get X get Y if get Connection != { track Connectors if get Target Connector != { = get Target Connector get Anchor } Connection Figure = get Connection fire Area Invalidated get Draw Bounds will Change basic Set Bounds get Start Point changed fire Area Invalidated get Draw Bounds } else if edited Connection != { edited Connection will Change edited Connection set Point split Point edited Connection changed } } can Connect Figure start { prototype can Connect start } can Connect Figure start Figure { prototype can Connect start } mouse Released Mouse Event { Pressed = Working = Figure = Point2 = view To Drawing new Point get X get Y if get Start Connector != { = find Target get Drawing } if != { set End Connector find Connector prototype if get End Connector != { Composite Edit creation Edit = new Composite Edit Verbindung erstellen get Drawing fire Undoable Edit Happened creation Edit Connection Figure = get Connection will Change set Start Connector get Start Connector set End Connector get End Connector basic Set Bounds get Start Point update Connection changed remove Figure Listener this get Drawing add get Drawing fire Undoable Edit Happened creation Edit } } else if get Connection != { get Drawing remove get Connection } set Connection set Start Connector set End Connector set Created Figure fire Tool Done } activate Drawing Editor editor { super activate editor } deactivate Drawing Editor editor { super deactivate editor if get Target Figure != { get Target Figure set Connectors Visible } } Connection Figure create Figure { Connection Figure = Connection Figure prototype clone get Editor apply Default Attributes To if attributes != { for Map Entry< Attribute Key Object> entry attributes entry Set { set Attribute Attribute Key entry get Key entry get Value } } } Figure find Source Point2 Drawing drawing { find Connectable Figure drawing } Figure find Target Point2 Drawing drawing { Figure target = find Connectable Figure drawing Figure start = get Start Connector get Owner if target != get Connection != can Connect target can Connect start target { target } } Connection Figure find Connection Point2 Drawing drawing { for Figure drawing get Figures Front To Back { if != instanceof Connection Figure { Connection Figure } } } set Connection Connection Figure new Connection { connection = new Connection } Connection Figure get Connection { connection } track Connectors Mouse Event { Point2 = view To Drawing new Point get X get Y Figure = if get Start Connector == { = find Source get Drawing } else { = find Target get Drawing } if != get Target Figure { if get Target Figure != { get Target Figure set Connectors Visible } set Target Figure if get Start Connector != { if get Target Figure != can Connect get Start Connector get Owner get Target Figure { get Target Figure set Connectors Visible get Connection } } else { if get Target Figure != can Connect get Target Figure { get Target Figure set Connectors Visible get Connection } } } Connector cc = if != { cc = find Connector prototype } if cc != get Target Connector { set Target Connector cc } } draw Graphics2 { if created Figure != { Graphics2 gg = Graphics2 create gg transform get View get Drawing To View Transform created Figure draw gg gg dispose } } Connector find Connector Point2 Figure target Connection Figure { target find Connector } Figure find Connection Start Point2 Drawing drawing { Figure target = find Connectable Figure drawing if target != target can Connect { target } } Figure find Connectable Figure Point2 Drawing drawing { drawing find Figure Except created Figure } set Start Connector Connector new Start Connector { start Connector = new Start Connector } Connector get Start Connector { start Connector } set End Connector Connector new End Connector { Connector = new End Connector } Connector get End Connector { Connector } private set Target Connector Connector new Target Connector { target Connector = new Target Connector } Connector get Target Connector { target Connector } private set Target Figure Figure new Target { target = new Target } Figure get Target Figure { target } Figure get Created Figure { created Figure } set Created Figure Figure new Created Figure { created Figure = new Created Figure } figure Area Invalidated Figure Event evt { fire Area Invalidated evt get Invalidated Area } figure Added Figure Event { } figure Changed Figure Event { } figure Removed Figure Event { } figure Request Remove Figure Event { } figure Attribute Changed Figure Event { } } 