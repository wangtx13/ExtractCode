org jhotdraw draw import awt * import awt geom * import * import util * import javax swing undo * import org jhotdraw draw Attribute Keys * import org jhotdraw geom * import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output Round Rectangle Figure Attributed Figure { private Round Rectangle2 roundrect private DEFAULT_ARC = 20 Round Rectangle Figure { this 0 0 0 0 } Round Rectangle Figure width height { roundrect = new Round Rectangle2 width height DEFAULT_ARC DEFAULT_ARC } Rectangle2 get Bounds { Rectangle2 roundrect get Bounds2 } Rectangle2 get Figure Draw Bounds { Rectangle2 = Rectangle2 roundrect get Bounds2 grow = Attribute Keys get Perpendicular Hit Growth this Geom grow grow grow } get Arc Width { roundrect arcwidth } get Arc Height { roundrect archeight } set Arc { old Width = roundrect get Arc Width old Height = roundrect get Arc Height roundrect arcwidth = roundrect archeight = fire Figure Changed get Draw Bounds fire Undoable Edit Happened new Abstract Undoable Edit { String get Presentation Name { Rundung } undo Cannot Undo Exception { super undo will Change roundrect arcwidth = old Width roundrect archeight = old Height changed } redo Cannot Redo Exception { super redo will Change roundrect arcwidth = roundrect archeight = changed } } } draw Fill Graphics2 { Round Rectangle2 = Round Rectangle2 roundrect clone grow = Attribute Keys get Perpendicular Fill Growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { fill } } draw Stroke Graphics2 { Round Rectangle2 = Round Rectangle2 roundrect clone grow = Attribute Keys get Perpendicular Draw Growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { draw } } contains Point2 { Round Rectangle2 = Round Rectangle2 roundrect clone grow = Attribute Keys get Perpendicular Hit Growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 contains } basic Set Bounds Point2 anchor Point2 { roundrect = Math min anchor roundrect = Math min anchor roundrect width = Math max 0 1 Math - anchor roundrect height = Math max 0 1 Math - anchor } basic Transform Affine Transform tx { Point2 anchor = get Start Point Point2 = get End Point basic Set Bounds Point2 tx transform anchor anchor Point2 tx transform } Collection< Handle> create Handles detail Level { Linked List< Handle> handles = Linked List< Handle> super create Handles detail Level handles add new Round Rect Radius Handle this handles } Connector find Connector Point2 Connection Figure prototype { new Chop Round Rect Connector this } Connector find Compatible Connector Connector Start Connector { new Chop Round Rect Connector this } Round Rectangle Figure clone { Round Rectangle Figure that = Round Rectangle Figure super clone that roundrect = Round Rectangle2 this roundrect clone that } @ Override read Dom Input I O Exception { super read roundrect arcwidth = get Attribute arc Width DEFAULT_ARC roundrect archeight = get Attribute arc Height DEFAULT_ARC } @ Override write Dom Output out I O Exception { super write out out add Attribute arc Width roundrect arcwidth out add Attribute arc Height roundrect archeight } restore To Object geometry { Round Rectangle2 = Round Rectangle2 geometry roundrect = roundrect = roundrect width = width roundrect height = height } Object get Restore Data { roundrect clone } Point2 chop Point2 from { Rectangle2 outer = get Bounds grow switch STROKE_PLACEMENT get this { case C E N T E R default grow = Attribute Keys get Stroke Total Width this / 2 break case O U T Sid E grow = Attribute Keys get Stroke Total Width this break case I N Sid E grow = 0 break } outer -= grow outer -= grow outer width += grow * 2 outer height += grow * 2 Rectangle2 inner = Rectangle2 outer clone gw = - get Arc Width + grow * 2 / 2 gh = - get Arc Height + grow *2 / 2 inner -= gw inner -= gh inner width += gw * 2 inner height += gh * 2 angle = Geom point To Angle outer from Point2 = Geom angle To Point outer Geom point To Angle outer from if == outer || == outer + outer width { = Math min Math max inner inner + inner height } else { = Math min Math max inner inner + inner width } } } 