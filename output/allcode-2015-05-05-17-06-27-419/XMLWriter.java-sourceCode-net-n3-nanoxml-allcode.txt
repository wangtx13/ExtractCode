net n3 nanoxml import I O Exception import Output Stream import Print Writer import Writer import util Iterator import util Vector Xml Writer { private Print Writer writer Xml Writer Writer writer { if writer instanceof Print Writer { this writer = Print Writer writer } else { this writer = new Print Writer writer } } Xml Writer Output Stream stream { this writer = new Print Writer stream } finalize Throwable { this writer = super finalize } write I Xml Element xml I O Exception { this write xml 0 } write I Xml Element xml pretty Print I O Exception { this write xml pretty Print 0 } write I Xml Element xml pretty Print indent I O Exception { this write xml pretty Print indent } write I Xml Element xml pretty Print indent collapse Empty Elements I O Exception { if pretty Print { for = 0 < indent i++ { this writer ' ' } } if xml get Name == { if xml get Content != { if pretty Print { this write Encoded xml get Content trim writer } else { this write Encoded xml get Content } } } else { this writer '<' this writer xml get Full Name Vector nsprefixes = new Vector if xml get Namespace != { if xml get Name equals xml get Full Name { this writer xmlns=\ + xml get Namespace + ' ' } else { String prefix = xml get Full Name prefix = prefix substring 0 prefix index Of ' ' nsprefixes add Element prefix this writer xmlns + prefix this writer =\ + xml get Namespace + \ } } Iterator enm = xml iterate Attribute Names while enm has Next { String key = String enm next index = key index Of ' ' if index >= 0 { String namespace = xml get Attribute Namespace key if namespace != { String prefix = key substring 0 index if ! nsprefixes contains prefix { this writer xmlns + prefix this writer =\ + namespace + ' ' nsprefixes add Element prefix } } } } enm = xml iterate Attribute Names while enm has Next { String key = String enm next String value = xml get Attribute key this writer + key + =\ this write Encoded value this writer ' ' } if xml get Content != xml get Content length > 0 { writer '>' this write Encoded xml get Content writer </ + xml get Full Name + '>' if pretty Print { writer } } else if xml has Children || ! collapse Empty Elements { writer '>' if pretty Print { writer } enm = xml iterate Children while enm has Next { I Xml Element child = I Xml Element enm next this write child pretty Print indent + 4 collapse Empty Elements } if pretty Print { for = 0 < indent i++ { this writer ' ' } } this writer </ + xml get Full Name + > if pretty Print { writer } } else { this writer /> if pretty Print { writer } } } this writer flush } private write Encoded String { for = 0 < length i++ { char = char At switch { case 0x0 A this writer break case '<' this writer lt break case '>' this writer break case ' ' this writer amp break case '\'' this writer apos break case ' ' this writer quot break default if < ' ' || > 0x7 E { this writer #x this writer Integer to String 16 this writer ' ' } else { this writer } } } } } 