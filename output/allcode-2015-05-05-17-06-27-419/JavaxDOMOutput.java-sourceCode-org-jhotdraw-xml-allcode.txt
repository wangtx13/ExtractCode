org jhotdraw xml import awt * import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * Javax Dom Output implements Dom Output { private String doctype private Hash Map< Object String> objectids private Hash Map< String Object> prototypes private Document document private Node current private Dom Factory factory Javax Dom Output Dom Factory factory I O Exception { this factory = factory try { objectids = new Hash Map< Object String> document = Document Builder Factory new Instance new Document Builder new Document current = document } catch Parser Configuration Exception { I O Exception error = new I O Exception get Message error init Cause error } } save Output Stream out I O Exception { try { if doctype != { Output Stream Writer = new Output Stream Writer out U T F8 write <! O C T Y P E write doctype write >\n flush } Transformer = Transformer Factory new Instance new Transformer transform new Dom Source document new Stream Result out } catch Transformer Exception { I O Exception error = new I O Exception get Message error init Cause error } } save Writer out I O Exception { try { if doctype != { out write <! O C T Y P E out write doctype out write >\n } Transformer = Transformer Factory new Instance new Transformer transform new Dom Source document new Stream Result out } catch Transformer Exception { I O Exception error = new I O Exception get Message error init Cause error } } open Element String tag Name { Element new Element = document create Element tag Name current append Child new Element current = new Element } close Element { current = current get Parent Node } add Comment String comment { current append Child document create Comment comment } add Text String text { current append Child document create Text Node text } add Attribute String String value { if value != { Element current set Attribute value } } add Attribute String value { Element current set Attribute Integer to String value } add Attribute String value { Element current set Attribute Boolean to String value } add Attribute String float value { String = Float to String value if With 0 = substring 0 length - 2 Element current set Attribute } add Attribute String value { String = to String value if With 0 = substring 0 length - 2 Element current set Attribute } write Object Object I O Exception { if == { open Element close Element } else if instanceof Dom Storable { write Storable Dom Storable } else if instanceof String { open Element add Text String close Element } else if instanceof Integer { open Element add Text to String close Element } else if instanceof Long { open Element long add Text to String close Element } else if instanceof { open Element add Text to String close Element } else if instanceof Float { open Element float add Text to String close Element } else if instanceof Boolean { open Element add Text to String close Element } else if instanceof Color { Color = Color open Element color add Attribute rgba # + Integer to Hex String get R G B close Element } else if instanceof { open Element Array = for i=0 < length i++ { write Object new Integer } close Element } else if instanceof float { open Element float Array float = float for i=0 < length i++ { write Object new Float } close Element } else if instanceof { open Element Array = for i=0 < length i++ { write Object new } close Element } else if instanceof Font { Font = Font open Element font add Attribute get Name add Attribute style get Style add Attribute size get Size close Element } else if instanceof Enum { open Element enum Enum = Enum add Attribute type factory get Enum Name add Text factory get Enum Value close Element } else { new Illegal Argument Exception unable to store +o+ +o get Class } } private write Storable Dom Storable I O Exception { String tag Name = factory get Name if tag Name == new Illegal Argument Exception no tag for +o open Element tag Name if objectids contains Key { add Attribute ref String objectids get } else { String = Integer to String objectids size 16 objectids put add Attribute write this } close Element } add Attribute String float value float default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String value default Value { if value != default Value { add Attribute value } } add Attribute String String value String default Value { if ! value equals default Value { add Attribute value } } Object get Prototype { if prototypes == { prototypes = new Hash Map< String Object> } if ! prototypes contains Key current get Node Name { prototypes put current get Node Name factory create current get Node Name } prototypes get current get Node Name } set Doctype String doctype { this doctype = doctype } } 