org jhotdraw draw import awt * import awt geom * import util * import * import org jhotdraw draw Attribute Keys * import org jhotdraw geom * import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output Abstract Attributed Composite Figure Abstract Composite Figure { private Hash Map< Attribute Key Object> attributes = new Hash Map< Attribute Key Object> private Hash Set< Attribute Key> forbidden Attributes Abstract Attributed Composite Figure { } set Attribute Attribute Key key Object new Value { if forbidden Attributes == || ! forbidden Attributes contains key { Object old Value = attributes get key if ! attributes contains Key key || old Value != new Value || old Value != new Value != ! old Value equals new Value { will Change basic Set Attribute key new Value fire Attribute Changed key old Value new Value fire Undoable Edit Happened new Attribute Change Edit this key old Value new Value changed } } } set Attribute Enabled Attribute Key key { if forbidden Attributes == { forbidden Attributes = new Hash Set< Attribute Key> } if { forbidden Attributes remove key } else { forbidden Attributes add key } } Attribute Enabled Attribute Key key { forbidden Attributes == || ! forbidden Attributes contains key } set Attributes Hash Map< Attribute Key Object> map { for Map Entry< Attribute Key Object> entry map entry Set { set Attribute entry get Key entry get Value } } Map< Attribute Key Object> get Attributes { new Hash Map< Attribute Key Object> attributes } basic Set Attribute Attribute Key key Object new Value { if forbidden Attributes == || ! forbidden Attributes contains key { attributes put key new Value } basic Set Attribute On Children key new Value } basic Set Attribute On Children Attribute Key key Object new Value { for Figure child get Children { child basic Set Attribute key new Value } } Object get Attribute Attribute Key key { has Attribute key ? attributes get key key get Default Value } draw Figure Graphics2 { draw Children if Attribute Keys FILL_COLOR get this != { set Color Attribute Keys FILL_COLOR get this draw Fill } if STROKE_COLOR get this != STROKE_WIDTH get this > 0d { set Stroke Attribute Keys get Stroke this set Color STROKE_COLOR get this draw Stroke } if TEXT_COLOR get this != { if TEXT_SHADOW_COLOR get this != TEXT_SHADOW_OFFSET get this != { Dimension2 = TEXT_SHADOW_OFFSET get this translate width height set Color TEXT_SHADOW_COLOR get this draw Text translate -d width -d height } set Color TEXT_COLOR get this draw Text } if Connectors Visible { draw Connectors } } draw Children Graphics2 { for Figure child get Children { child draw } } draw Connectors Graphics2 { } Stroke get Stroke { Attribute Keys get Stroke this } get Stroke Miter Limit Factor { Number value = Number get Attribute Attribute Keys STROKE_MITER_LIMIT_FACTOR value != ? value Value 10f } Rectangle2 get Figure Draw Bounds { width = Attribute Keys get Stroke Total Width this / 2d if STROKE_JOIN get this == Basic Stroke JOIN_MITER { width *= STROKE_MITER_LIMIT_FACTOR get this } width++ Rectangle2 = get Bounds Geom grow width width } draw Fill awt Graphics2 draw Stroke awt Graphics2 draw Text awt Graphics2 { } Abstract Attributed Composite Figure clone { Abstract Attributed Composite Figure that = Abstract Attributed Composite Figure super clone that attributes = new Hash Map< Attribute Key Object> this attributes if this forbidden Attributes != { that forbidden Attributes = new Hash Set< Attribute Key> this forbidden Attributes } that } write Attributes Dom Output out I O Exception { Figure prototype = Figure out get Prototype Element Open = for Map Entry< Attribute Key Object> entry attributes entry Set { Attribute Key key = entry get Key if forbidden Attributes == || ! forbidden Attributes contains key { Object prototype Value = key get prototype Object attribute Value = key get this if prototype Value != attribute Value || prototype Value != attribute Value != ! prototype Value equals attribute Value { if ! Element Open { out open Element Element Open = } out open Element key get Key out write Object entry get Value out close Element } } } if Element Open { out close Element } } read Attributes Dom Input I O Exception { if get Element Count > 0 { open Element for i=in get Element Count - 1 >= 0 i-- { open Element String = get Tag Name Object value = read Object Attribute Key key = get Attribute Key if key != key Assignable value { if forbidden Attributes == || ! forbidden Attributes contains key { set Attribute key value } } close Element } close Element } } Attribute Key get Attribute Key String { Attribute Keys supported Attribute Map get } apply Attributes To Figure that { for Map Entry< Attribute Key Object> entry attributes entry Set { that set Attribute entry get Key entry get Value } } write Dom Output out I O Exception { super write out write Attributes out } read Dom Input I O Exception { super read read Attributes } remove Attribute Attribute Key key { if has Attribute key { Object old Value = get Attribute key attributes remove key fire Attribute Changed key old Value key get Default Value } } has Attribute Attribute Key key { attributes contains Key key } } 