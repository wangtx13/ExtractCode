org jhotdraw draw import org jhotdraw beans * import awt * import awt datatransfer * import awt event Focus Event import awt event Focus Listener import beans * import util * import * import org jhotdraw draw Attribute Keys * Default Drawing Editor Abstract Bean implements Drawing Editor Tool Listener { private Hash Map< Attribute Key Object> default Attributes = new Hash Map< Attribute Key Object> private Tool tool private Hash Set< Drawing View> views private Drawing View active View private Enabled = private Drawing View focused View private Focus Listener focus Handler = new Focus Listener { focus Gained Focus Event { set Focused View Drawing View find View Container get Source } focus Lost Focus Event { if ! Temporary { set Focused View } } } Default Drawing Editor { set Default Attribute FILL_COLOR Color white set Default Attribute STROKE_COLOR Color black set Default Attribute TEXT_COLOR Color black views = new Hash Set< Drawing View> } set Tool Tool { if == tool if tool != { for Drawing View views { remove Mouse Listener tool remove Mouse Motion Listener tool remove Key Listener tool } tool deactivate this tool remove Tool Listener this } tool = if tool != { tool activate this for Drawing View views { add Mouse Listener tool add Mouse Motion Listener tool add Key Listener tool } tool add Tool Listener this } } area Invalidated Tool Event evt { Rectangle = evt get Invalidated Area evt get View get Container repaint width height } tool Started Tool Event evt { set View evt get View } set View Drawing View new Value { Drawing View old Value = active View active View = new Value fire Property Change view old Value new Value for Drawing View views { get Container repaint } } tool Done Tool Event evt { Drawing View = get View if != { Container = get Container invalidate if get Parent != get Parent validate } } Tool get Tool { tool } Drawing View get View { active View != ? active View views iterator next } private update Focused View { for Drawing View views { if get Container has Focus { set Focused View } } set Focused View } private set Focused View Drawing View new Value { Drawing View old Value = focused View focused View = new Value fire Property Change focused View old Value new Value } Drawing View get Focused View { focused View } apply Default Attributes To Figure { for Map Entry< Attribute Key Object> entry default Attributes entry Set { set Attribute entry get Key entry get Value } } Object get Default Attribute Attribute Key key { default Attributes get key } set Default Attribute Attribute Key key Object new Value { Object old Value = default Attributes put key new Value fire Property Change key get Key old Value new Value } remove Drawing View view { view get Container remove Focus Listener focus Handler views remove view if tool != { view remove Mouse Listener tool view remove Mouse Motion Listener tool view remove Key Listener tool } view remove Notify this if active View == view { view = views size > 0 ? views iterator next } update Focused View } add Drawing View view { views add view view add Notify this view get Container add Focus Listener focus Handler if tool != { view add Mouse Listener tool view add Mouse Motion Listener tool view add Key Listener tool } update Focused View } set Cursor Cursor { } Collection< Drawing View> get Drawing Views { Collections unmodifiable Collection views } Drawing View find View Container { for Drawing View views { if get Container == { } } } set Enabled new Value { if new Value != Enabled { old Value = Enabled Enabled = new Value fire Property Change enabled old Value new Value } } Enabled { Enabled } } 