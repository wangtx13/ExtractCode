org jhotdraw draw action import awt * Vertical Grid Layout implements Layout Manager Serializable { hgap vgap cols Vertical = Vertical Grid Layout { this 1 0 0 0 } Vertical Grid Layout cols { this cols 0 0 } Vertical Grid Layout cols Vertical { this cols 0 0 Vertical } Vertical Grid Layout cols hgap vgap { this cols hgap vgap } Vertical Grid Layout cols hgap vgap Vertical { if == 0 cols == 0 { new Illegal Argument Exception and cols cannot both be zero } this = this cols = cols this hgap = hgap this vgap = vgap this Vertical = Vertical } get Rows { } set Rows { if == 0 this cols == 0 { new Illegal Argument Exception and cols cannot both be zero } this = } set Vertical { Vertical = } Vertical { Vertical } get Columns { cols } set Columns cols { if cols == 0 this == 0 { new Illegal Argument Exception and cols cannot both be zero } this cols = cols } get Hgap { hgap } set Hgap hgap { this hgap = hgap } get Vgap { vgap } set Vgap vgap { this vgap = vgap } add Layout Component String Component comp { } remove Layout Component Component comp { } Dimension preferred Layout Size Container parent { synchronized parent get Tree Lock { Insets insets = parent get Insets ncomponents = parent get Component Count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows - 1 / nrows } else { nrows = ncomponents + ncols - 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { Component comp = parent get Component Dimension = comp get Preferred Size if < width { = width } if < height { = height } } new Dimension insets left + insets right + ncols*w + ncols-1 *hgap insets top + insets bottom + nrows*h + nrows-1 *vgap } } Dimension minimum Layout Size Container parent { synchronized parent get Tree Lock { Insets insets = parent get Insets ncomponents = parent get Component Count nrows = ncols = cols if nrows > 0 { ncols = ncomponents + nrows - 1 / nrows } else { nrows = ncomponents + ncols - 1 / ncols } = 0 = 0 for = 0 < ncomponents i++ { Component comp = parent get Component Dimension = comp get Minimum Size if < width { = width } if < height { = height } } new Dimension insets left + insets right + ncols*w + ncols-1 *hgap insets top + insets bottom + nrows*h + nrows-1 *vgap } } layout Container Container parent { synchronized parent get Tree Lock { Insets insets = parent get Insets ncomponents = parent get Component Count nrows = ncols = cols ltr = parent get Component Orientation Left To Right if ncomponents == 0 { } if nrows > 0 { ncols = ncomponents + nrows - 1 / nrows } else { nrows = ncomponents + ncols - 1 / ncols } = parent get Width - insets left + insets right = parent get Height - insets top + insets bottom = - ncols - 1 * hgap / ncols = - nrows - 1 * vgap / nrows if ltr { for = 0 = insets left < ncols c++ += + hgap { for = 0 = insets top < nrows r++ += + vgap { if Vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent get Component set Bounds } } } } else { for = 0 = parent get Width - insets right - < ncols c++ -= + hgap { for = 0 = insets top < nrows r++ += + vgap { if Vertical { = + * nrows } else { = * ncols + } if < ncomponents { parent get Component set Bounds } } } } } } String to String { get Class get Name + hgap= + hgap + vgap= + vgap + rows= + + cols= + cols + } } 