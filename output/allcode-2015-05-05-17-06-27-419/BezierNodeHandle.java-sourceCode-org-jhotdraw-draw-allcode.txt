org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * Bezier Node Handle Abstract Handle { index private Composite Edit edit private Bezier Path Node old Node Bezier Node Handle Bezier Figure owner index { super owner this index = index } draw Graphics2 { Bezier Figure = get Bezier Figure if get Point Count > index { Bezier Path Node = get Node index if mask == 0 { draw Rectangle Color black Color white } else if mask == Bezier Path C1_MASK || mask == Bezier Path C2_MASK || !f Closed mask == Bezier Path C1_MASK | Bezier Path C2_MASK index == 0 || index == get Node Count - 1 { draw Diamond Color black Color white } else { draw Circle Color black Color white } } } Bezier Figure get Bezier Figure { Bezier Figure get Owner } Point get Location { get Bezier Figure get Point Count > index ? view drawing To View get Bezier Figure get Point index 0 new Point 10 10 } Rectangle basic Get Bounds { Rectangle = new Rectangle get Location grow get Handlesize / 2 get Handlesize / 2 } track Start Point anchor modifiers Ex { Bezier Figure figure = get Bezier Figure view get Drawing fire Undoable Edit Happened edit = new Composite Edit Punkt verschieben Point2 location = view get Constrainer constrain Point view view To Drawing get Location Point2 = view get Constrainer constrain Point view view To Drawing anchor old Node = figure get Node index fire Handle Request Secondary Handles } track Step Point anchor Point modifiers Ex { Bezier Figure figure = get Bezier Figure figure will Change Point2 = view get Constrainer constrain Point view view To Drawing Bezier Path Node = figure get Node index fire Area Invalidated move To fire Area Invalidated figure basic Set Node index figure changed } private fire Area Invalidated Bezier Path Node { Rectangle2 dr = new Rectangle2 0 0 0 0 for i=1 < 3 i++ { dr add } Rectangle vr = view drawing To View dr vr grow get Handlesize get Handlesize fire Area Invalidated vr } track End Point anchor Point modifiers Ex { Bezier Figure = get Bezier Figure if modifiers Ex Input Event META_DOWN_MASK | Input Event CTRL_DOWN_MASK != 0 modifiers Ex Input Event BUTTON2_DOWN_MASK == 0 { will Change Bezier Path Node = get Node index if index > 0 index < get Node Count || Closed { mask = mask + 3 % 4 } else if index == 0 { mask = mask Bezier Path C2_MASK == 0 ? Bezier Path C2_MASK 0 } else { mask = mask Bezier Path C1_MASK == 0 ? Bezier Path C1_MASK 0 } basic Set Node index changed fire Handle Request Secondary Handles } view get Drawing fire Undoable Edit Happened new Bezier Node Edit index old Node get Node index view get Drawing fire Undoable Edit Happened edit } @ Override Combinable With Handle { } track Click Point modifiers Ex { Bezier Figure = get Bezier Figure if get Node Count > 2 modifiers Ex Input Event META_DOWN_MASK | Input Event CTRL_DOWN_MASK | Input Event ALT_DOWN_MASK == 0 { Rectangle invalidated Area = get Draw Bounds will Change basic Remove Node index changed fire Handle Request Remove invalidated Area } } Collection< Handle> create Secondary Handles { Bezier Figure = get Bezier Figure Linked List< Handle> list = new Linked List< Handle> Bezier Path Node = get Node index if mask Bezier Path C1_MASK != 0 index != 0 || Closed { list add new Bezier Control Point Handle index 1 } if mask Bezier Path C2_MASK != 0 index < get Node Count - 1 || Closed { list add new Bezier Control Point Handle index 2 } if index > 0 || Closed { = index == 0 ? get Node Count - 1 index - 1 = get Node if mask Bezier Path C2_MASK != 0 { list add new Bezier Control Point Handle 2 } } if index < get Node Count - 2 || Closed { = index == get Node Count - 1 ? 0 index + 1 = get Node if mask Bezier Path C1_MASK != 0 { list add new Bezier Control Point Handle 1 } } list } } 