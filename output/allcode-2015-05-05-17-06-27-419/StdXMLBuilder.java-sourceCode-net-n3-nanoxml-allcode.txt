net n3 nanoxml import I O Exception import Reader import util Stack Std Xml Builder implements I Xml Builder { private Stack stack private I Xml Element root private I Xml Element prototype Std Xml Builder { this new Xml Element } Std Xml Builder I Xml Element prototype { this stack = this root = this prototype = prototype } finalize Throwable { this prototype = this root = this stack clear this stack = super finalize } start Building String systemid line Nr { this stack = new Stack this root = } new Processing Instruction String target Reader reader { } start Element String String Prefix String U R I String systemid line Nr { String full Name = if Prefix != { full Name = Prefix + ' ' + } I Xml Element elt = this prototype create Element full Name U R I systemid line Nr if this stack empty { this root = elt } else { I Xml Element top = I Xml Element this stack peek top add Child elt } this stack push elt } element Attributes Processed String String Prefix String U R I { } Element String String Prefix String U R I { I Xml Element elt = I Xml Element this stack pop if elt get Children Count == 1 { I Xml Element child = elt get Child At Index 0 if child get Name == { elt set Content child get Content elt remove Child At Index 0 } } } add Attribute String key String Prefix String U R I String value String type Exception { String full Name = key if Prefix != { full Name = Prefix + ' ' + key } I Xml Element top = I Xml Element this stack peek if top has Attribute full Name { new Xml Parse Exception top get Systemid top get Line Nr Duplicate attribute + key } if Prefix != { top set Attribute full Name U R I value } else { top set Attribute full Name value } } add P C Data Reader reader String systemid line Nr { buf Size = 2048 size Read = 0 String Buffer = new String Buffer buf Size char buf = new char buf Size for { if size Read >= buf Size { buf Size *= 2 ensure Capacity buf Size } size try { size = reader read buf } catch I O Exception { break } if size < 0 { break } append buf 0 size size Read += size } I Xml Element elt = this prototype create Element systemid line Nr elt set Content to String if ! this stack empty { I Xml Element top = I Xml Element this stack peek top add Child elt } } Object get Result { this root } } 