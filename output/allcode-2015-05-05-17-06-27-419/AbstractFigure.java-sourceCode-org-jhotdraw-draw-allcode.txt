org jhotdraw draw import org jhotdraw util * import javax swing event * import awt * import awt event * import awt font * import awt geom * import util * import javax swing * import javax swing undo * import * import org jhotdraw geom * Abstract Figure implements Figure { Event Listener List listener List = new Event Listener List private Connectors Visible private Connection Figure courting Connection private Drawing drawing private Interactive private Visible = Figure decorator private Draw Decorator First = changing Depth = 0 Abstract Figure { } add Figure Listener Figure Listener { listener List add Figure Listener } remove Figure Listener Figure Listener { listener List remove Figure Listener } add Undoable Edit Listener Undoable Edit Listener { listener List add Undoable Edit Listener } remove Undoable Edit Listener Undoable Edit Listener { listener List remove Undoable Edit Listener } add Notify Drawing { this drawing = fire Figure Added } remove Notify Drawing { fire Figure Removed this drawing = } Drawing get Drawing { drawing } Object get Lock { get Drawing == ? this get Drawing get Lock } set Draw Decorator First new Value { Draw Decorator First = new Value } Draw Decorator First { Draw Decorator First } fire Area Invalidated { fire Area Invalidated get Draw Bounds } fire Area Invalidated Rectangle2 invalidated Area { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this invalidated Area Figure Listener listeners i+1 figure Area Invalidated event } } } } fire Figure Request Remove { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this get Bounds Figure Listener listeners i+1 figure Request Remove event } } } } fire Figure Added { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this get Bounds Figure Listener listeners i+1 figure Added event } } } } fire Figure Removed { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this get Bounds Figure Listener listeners i+1 figure Removed event } } } } fire Figure Changed { fire Figure Changed get Bounds } fire Figure Changed Rectangle2 changed Area { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this changed Area Figure Listener listeners i+1 figure Changed event } } } } fire Figure Changed Figure Event event { if listener List get Listener Count > 0 { Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { Figure Listener listeners i+1 figure Changed event } } } } fire Attribute Changed Attribute Key attribute Object old Value Object new Value { if listener List get Listener Count > 0 { Figure Event event = Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if listeners == Figure Listener { if event == event = new Figure Event this attribute old Value new Value Figure Listener listeners i+1 figure Attribute Changed event } } } } fire Undoable Edit Happened Undoable Edit edit { Undoable Edit Event event = if listener List get Listener Count > 0 { Object listeners = listener List get Listener List for = listeners length-2 i>=0 i-=2 { if event == event = new Undoable Edit Event this edit if listeners == Undoable Edit Listener { Undoable Edit Listener listeners i+1 undoable Edit Happened event } } } } Abstract Figure clone { try { Abstract Figure that = Abstract Figure super clone that listener List = new Event Listener List that Connectors Visible = that courting Connection = if this decorator != { that decorator = Figure this decorator clone } that } catch Clone Not Supported Exception { Internal Error error = new Internal Error get Message error init Cause error } } Abstract Figure basic Clone Hash Map< Figure Figure> old To New { } remap Hash Map< Figure Figure> old To New { } Collection< Handle> create Handles detail Level { Linked List< Handle> handles = new Linked List< Handle> if detail Level == 0 { Box Handle Kit add Box Handles this handles } handles } Cursor get Cursor Point2 { if contains { Cursor get Predefined Cursor Cursor HAND_CURSOR } else { Cursor get Default Cursor } } set Bounds Rectangle2 bounds { set Bounds new Point2 bounds bounds new Point2 bounds + bounds width bounds + bounds height } set Bounds Point2 anchor Point2 { Point2 old Anchor = get Start Point Point2 old Lead = get End Point if ! old Anchor equals anchor || ! old Lead equals { will Change basic Set Bounds anchor changed fire Undoable Edit Happened new Set Bounds Edit this old Anchor old Lead anchor } } can Connect { } invalidate { fire Area Invalidated get Draw Bounds } Changing { changing Depth != 0 } get Changing Depth { changing Depth } will Change { changing Depth++ invalidate } validate { } changed { if changing Depth <= 1 { validate fire Figure Changed get Draw Bounds changing Depth = 0 } else { changing Depth-- } } transform Affine Transform tx { will Change basic Transform tx fire Undoable Edit Happened new Transform Edit this tx changed } basic Transform Affine Transform ty Connector find Connector Point2 Connection Figure prototype { new Chop Box Connector this } includes Figure figure { figure == this } Figure find Figure Inside Point2 { contains ? this } Connector find Compatible Connector Connector Start { new Chop Box Connector this } Collection< Action> get Actions Point2 { Collections empty List } Tool get Tool Point2 { } handle Mouse Click Point2 Mouse Event evt Drawing View view { } handle Drop Point2 Collection< Figure> dropped Figures Drawing View view { } Point2 get End Point { Rectangle2 = get Bounds new Point2 + width + height } Point2 get Start Point { Rectangle2 = get Bounds new Point2 } Dimension2 get Preferred Size { Rectangle2 = get Bounds new Dimension2 width height } remap Map old To New { } Interactive { Interactive } set Interactive { Interactive = } Visible { Visible } set Visible new Value { if new Value != Visible { will Change Visible = new Value changed } } set Connectors Visible Visible Connection Figure connection { will Change Connectors Visible = Visible courting Connection = connection changed } Connectors Visible { Connectors Visible } Connection Figure get Courting Connection { courting Connection } Collection< Figure> get Decomposition { Linked List< Figure> list = new Linked List< Figure> list add this list } Font Render Context get Font Render Context { Font Render Context frc = if frc == { frc = new Font Render Context new Affine Transform Options Text Antialiased Options Fractional Metrics } frc } request Remove { fire Figure Request Remove } get Layer { 0 } String get Tooltip Point2 { } set Decorator Figure new Value { will Change decorator = new Value if decorator != { decorator basic Set Bounds get Start Point get End Point } changed } Figure get Decorator { decorator } draw Graphics2 { if Draw Decorator First { draw Decorator draw Figure } else { draw Figure draw Decorator } } draw Figure Graphics2 draw Decorator Graphics2 { if decorator != { update Decorator Bounds decorator draw } } update Decorator Bounds { if decorator != { Point2 = get Start Point Point2 = get End Point Insets2 decorator Insets = Attribute Keys DECORATOR_INSETS get this -= decorator Insets left -= decorator Insets top += decorator Insets right += decorator Insets bottom decorator basic Set Bounds } } Rectangle2 get Draw Bounds { Rectangle2 figure Draw Bounds = get Figure Draw Bounds if decorator != { update Decorator Bounds figure Draw Bounds add decorator get Draw Bounds } figure Draw Bounds } Rectangle2 get Figure Draw Bounds String to String { String Builder buf = new String Builder buf append get Class get Name substring get Class get Name last Index Of ' ' +1 buf append '@' buf append hash Code buf to String } } 