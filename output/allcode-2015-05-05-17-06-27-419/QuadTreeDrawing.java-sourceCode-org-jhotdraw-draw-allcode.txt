org jhotdraw draw import org jhotdraw geom Quad Tree2 import org jhotdraw util Reversed List import awt * import awt geom * import javax swing * import javax swing event * import org jhotdraw util * import util * Quad Tree Drawing Abstract Drawing implements Figure Listener Undoable Edit Listener { private Array List< Figure> figures = new Array List< Figure> private Quad Tree2 Double< Figure> quad Tree = new Quad Tree2 Double< Figure> private needs Sorting = Quad Tree Drawing { } index Of Figure figure { figures index Of figure } basic Add index Figure figure { figures add index figure quad Tree add figure figure get Draw Bounds figure add Figure Listener this figure add Undoable Edit Listener this needs Sorting = } basic Remove Figure figure { figures remove figure quad Tree remove figure figure remove Figure Listener this figure remove Undoable Edit Listener this needs Sorting = } draw Graphics2 { Collection< Figure> = quad Tree find Intersects get Clip Bounds get Bounds2 Collection< Figure> to Draw = sort draw to Draw } Collection< Figure> sort Collection< Figure> { ensure Sorted Array List< Figure> sorted = new Array List< Figure> size for Figure figures { if contains { sorted add } } sorted } draw Graphics2 Collection< Figure> { for Figure { draw } } figure Area Invalidated Figure Event { fire Area Invalidated get Invalidated Area } figure Changed Figure Event { quad Tree remove get Figure quad Tree add get Figure get Figure get Draw Bounds needs Sorting = fire Area Invalidated get Invalidated Area } figure Added Figure Event { } figure Removed Figure Event { } figure Request Remove Figure Event { remove get Figure } Collection< Figure> get Figures Rectangle2 bounds { quad Tree find Inside bounds } Collection< Figure> get Figures { Collections unmodifiable Collection figures } Figure find Figure Inside Point2 { Collection< Figure> = quad Tree find Contains for Figure get Figures Front To Back { if contains contains { find Figure Inside } } } util List< Figure> get Figures Front To Back { ensure Sorted new Reversed List< Figure> figures } Figure find Figure Point2 { Collection< Figure> = quad Tree find Contains switch size { case 0 case 1 { Figure = iterator next contains ? } default { for Figure get Figures Front To Back { if contains contains } } } } Figure find Figure Except Point2 Figure ignore { Collection< Figure> = quad Tree find Contains switch size { case 0 { } case 1 { Figure = iterator next == ignore || ! contains ? } default { for Figure get Figures Front To Back { if != ignore contains } } } } Figure find Figure Except Point2 Collection ignore { Collection< Figure> = quad Tree find Contains switch size { case 0 { } case 1 { Figure = iterator next ! ignore contains || ! contains ? } default { for Figure get Figures Front To Back { if ! ignore contains contains } } } } Collection< Figure> find Figures Rectangle2 { Collection< Figure> = quad Tree find Intersects switch size { case 0 case 1 default sort } } Collection< Figure> find Figures Within Rectangle2 { Collection< Figure> = find Figures Array List< Figure> result = new Array List< Figure> size for Figure { if contains get Bounds { result add } } result } bring To Front Figure figure { if figures remove figure { figures add figure needs Sorting = fire Area Invalidated figure get Draw Bounds } } send To Back Figure figure { if figures remove figure { figures add 0 figure needs Sorting = fire Area Invalidated figure get Draw Bounds } } undoable Edit Happened Undoable Edit Event { fire Undoable Edit Happened get Edit } figure Attribute Changed Figure Event { } contains Figure { figures contains } private ensure Sorted { if needs Sorting { Collections sort figures Figure Layer Comparator I N S T A N C E needs Sorting = } } } 