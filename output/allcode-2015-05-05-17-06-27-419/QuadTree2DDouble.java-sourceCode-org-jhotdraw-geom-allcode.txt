org jhotdraw geom import awt geom * import util * import awt * Quad Tree2 Double< T> { private Hash Map< T Rectangle2 Double> outside = new Hash Map< T Rectangle2 Double> private Quad Node root private max Capacity = 32 private min Size = 32 private max Outside = 32 Quad Tree2 { root = new Quad Node new Rectangle2 0 0 800 600 } Quad Tree2 Rectangle2 bounds { root = new Quad Node bounds } add T Rectangle2 bounds { if root bounds contains bounds { root add Rectangle2 bounds clone } else { outside put Rectangle2 bounds clone if outside size > max Outside { reorganize } } } reorganize { root join outside put All root root clear Iterator< Map Entry< T Rectangle2 Double>> = outside entry Set iterator Map Entry< T Rectangle2 Double> entry = next Rectangle2 tree Bounds = Rectangle2 entry get Value clone while has Next { entry = next Rectangle2 bounds = entry get Value tree Bounds add bounds } root bounds = tree Bounds = outside entry Set iterator while has Next { entry = next root add entry get Key entry get Value } outside clear } remove T { outside remove root remove } Collection< T> find Contains Point2 { Hash Set< T> result = new Hash Set< T> root find Contains result for Map Entry< T Rectangle2 Double> entry outside entry Set { if entry get Value contains { result add entry get Key } } result } Collection< T> find Intersects Rectangle2 { find Intersects new Rectangle2 get X get Y get Width get Height } Collection< T> find Intersects Rectangle2 { Hash Set< T> result = new Hash Set< T> root find Intersects result for Map Entry< T Rectangle2 Double> entry outside entry Set { if entry get Value intersects { result add entry get Key } } result } Collection< T> find Inside Rectangle2 { Hash Set< T> result = new Hash Set< T> root find Inside result for Map Entry< T Rectangle2 Double> entry outside entry Set { if contains entry get Value { result add entry get Key } } result } private Quad Node { private Rectangle2 bounds private Hash Map< T Rectangle2 Double> private Quad Node north East private Quad Node north West private Quad Node south East private Quad Node south West Quad Node Rectangle2 bounds { this bounds = bounds this = new Hash Map< T Rectangle2 Double> } Leaf { north East == } remove T { if remove == ! Leaf { north East remove north West remove south East remove south West remove } } add T Rectangle2 Bounds { if Leaf size >= max Capacity bounds width > min Size bounds height > min Size { split } if Leaf || Bounds contains bounds { put Bounds } else { if north East bounds intersects Bounds { north East add Bounds } if north West bounds intersects Bounds { north West add Bounds } if south East bounds intersects Bounds { south East add Bounds } if south West bounds intersects Bounds { south West add Bounds } } } split { if Leaf { hw = bounds width / 2 hh = bounds height / 2 north West = new Quad Node new Rectangle2 bounds bounds hw hh north East = new Quad Node new Rectangle2 bounds + hw bounds bounds width - hw hh south West = new Quad Node new Rectangle2 bounds bounds + hh hw bounds height - hh south East = new Quad Node new Rectangle2 bounds + hw bounds + hh bounds width - hw bounds height - hh Hash Map< T Rectangle2 Double> temp = = new Hash Map< T Rectangle2 Double> for Map Entry< T Rectangle2 Double> entry temp entry Set { add entry get Key entry get Value } } } join { if ! Leaf { north West join north East join south West join south East join put All north West put All north East put All south West put All south East north West = north East = south West = south East = } } find Contains Point2 Hash Set< T> result { if bounds contains { for Map Entry< T Rectangle2 Double> entry entry Set { if entry get Value contains { result add entry get Key } } if ! Leaf { north West find Contains result north East find Contains result south West find Contains result south East find Contains result } } } find Intersects Rectangle2 Hash Set< T> result { if bounds intersects { old Size = result size for Map Entry< T Rectangle2 Double> entry entry Set { if entry get Value intersects { result add entry get Key } } if ! Leaf { north West find Intersects result north East find Intersects result south West find Intersects result south East find Intersects result } } } find Inside Rectangle2 Hash Set< T> result { if bounds intersects { for Map Entry< T Rectangle2 Double> entry entry Set { if contains entry get Value { result add entry get Key } } if ! Leaf { north West find Inside result north East find Inside result south West find Inside result south East find Inside result } } } } } 