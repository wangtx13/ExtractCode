org jhotdraw draw import awt * import util * import org jhotdraw geom * Attribute Keys { Attribute Key< Color> FILL_COLOR = new Attribute Key< Color> fill Color Color white enum Winding Rule { EVEN_ODD NON_ZERO } Attribute Key< Winding Rule> WINDING_RULE = new Attribute Key< Winding Rule> winding Rule Winding Rule EVEN_ODD enum Underfill { N O N E C E N T E R F U L L } Attribute Key< Underfill> FILL_UNDER_STROKE = new Attribute Key< Underfill> fill Under Stroke Underfill C E N T E R Attribute Key< Color> STROKE_COLOR = new Attribute Key< Color> stroke Color Color black Attribute Key< Double> STROKE_WIDTH = new Attribute Key< Double> stroke Width 1d Attribute Key< Double> STROKE_INNER_WIDTH_FACTOR = new Attribute Key< Double> inner Stroke Width Factor 2d Attribute Key< Integer> STROKE_JOIN = new Attribute Key< Integer> stroke Join Basic Stroke JOIN_MITER Attribute Key< Integer> STROKE_CAP = new Attribute Key< Integer> stroke Cap Basic Stroke CAP_BUTT Attribute Key< Double> STROKE_MITER_LIMIT_FACTOR = new Attribute Key< Double> stroke Miter Limit Factor 3d Attribute Key<double > STROKE_DASHES = new Attribute Key<double > stroke Dashes Attribute Key< Double> STROKE_DASH_PHASE = new Attribute Key< Double> stroke Dash Phase 0d Attribute Key< Double> STROKE_DASH_FACTOR = new Attribute Key< Double> stroke Dash Factor enum Stroke Type { B A S I C O U B L E } Attribute Key< Stroke Type> STROKE_TYPE = new Attribute Key< Stroke Type> stroke Type Stroke Type B A S I C enum Stroke Placement { C E N T E R I N Sid E O U T Sid E } Attribute Key< Stroke Placement> STROKE_PLACEMENT = new Attribute Key< Stroke Placement> stroke Placement Stroke Placement C E N T E R Attribute Key< String> T E X T = new Attribute Key< String> text Attribute Key< Color> TEXT_COLOR = new Attribute Key< Color> text Color Color black Attribute Key< Color> TEXT_SHADOW_COLOR = new Attribute Key< Color> text Shadow Color Attribute Key< Dimension2 Double> TEXT_SHADOW_OFFSET = new Attribute Key< Dimension2 Double> text Shadow Offset new Dimension2 1d 1d Attribute Key< Font> FONT_FACE = new Attribute Key< Font> font Face new Font V E R A N A Font P L A I N 10 Attribute Key< Double> FONT_SIZE = new Attribute Key< Double> font Size 12d Attribute Key< Boolean> FONT_BOLD = new Attribute Key< Boolean> font Bold Attribute Key< Boolean> FONT_ITALIC = new Attribute Key< Boolean> font Italic Attribute Key< Boolean> FONT_UNDERLINED = new Attribute Key< Boolean> font Underlined Attribute Key< Liner> BEZIER_PATH_LAYOUTER = new Attribute Key< Liner> bezier Path Layouter Attribute Key< Line Decoration> END_DECORATION = new Attribute Key< Line Decoration> Decoration Attribute Key< Line Decoration> START_DECORATION = new Attribute Key< Line Decoration> start Decoration Attribute Key< Insets2 Double> DECORATOR_INSETS = new Attribute Key< Insets2 Double> decorator Insets new Insets2 0 0 0 0 Attribute Key< Insets2 Double> LAYOUT_INSETS = new Attribute Key< Insets2 Double> border Insets new Insets2 0 0 0 0 enum Orientation { N O R T H NORTH_EAST E A S T SOUTH_EAST S O U T H SOUTH_WEST W E S T NORTH_WEST } Attribute Key< Orientation> O R I E N T A T I O N = new Attribute Key< Orientation> orientation Orientation N O R T H Set< Attribute Key> supported Attributes Map< String Attribute Key> supported Attribute Map { Hash Set< Attribute Key> = new Hash Set< Attribute Key> add All Arrays List new Attribute Key { FILL_COLOR FILL_UNDER_STROKE STROKE_COLOR STROKE_WIDTH STROKE_INNER_WIDTH_FACTOR STROKE_JOIN STROKE_CAP STROKE_MITER_LIMIT_FACTOR STROKE_DASHES STROKE_DASH_PHASE STROKE_TYPE STROKE_PLACEMENT T E X T TEXT_COLOR TEXT_SHADOW_COLOR TEXT_SHADOW_OFFSET FONT_FACE FONT_SIZE FONT_BOLD FONT_ITALIC FONT_UNDERLINED BEZIER_PATH_LAYOUTER END_DECORATION START_DECORATION DECORATOR_INSETS O R I E N T A T I O N WINDING_RULE } supported Attributes = Collections unmodifiable Set Hash Map< String Attribute Key> = new Hash Map< String Attribute Key> for Attribute Key { put get Key } supported Attribute Map = Collections unmodifiable Map } get Stroke Total Width Figure { switch STROKE_TYPE get { case B A S I C default STROKE_WIDTH get case O U B L E STROKE_WIDTH get * 1d + STROKE_INNER_WIDTH_FACTOR get } } Stroke get Stroke Figure { stroke Width = STROKE_WIDTH get dash Factor = STROKE_DASH_FACTOR get != ? STROKE_DASH_FACTOR get stroke Width ddashes = STROKE_DASHES get float dashes = if ddashes != { dashes = new float ddashes length for i=0 < dashes length i++ { dashes = float ddashes * dash Factor } } switch STROKE_TYPE get { case B A S I C default new Basic Stroke float stroke Width Basic Stroke CAP_BUTT STROKE_JOIN get Math max 1f float STROKE_MITER_LIMIT_FACTOR get * stroke Width dashes float STROKE_DASH_PHASE get * dash Factor case O U B L E new Stroke float STROKE_INNER_WIDTH_FACTOR get * stroke Width float stroke Width Basic Stroke CAP_BUTT STROKE_JOIN get Math max 1f float STROKE_MITER_LIMIT_FACTOR get * stroke Width dashes float STROKE_DASH_PHASE get float Value * dash Factor } } Font get Font Figure { Font prototype = FONT_FACE get if prototype == { } if get Font Style != Font P L A I N { prototype derive Font get Font Style FONT_SIZE get float Value } else { prototype derive Font FONT_SIZE get float Value } } get Font Style Figure { style = Font P L A I N if FONT_BOLD get style |= Font B O L if FONT_ITALIC get style |= Font I T A L I C style } get Perpendicular Fill Growth Figure { grow stroke Width = Attribute Keys get Stroke Total Width Stroke Placement placement = STROKE_PLACEMENT get switch FILL_UNDER_STROKE get { case F U L L switch placement { case I N Sid E grow = 0f break case O U T Sid E grow = stroke Width break case C E N T E R default grow = stroke Width / 2d break } break case N O N E switch placement { case I N Sid E grow = -stroke Width break case O U T Sid E grow = 0f break case C E N T E R default grow = stroke Width / -2d break } break case C E N T E R default switch placement { case I N Sid E grow = stroke Width / -2d break case O U T Sid E grow = stroke Width / 2d break case C E N T E R default grow = 0d break } break } grow } get Perpendicular Draw Growth Figure { grow stroke Width = Attribute Keys get Stroke Total Width Stroke Placement placement = STROKE_PLACEMENT get switch placement { case I N Sid E grow = stroke Width / -2d break case O U T Sid E grow = stroke Width / 2d break case C E N T E R default grow = 0f break } grow } get Perpendicular Hit Growth Figure { grow if STROKE_COLOR get == { grow = get Perpendicular Fill Growth } else { stroke Width = Attribute Keys get Stroke Total Width grow = get Perpendicular Draw Growth + stroke Width / 2d } grow } } 