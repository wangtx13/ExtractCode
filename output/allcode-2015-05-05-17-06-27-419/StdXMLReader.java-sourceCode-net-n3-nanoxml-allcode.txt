net n3 nanoxml import Input Stream import Input Stream Reader import I O Exception import File import File Input Stream import File Not Found Exception import Line Number Reader import Pushback Reader import Pushback Input Stream import Reader import String Reader import Unsupported Encoding Exception import net Malformed U R L Exception import net U R L import util Stack Std Xml Reader implements I Xml Reader { private Stacked Reader { Pushback Reader pb Reader Line Number Reader line Reader U R L Id String Id } private Stack readers private Stacked Reader current Reader I Xml Reader Reader String { new Std Xml Reader new String Reader } I Xml Reader Reader String filename File Not Found Exception I O Exception { Std Xml Reader = new Std Xml Reader new File Input Stream filename set Systemid filename for = 0 < readers size i++ { Stacked Reader sr = Stacked Reader readers element At sr Id = current Reader Id } } Std Xml Reader String publicid String systemid Malformed U R L Exception File Not Found Exception I O Exception { U R L systemidas U R L = try { systemidas U R L = new U R L systemid } catch Malformed U R L Exception { systemid = + systemid try { systemidas U R L = new U R L systemid } catch Malformed U R L Exception e2 { } } this current Reader = new Stacked Reader this readers = new Stack Reader reader = this open Stream publicid systemidas U R L to String this current Reader line Reader = new Line Number Reader reader this current Reader pb Reader = new Pushback Reader this current Reader line Reader 2 } Std Xml Reader Reader reader { this current Reader = new Stacked Reader this readers = new Stack this current Reader line Reader = new Line Number Reader reader this current Reader pb Reader = new Pushback Reader this current Reader line Reader 2 this current Reader Id = try { this current Reader Id = new U R L } catch Malformed U R L Exception { } } finalize Throwable { this current Reader line Reader = this current Reader pb Reader = this current Reader Id = this current Reader Id = this current Reader = this readers clear super finalize } String get Encoding String { if ! starts With <?xml { } index = 5 while index < length { String Buffer key = new String Buffer while index < length char At index <= ' ' { index++ } while index < length char At index >= 'a' char At index <= 'z' { key append char At index index++ } while index < length char At index <= ' ' { index++ } if index >= length || char At index != '=' { break } while index < length char At index != '\'' char At index != ' ' { index++ } if index >= length { break } char delimiter = char At index index++ index2 = index Of delimiter index if index2 < 0 { break } if key to String equals encoding { substring index index2 } index = index2 + 1 } } Reader stream2reader Input Stream stream String Buffer chars Read I O Exception { Pushback Input Stream pbstream = new Pushback Input Stream stream = pbstream read switch { case 0x00 case 0x F E case 0x F F pbstream unread new Input Stream Reader pbstream U T F-16 case 0x E F for = 0 < 2 i++ { pbstream read } new Input Stream Reader pbstream U T F-8 case 0x3 C = pbstream read chars Read append '<' while > 0 != 0x3 E { chars Read append char = pbstream read } if > 0 { chars Read append char } String encoding = this get Encoding chars Read to String if encoding == { new Input Stream Reader pbstream U T F-8 } chars Read set Length 0 try { new Input Stream Reader pbstream encoding } catch Unsupported Encoding Exception { new Input Stream Reader pbstream U T F-8 } default chars Read append char new Input Stream Reader pbstream U T F-8 } } Std Xml Reader Input Stream stream I O Exception { Pushback Input Stream pbstream = new Pushback Input Stream stream String Buffer chars Read = new String Buffer Reader reader = this stream2reader stream chars Read this current Reader = new Stacked Reader this readers = new Stack this current Reader line Reader = new Line Number Reader reader this current Reader pb Reader = new Pushback Reader this current Reader line Reader 2 this current Reader Id = try { this current Reader Id = new U R L } catch Malformed U R L Exception { } this start New Stream new String Reader chars Read to String } char read I O Exception { ch = this current Reader pb Reader read while ch < 0 { if this readers empty { new I O Exception Unexpected E O F } this current Reader pb Reader close this current Reader = Stacked Reader this readers pop ch = this current Reader pb Reader read } char ch } E O F Of Current Stream I O Exception { ch = this current Reader pb Reader read if ch < 0 { } else { this current Reader pb Reader unread ch } } E O F I O Exception { ch = this current Reader pb Reader read while ch < 0 { if this readers empty { } this current Reader pb Reader close this current Reader = Stacked Reader this readers pop ch = this current Reader pb Reader read } this current Reader pb Reader unread ch } unread char ch I O Exception { this current Reader pb Reader unread ch } Reader open Stream String publicid String systemid Malformed U R L Exception File Not Found Exception I O Exception { U R L url = new U R L this current Reader Id systemid if url get Ref != { String ref = url get Ref if url get File length > 0 { url = new U R L url get Protocol url get Host url get Port url get File url = new U R L jar + url + '!' + ref } else { url = Std Xml Reader get Resource ref } } this current Reader Id = publicid this current Reader Id = url String Buffer chars Read = new String Buffer Reader reader = this stream2reader url open Stream chars Read if chars Read length == 0 { reader } String chars Read Str = chars Read to String Pushback Reader pbreader = new Pushback Reader reader chars Read Str length for = chars Read Str length - 1 >= 0 i-- { pbreader unread chars Read Str char At } pbreader } start New Stream Reader reader { this start New Stream reader } start New Stream Reader reader Internal Entity { Stacked Reader old Reader = this current Reader this readers push this current Reader this current Reader = new Stacked Reader if Internal Entity { this current Reader line Reader = this current Reader pb Reader = new Pushback Reader reader 2 } else { this current Reader line Reader = new Line Number Reader reader this current Reader pb Reader = new Pushback Reader this current Reader line Reader 2 } this current Reader Id = old Reader Id this current Reader Id = old Reader Id } get Stream Level { this readers size } get Line Nr { if this current Reader line Reader == { Stacked Reader sr = Stacked Reader this readers peek if sr line Reader == { 0 } else { sr line Reader get Line Number + 1 } } this current Reader line Reader get Line Number + 1 } set Systemid String systemid Malformed U R L Exception { this current Reader Id = new U R L this current Reader Id systemid } set Publicid String publicid { this current Reader Id = publicid } String get Systemid { this current Reader Id to String } String get Publicid { this current Reader Id } } 