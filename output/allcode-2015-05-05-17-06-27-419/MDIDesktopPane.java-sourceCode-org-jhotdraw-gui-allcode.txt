org jhotdraw gui import javax swing * import javax swing event * import awt * import beans * import org jhotdraw app action Arrangeable M Didesktop Pane J Desktop Pane implements Arrangeable { private FRAME_OFFSET=20 private M Didesktop Manager manager M Didesktop Pane { manager = new M Didesktop Manager this set Desktop Manager manager set Drag Mode J Desktop Pane OUTLINE_DRAG_MODE set Alignment X J Component LEFT_ALIGNMENT } set Arrangement Arrangeable Arrangement new Value { Arrangeable Arrangement old Value = get Arrangement switch new Value { case C A S C A E arrange Frames Cascading break case H O R I Z O N T A L arrange Frames Horizontally break case V E R T I C A L arrange Frames Vertically break } fire Property Change arrangement old Value new Value } Arrangeable Arrangement get Arrangement { Arrangeable Arrangement C A S C A E } private arrange Frames Cascading { = 0 = 0 J Internal Frame all Frames = get All Frames if all Frames length == 0 { } manager set Normal Size frame Height = get Bounds height - 5 - all Frames length * FRAME_OFFSET frame Width = get Bounds width - 5 - all Frames length * FRAME_OFFSET for = all Frames length - 1 >= 0 i-- { try { all Frames set Maximum } catch Property Veto Exception { Stack Trace } all Frames set Bounds frame Width frame Height = + FRAME_OFFSET = + FRAME_OFFSET } check Desktop Size } private tile Frames Horizontally { Component all Frames = get All Frames if all Frames length == 0 { } manager set Normal Size frame Height = get Bounds height/all Frames length = 0 for = 0 < all Frames length i++ { try { J Internal Frame all Frames set Maximum } catch Property Veto Exception { Stack Trace } all Frames set Bounds 0 get Bounds width frame Height = + frame Height } check Desktop Size } tile Frames Vertically { Component all Frames = get All Frames if all Frames length == 0 { } manager set Normal Size frame Width = get Bounds width/all Frames length = 0 for = 0 < all Frames length i++ { try { J Internal Frame all Frames set Maximum } catch Property Veto Exception { Stack Trace } all Frames set Bounds 0 frame Width get Bounds height = + frame Width } check Desktop Size } arrange Frames Vertically { Component all Frames = get All Frames if all Frames length == 0 { } manager set Normal Size vert Frames = Math floor Math sqrt all Frames length hor Frames = Math ceil Math sqrt all Frames length frame Width = get Bounds width / hor Frames frame Height = get Bounds height / vert Frames = 0 = 0 frame Idx = 0 for hor Cnt = 0 hor Cnt < hor Frames-1 hor Cnt++ { = 0 for vert Cnt = 0 vert Cnt < vert Frames vert Cnt++ { try { J Internal Frame all Frames frame Idx set Maximum } catch Property Veto Exception { Stack Trace } all Frames frame Idx set Bounds frame Width frame Height frame Idx++ = + frame Height } = + frame Width } frame Height = get Bounds height / all Frames length - frame Idx = 0 for frame Idx < all Frames length frame Idx++ { try { J Internal Frame all Frames frame Idx set Maximum } catch Property Veto Exception { Stack Trace } all Frames frame Idx set Bounds frame Width frame Height = + frame Height } check Desktop Size } arrange Frames Horizontally { Component all Frames = get All Frames if all Frames length == 0 { } manager set Normal Size vert Frames = Math ceil Math sqrt all Frames length hor Frames = Math floor Math sqrt all Frames length frame Width = get Bounds width / hor Frames frame Height = get Bounds height / vert Frames = 0 = 0 frame Idx = 0 for vert Cnt = 0 vert Cnt < vert Frames-1 vert Cnt++ { = 0 for hor Cnt = 0 hor Cnt < hor Frames hor Cnt++ { try { J Internal Frame all Frames frame Idx set Maximum } catch Property Veto Exception { Stack Trace } all Frames frame Idx set Bounds frame Width frame Height frame Idx++ = + frame Width } = + frame Height } frame Width = get Bounds width / all Frames length - frame Idx = 0 for frame Idx < all Frames length frame Idx++ { try { J Internal Frame all Frames frame Idx set Maximum } catch Property Veto Exception { Stack Trace } all Frames frame Idx set Bounds frame Width frame Height = + frame Width } check Desktop Size } set All Size Dimension { set Minimum Size set Maximum Size set Preferred Size set Bounds 0 0 width height } set All Size width height { set All Size new Dimension width height } private check Desktop Size { if get Parent != Visible { manager resize Desktop } } } M Didesktop Manager Default Desktop Manager { private M Didesktop Pane desktop M Didesktop Manager M Didesktop Pane new Desktop { this desktop = new Desktop } Resizing Frame J Component { super Resizing Frame resize Desktop } Dragging Frame J Component { super Dragging Frame resize Desktop } set Normal Size { J Scroll Pane scroll Pane = get Scroll Pane Insets scroll Insets = get Scroll Pane Insets if scroll Pane != { Dimension = scroll Pane get Visible Rect get Size if scroll Pane get Border != { set Size get Width - scroll Insets left - scroll Insets right get Height - scroll Insets top - scroll Insets bottom } set Size get Width - 20 get Height - 20 desktop set All Size scroll Pane invalidate scroll Pane validate } } private Insets get Scroll Pane Insets { J Scroll Pane scroll Pane = get Scroll Pane if scroll Pane == || get Scroll Pane get Border == { new Insets 0 0 0 0 } else { get Scroll Pane get Border get Border Insets scroll Pane } } J Scroll Pane get Scroll Pane { if desktop get Parent instanceof J Viewport { J Viewport view Port = J Viewport desktop get Parent if view Port get Parent instanceof J Scroll Pane J Scroll Pane view Port get Parent } } resize Desktop { = 0 = 0 J Scroll Pane scroll Pane = get Scroll Pane Insets scroll Insets = get Scroll Pane Insets if scroll Pane != { J Internal Frame all Frames = desktop get All Frames for = 0 < all Frames length i++ { if all Frames get X + all Frames get Width > { = all Frames get X + all Frames get Width } if all Frames get Y + all Frames get Height > { = all Frames get Y + all Frames get Height } } Dimension d=scroll Pane get Visible Rect get Size if scroll Pane get Border != { set Size get Width - scroll Insets left - scroll Insets right get Height - scroll Insets top - scroll Insets bottom } if <= get Width { = get Width - 20 } if <= get Height { = get Height - 20 } desktop set All Size scroll Pane invalidate scroll Pane validate } } } 