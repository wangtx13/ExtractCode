org jhotdraw draw import * import awt * import awt geom * import org jhotdraw geom Geom import org jhotdraw util * import org jhotdraw draw Attribute Keys * Abstract Line Decoration implements Line Decoration { private Filled private Stroked private Solid Abstract Line Decoration Filled Stroked Solid { this Filled = Filled this Stroked = Stroked this Solid = Solid } Filled { Filled } Stroked { Stroked } Solid { Solid } draw Graphics2 Figure Point2 p1 Point2 p2 { General Path path = get Transformed Decorator Path p1 p2 Color color if Filled { if Solid { color = STROKE_COLOR get } else { color = FILL_COLOR get } if color != { set Color color fill path } } if Stroked { color = STROKE_COLOR get if color != { set Color color set Stroke Attribute Keys get Stroke draw path } } } Rectangle2 get Draw Bounds Figure Point2 p1 Point2 p2 { General Path path = get Transformed Decorator Path p1 p2 Rectangle2 = path get Bounds2 Rectangle2 bounds = new Rectangle2 get X get Y get Width get Height if Stroked { stroke Width = STROKE_WIDTH get stroke Join = STROKE_JOIN get float miter Limit = float STROKE_MITER_LIMIT_FACTOR get * stroke Width grow if stroke Join == Basic Stroke JOIN_MITER { grow = 1 + stroke Width / 2 * miter Limit } else { grow = 1 + stroke Width / 2 } Geom grow bounds grow grow } bounds } get Decoration Radius Figure { stroke Width = STROKE_WIDTH get scale Factor if stroke Width > 1f { scale Factor = 1d + stroke Width - 1d / 2d } else { scale Factor = 1d } get Decorator Path Radius * scale Factor } private General Path get Transformed Decorator Path Figure Point2 p1 Point2 p2 { General Path path = get Decorator Path stroke Width = STROKE_WIDTH get Affine Transform transform = new Affine Transform transform translate p1 p1 transform rotate Math atan2 p1 - p2 p2 - p1 if stroke Width > 1f { transform scale 1d + stroke Width - 1d / 2d 1d + stroke Width - 1d / 2d } path transform transform path } set Filled { Filled = } set Stroked { Stroked = } set Solid { Solid = } General Path get Decorator Path Figure get Decorator Path Radius Figure } 