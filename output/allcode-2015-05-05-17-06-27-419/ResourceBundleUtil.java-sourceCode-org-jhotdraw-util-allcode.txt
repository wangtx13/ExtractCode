org jhotdraw util import util * import javax swing * import text * import net * import * Resource Bundle Util { private Resource Bundle resource private Class base Class = get Class Resource Bundle Util Resource Bundle { resource = } Resource Bundle get Bundle { resource } String get String String key { try { resource get String key } catch Missing Resource Exception { key } } Integer get Integer String key { try { Integer value Of resource get String key } catch Missing Resource Exception { new Integer -1 } } Image Icon get Image Icon String key Class base Class { try { String rsrc Name = resource get String key+ icon if rsrc Name equals { } if ! rsrc Name starts With / { String image Dir try { image Dir = resource get String $image Dir if ! image Dir With / { image Dir = image Dir+ / } } catch Missing Resource Exception { image Dir = } rsrc Name = image Dir+rsrc Name } U R L url = base Class get Resource rsrc Name url == ? new Image Icon url } catch Missing Resource Exception { } } char get Mnemonic String key { String = resource get String key == || length == 0 ? '\0' char At 0 } char get Mnem String key { String try { = resource get String key+ mnem } catch Missing Resource Exception { = } == || length == 0 ? '\0' char At 0 } String get Tip String key { try { resource get String key+ tip } catch Missing Resource Exception { } } Key Stroke get Key Stroke String key { Key Stroke ks = try { String = resource get String key ks = == ? Key Stroke Key Stroke get Key Stroke } catch No Such Element Exception { } ks } Key Stroke get Acc String key { Key Stroke ks = try { String = resource get String key+ acc ks = == ? Key Stroke Key Stroke get Key Stroke } catch Missing Resource Exception { } catch No Such Element Exception { } ks } String get Formatted String key String argument { Message Format format resource get String key new Object {argument} } String get Formatted String key Object arguments { Message Format format resource get String key arguments } Resource Bundle Util get L A F Bundle String base Name Missing Resource Exception { get L A F Bundle base Name Locale Util get Default } set Base Class Class base Class { this base Class = base Class } Class get Base Class { base Class } configure Action Action action String argument { configure Action action argument get Base Class } configure Action Action action String argument Class base Class { action put Value Action N A M E get String argument action put Value Action ACCELERATOR_KEY get Acc argument action put Value Action MNEMONIC_KEY new Integer get Mnem argument action put Value Action SMALL_ICON get Image Icon argument base Class } configure Button Abstract Button button String argument { configure Button button argument get Base Class } configure Button Abstract Button button String argument Class base Class { button set Text get String argument button set Icon get Image Icon argument base Class button set Tool Tip Text get Tip argument } configure Tool Bar Button Abstract Button button String argument { configure Tool Bar Button button argument get Base Class } configure Tool Bar Button Abstract Button button String argument Class base Class { button set Text button set Icon get Image Icon argument base Class button set Tool Tip Text get Tip argument } configure Menu J Menu Item menu String argument { menu set Text get String argument if ! menu instanceof J Menu { menu set Accelerator get Acc argument } menu set Mnemonic get Mnem argument } Resource Bundle Util get L A F Bundle String base Name Locale locale Missing Resource Exception { Resource Bundle Util try { = new Resource Bundle Util Resource Bundle get Bundle baseName+'_'+UIManager get Look And Feel getid locale } catch Missing Resource Exception { = new Resource Bundle Util Resource Bundle get Bundle base Name locale } } } 