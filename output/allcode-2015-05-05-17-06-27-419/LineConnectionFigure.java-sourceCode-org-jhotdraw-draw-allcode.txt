org jhotdraw draw import org jhotdraw util * import awt * import awt event * import awt geom * import util * import javax swing undo * import * import org jhotdraw geom * import org jhotdraw xml Dom Input import org jhotdraw xml Dom Output Line Connection Figure Line Figure implements Connection Figure { private Connector start Connector private Connector Connector private Liner liner private Connection Handler connection Handler = new Connection Handler this private Connection Handler implements Figure Listener { private Line Connection Figure owner private Connection Handler Line Connection Figure owner { this owner = owner } figure Request Remove Figure Event { } figure Removed Figure Event evt { owner fire Figure Request Remove } figure Changed Figure Event { if get Source == owner get Start Figure || get Source == owner get End Figure { owner will Change owner update Connection owner changed } } figure Added Figure Event { } figure Attribute Changed Figure Event { } figure Area Invalidated Figure Event { } } Line Connection Figure { } basic Transform Affine Transform tx { super basic Transform tx update Connection } Collection< Handle> create Handles detail Level { Array List< Handle> handles = new Array List< Handle> get Node Count switch detail Level { case 0 if get Liner == { for = 1 = get Node Count - 1 < i++ { handles add new Bezier Node Handle this } } handles add new Change Connection Start Handle this handles add new Change Connection End Handle this break } handles } can Connect { } update Connection { will Change if get Start Connector != { Point2 start = get Start Connector find Start this if start != { basic Set Start Point start } } if get End Connector != { Point2 = get End Connector find End this if != { basic Set End Point } } changed } validate { super validate lineout } can Connect Figure start Figure { start can Connect can Connect } connects Same Connection Figure other { other get Start Connector == get Start Connector other get End Connector == get End Connector } Connector get End Connector { Connector } Figure get End Figure { Connector == ? Connector get Owner } Connector get Start Connector { start Connector } Figure get Start Figure { start Connector == ? start Connector get Owner } set End Connector Connector new End { Connector old End = Connector if new End != old End { will Change basic Set End Connector new End fire Undoable Edit Happened new Abstract Undoable Edit { String get Presentation Name { End- Verbindung setzen } undo Cannot Undo Exception { super undo will Change basic Set End Connector old End changed } redo Cannot Undo Exception { super redo will Change basic Set End Connector new End changed } } changed } } basic Set End Connector Connector new End { if new End != Connector { if Connector != { get End Figure remove Figure Listener connection Handler if get Start Figure != { handle Disconnect get Start Figure get End Figure } } Connector = new End if Connector != { get End Figure add Figure Listener connection Handler if get Start Figure != get End Figure != { handle Connect get Start Figure get End Figure update Connection } } } } set Start Connector Connector new Start { Connector old Start = start Connector if new Start != old Start { will Change basic Set Start Connector new Start fire Undoable Edit Happened new Abstract Undoable Edit { String get Presentation Name { Start- Verbindung setzen } undo Cannot Undo Exception { super undo will Change basic Set Start Connector old Start changed } redo Cannot Undo Exception { super redo will Change basic Set Start Connector new Start changed } } changed } } basic Set Start Connector Connector new Start { if new Start != start Connector { if start Connector != { get Start Figure remove Figure Listener connection Handler if get End Figure != { handle Disconnect get Start Figure get End Figure } } start Connector = new Start if start Connector != { get Start Figure add Figure Listener connection Handler if get Start Figure != get End Figure != { handle Connect get Start Figure get End Figure update Connection } } } } add Notify Drawing drawing { super add Notify drawing } remove Notify Drawing drawing { super remove Notify drawing } handle Disconnect Figure start Figure { } handle Connect Figure start Figure { } Line Connection Figure clone { Line Connection Figure that = Line Connection Figure super clone that connection Handler = new Connection Handler that if this liner != { that liner = Liner this liner clone } if this start Connector != { that start Connector = Connector this start Connector clone that get Start Figure add Figure Listener that connection Handler } if this Connector != { that Connector = Connector this Connector clone that get End Figure add Figure Listener that connection Handler } if that start Connector != that Connector != { that handle Connect that get Start Figure that get End Figure that update Connection } that } remap Map old To New { will Change super remap old To New Figure new Start Figure = Figure new End Figure = if get Start Figure != { new Start Figure = Figure old To New get get Start Figure if new Start Figure == new Start Figure = get Start Figure } if get End Figure != { new End Figure = Figure old To New get get End Figure if new End Figure == new End Figure = get End Figure } if new Start Figure != { set Start Connector new Start Figure find Compatible Connector get Start Connector } if new End Figure != { set End Connector new End Figure find Compatible Connector get End Connector } update Connection changed } can Connect Figure start { start can Connect } handle Mouse Click Point2 Mouse Event evt Drawing View view { if get Liner == evt get Click Count == 2 { will Change index = basic Split Segment float 5f / view get Scale Factor if index != -1 { Bezier Path Node new Node = get Node index fire Undoable Edit Happened new Abstract Undoable Edit { redo Cannot Redo Exception { super redo will Change basic Add Node index new Node changed } undo Cannot Undo Exception { super undo will Change basic Remove Node index changed } } changed } } } read Points Dom Input I O Exception { super read Points open Element start Connector set Start Connector Connector read Object close Element open Element Connector set End Connector Connector read Object close Element } read Dom Input I O Exception { read Points read Attributes read Liner } read Liner Dom Input I O Exception { if get Element Count liner > 0 { open Element liner liner = Liner read Object close Element } } write Dom Output out I O Exception { write Points out write Attributes out write Liner out } write Liner Dom Output out I O Exception { if liner != { out open Element liner out write Object liner out close Element } } write Points Dom Output out I O Exception { super write Points out out open Element start Connector out write Object get Start Connector out close Element out open Element Connector out write Object get End Connector out close Element } set Liner Liner new Value { will Change this liner = new Value changed } basic Set Node index Bezier Path Node { if index != 0 index != get Point Count - 1 { if get Start Connector != { Point2 start = get Start Connector find Start this if start != { basic Set Start Point start } } if get End Connector != { Point2 = get End Connector find End this if != { basic Set End Point } } } super basic Set Node index } lineout { if liner != { liner lineout this } } Bezier Path get Bezier Path { path } Liner get Liner { liner } set Start Point Point2 { set Point 0 } set Point index Point2 { set Point index 0 } set End Point Point2 { set Point get Point Count - 1 } reverse Connection { if start Connector != Connector != { handle Disconnect start Connector get Owner Connector get Owner Connector tmp C = start Connector start Connector = Connector Connector = tmp C Point2 tmp P = get Start Point set Start Point get End Point set End Point tmp P handle Connect start Connector get Owner Connector get Owner update Connection } } } 