org jhotdraw xml import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import * import awt * Javax Dom Input implements Dom Input { private Hash Map< String Object> idobjects = new Hash Map< String Object> private Document document private Node current private Dom Factory factory Javax Dom Input Dom Factory factory Input Stream I O Exception { this factory = factory try { Transformer = Transformer Factory new Instance new Transformer Dom Result result = new Dom Result transform new Stream Source result document = Document result get Node current = document } catch Transformer Exception { I O Exception error = new I O Exception get Message error init Cause error } } Javax Dom Input Dom Factory factory Reader I O Exception { this factory = factory try { Transformer = Transformer Factory new Instance new Transformer Dom Result result = new Dom Result transform new Stream Source result document = Document result get Node current = document } catch Transformer Exception { I O Exception error = new I O Exception get Message error init Cause error } } String get Tag Name { Element current get Tag Name } String get Attribute String String default Value { String value = Element current get Attribute value length == 0 ? default Value value } String get Text { get Text } String get Text String default Value { if current get Child Nodes get Length == 0 default Value String Builder buf = new String Builder get Text current buf buf to String } private get Text Node String Builder buf { if get Node Value != buf append get Node Value Node List children = get Child Nodes for i=0 < children get Length i++ { get Text children item buf } } util List< String> get Inherited Attribute String { Linked List< String> values = new Linked List< String> Node node = current while node != { String value = String Element node get Attribute values add First value node = node get Parent Node } values } get Attribute String default Value { String value = Element current get Attribute value length == 0 ? default Value Long decode value Value } get Attribute String default Value { String value = Element current get Attribute value length == 0 ? default Value parse value } get Attribute String default Value { String value = Element current get Attribute value length == 0 ? default Value Boolean value Of value Value } get Element Count { count = 0 Node List list = current get Child Nodes for i=0 < list get Length i++ { Node node = list item if node instanceof Element { count++ } } count } get Element Count String tag Name { count = 0 Node List list = current get Child Nodes for i=0 < list get Length i++ { Node node = list item if node instanceof Element Element node get Tag Name equals tag Name { count++ } } count } open Element index { count = 0 Node List list = current get Child Nodes len = list get Length for i=0 < len i++ { Node node = list item if node instanceof Element { if count++ == index { current = node } } } } open Element String tag Name { count = 0 Node List list = current get Child Nodes len = list get Length for i=0 < len i++ { Node node = list item if node instanceof Element Element node get Tag Name equals tag Name { current = node } } new Illegal Argument Exception element not found +tag Name } open Element String tag Name index { count = 0 Node List list = current get Child Nodes len = list get Length for i=0 < len i++ { Node node = list item if node instanceof Element Element node get Tag Name equals tag Name { if count++ == index { current = node } } } new Illegal Argument Exception no such child +tag Name+ +index+ } close Element { current = current get Parent Node } Object read Object I O Exception { read Object 0 } Object read Object index I O Exception { open Element index Object String tag Name = get Tag Name if tag Name equals { = } else if tag Name equals { = get Text } else if tag Name equals { = Integer decode get Text } else if tag Name equals long { = Long decode get Text } else if tag Name equals float { = new Float Float parse Float get Text } else if tag Name equals { = new parse get Text } else if tag Name equals { = Boolean value Of get Text } else if tag Name equals color { = new Color get Attribute rgba 0xff } else if tag Name equals Array { = new get Element Count for i=0 < length i++ { = Integer read Object Value } = } else if tag Name equals float Array { float = new float get Element Count for i=0 < length i++ { = Float read Object float Value } = } else if tag Name equals Array { = new get Element Count for i=0 < length i++ { = read Object Value } = } else if tag Name equals font { = new Font get Attribute Dialog get Attribute style 0 get Attribute size 0 } else if tag Name equals enum { = factory create Enum get Attribute type String get Text } else { String ref = get Attribute ref String = get Attribute ref if == { = factory create get Tag Name } else if idobjects contains Key { = idobjects get } else { = factory create get Tag Name idobjects put } if ref == { if instanceof Dom Storable { Dom Storable read this } } } close Element } } 