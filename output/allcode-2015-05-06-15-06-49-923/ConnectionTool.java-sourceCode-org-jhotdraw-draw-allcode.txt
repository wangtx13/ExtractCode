org jhotdraw draw import org jhotdraw undo * import org jhotdraw util * import awt * import awt geom * import awt event * import util * import awt dnd * connectiontool connection tool abstracttool tool implements figurelistener figure listener { private map<attributekey map< attribute key object> attributes private connector startconnector start connector private connector endconnector end connector private connector targetconnector target connector private figure target private connectionfigure connection figure connection private splitpoint split point private connectionfigure connection figure editedconnection edited connection private figure createdfigure created figure connectionfigure connection figure prototype ispressed is pressed connectiontool connection tool connectionfigure connection figure prototype { this prototype = prototype } connectiontool connection tool connectionfigure connection figure prototype map attributes { this prototype = prototype this attributes = attributes } connectiontool connection tool prototypeclassname prototype name { this prototypeclassname prototype name } connectiontool connection tool prototypeclassname prototype name map<attributekey map< attribute key object> attributes { try { this prototype = connectionfigure connection figure forname for name prototypeclassname prototype name newinstance new instance } catch e { internalerror internal = new internalerror internal unable to create connectionfigure connection figure from +prototypeclassname +prototype name initcause init cause e throw } this attributes = attributes } connectionfigure connection figure getprototype get prototype { prototype } mousemoved mouse moved mouseevent mouse event evt { trackconnectors track connectors evt } mousepressed mouse pressed mouseevent mouse event evt { super mousepressed mouse pressed evt ispressed is pressed = getview get view clearselection clear selection point2d point2 d ap = viewtodrawing view to drawing anchor if gettargetfigure get target figure != { gettargetfigure get target figure setconnectorsvisible set connectors visible } settargetfigure set target figure findconnectionstart find connection start ap getdrawing get drawing if gettargetfigure get target figure != { setstartconnector set start connector findconnector find connector ap target prototype if getstartconnector get start connector != canconnect can connect gettargetfigure get target figure { point2d point2 d p = getstartconnector get start connector getanchor get anchor setconnection set connection createfigure create figure getconnection get connection basicsetbounds basic set bounds p p getconnection get connection addfigurelistener add figure listener this setcreatedfigure set created figure getconnection get connection } } } mousedragged mouse dragged awt event mouseevent mouse event e { point2d point2 d p = viewtodrawing view to drawing new point e getx get x e gety get y if getconnection get connection != { trackconnectors track connectors e if gettargetconnector get target connector != { p = gettargetconnector get target connector getanchor get anchor } connectionfigure connection figure f = getconnection get connection fireareainvalidated fire area invalidated f getdrawbounds get draw bounds f willchange will change f basicsetbounds basic set bounds f getstartpoint get start point p f changed fireareainvalidated fire area invalidated f getdrawbounds get draw bounds } else if editedconnection edited connection != { editedconnection edited connection willchange will change editedconnection edited connection setpoint set point splitpoint split point p editedconnection edited connection changed } } canconnect can connect figure start { prototype canconnect can connect start } canconnect can connect figure start figure end { prototype canconnect can connect start end } mousereleased mouse released mouseevent mouse event e { ispressed is pressed = isworking is working = figure c = point2d point2 d p = viewtodrawing view to drawing new point e getx get x e gety get y if getstartconnector get start connector != { c = findtarget find target p getdrawing get drawing } if c != { setendconnector set end connector findconnector find connector p c prototype if getendconnector get end connector != { compositeedit composite edit creationedit creation edit = new compositeedit composite edit verbindung erstellen getdrawing get drawing fireundoableedithappened fire undoable edit happened creationedit creation edit connectionfigure connection figure f = getconnection get connection f willchange will change f setstartconnector set start connector getstartconnector get start connector f setendconnector set end connector getendconnector get end connector f basicsetbounds basic set bounds f getstartpoint get start point p f updateconnection update connection f changed f removefigurelistener remove figure listener this getdrawing get drawing add f getdrawing get drawing fireundoableedithappened fire undoable edit happened creationedit creation edit } } else if getconnection get connection != { getdrawing get drawing remove getconnection get connection } setconnection set connection setstartconnector set start connector setendconnector set end connector setcreatedfigure set created figure firetooldone fire tool done } activate drawingeditor drawing editor editor { super activate editor } deactivate drawingeditor drawing editor editor { super deactivate editor if gettargetfigure get target figure != { gettargetfigure get target figure setconnectorsvisible set connectors visible } } connectionfigure connection figure createfigure create figure { connectionfigure connection figure f = connectionfigure connection figure prototype clone geteditor get editor applydefaultattributesto apply default attributes to f if attributes != { for map entry<attributekey entry< attribute key object> entry attributes entryset entry set { f setattribute set attribute attributekey attribute key entry getkey get key entry getvalue get value } } f } figure findsource find source point2d point2 d p drawing drawing { findconnectablefigure find connectable figure p drawing } figure findtarget find target point2d point2 d p drawing drawing { figure target = findconnectablefigure find connectable figure p drawing figure start = getstartconnector get start connector getowner get owner if target != getconnection get connection != canconnect can connect target canconnect can connect start target { target } } connectionfigure connection figure findconnection find connection point2d point2 d p drawing drawing { for figure f drawing getfiguresfronttoback get figures front to back { if f != f instanceof connectionfigure connection figure { connectionfigure connection figure f } } } setconnection set connection connectionfigure connection figure newconnection new connection { connection = newconnection new connection } connectionfigure connection figure getconnection get connection { connection } trackconnectors track connectors mouseevent mouse event e { point2d point2 d p = viewtodrawing view to drawing new point e getx get x e gety get y figure c = if getstartconnector get start connector == { c = findsource find source p getdrawing get drawing } else { c = findtarget find target p getdrawing get drawing } if c != gettargetfigure get target figure { if gettargetfigure get target figure != { gettargetfigure get target figure setconnectorsvisible set connectors visible } settargetfigure set target figure c if getstartconnector get start connector != { if gettargetfigure get target figure != canconnect can connect getstartconnector get start connector getowner get owner gettargetfigure get target figure { gettargetfigure get target figure setconnectorsvisible set connectors visible getconnection get connection } } else { if gettargetfigure get target figure != canconnect can connect gettargetfigure get target figure { gettargetfigure get target figure setconnectorsvisible set connectors visible getconnection get connection } } } connector cc = if c != { cc = findconnector find connector p c prototype } if cc != gettargetconnector get target connector { settargetconnector set target connector cc } } draw graphics2d graphics2 d g { if createdfigure created figure != { graphics2d graphics2 d gg = graphics2d graphics2 d g create gg transform getview get view getdrawingtoviewtransform get drawing to view transform createdfigure created figure draw gg gg dispose } } connector findconnector find connector point2d point2 d p figure target connectionfigure connection figure f { target findconnector find connector p f } figure findconnectionstart find connection start point2d point2 d p drawing drawing { figure target = findconnectablefigure find connectable figure p drawing if target != target canconnect can connect { target } } figure findconnectablefigure find connectable figure point2d point2 d p drawing drawing { drawing findfigureexcept find figure except p createdfigure created figure } setstartconnector set start connector connector newstartconnector new start connector { startconnector start connector = newstartconnector new start connector } connector getstartconnector get start connector { startconnector start connector } setendconnector set end connector connector newendconnector new end connector { endconnector end connector = newendconnector new end connector } connector getendconnector get end connector { endconnector end connector } private settargetconnector set target connector connector newtargetconnector new target connector { targetconnector target connector = newtargetconnector new target connector } connector gettargetconnector get target connector { targetconnector target connector } private settargetfigure set target figure figure newtarget new target { target = newtarget new target } figure gettargetfigure get target figure { target } figure getcreatedfigure get created figure { createdfigure created figure } setcreatedfigure set created figure figure newcreatedfigure new created figure { createdfigure created figure = newcreatedfigure new created figure } figureareainvalidated figure area invalidated figureevent figure event evt { fireareainvalidated fire area invalidated evt getinvalidatedarea get invalidated area } figureadded figure added figureevent figure event e { } figurechanged figure changed figureevent figure event e { } figureremoved figure removed figureevent figure event e { } figurerequestremove figure request remove figureevent figure event e { } figureattributechanged figure attribute changed figureevent figure event e { } } 