org jhotdraw draw import org jhotdraw util * import awt * import awt font * import awt geom * import util * import io * import org jhotdraw draw attributekeys attribute keys * import org jhotdraw geom * import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output textfigure text figure attributedfigure attributed figure implements textholder text holder { point2d point2 d origin = new point2d point2 d private editable = transient private textlayout text layout textlayout text layout textfigure text figure { this text } textfigure text figure text { settext set text text } gettext get text { getattribute get attribute text t e x t } settext set text newtext new text { setattribute set attribute text t e x t newtext new text } basictransform basic transform affinetransform affine transform tx { tx transform origin origin } basicsetbounds basic set bounds point2d point2 d anchor point2d point2 d { origin = new point2d point2 d anchor x anchor y } contains point2d point2 d p { if getbounds get bounds contains p { } if decorator != { updatedecoratorbounds update decorator bounds decorator contains p } } drawstroke draw stroke awt graphics2d graphics2 d g { } drawfill draw fill awt graphics2d graphics2 d g { } drawtext draw text awt graphics2d graphics2 d g { if gettext get text != || iseditable is editable { textlayout text layout layout = gettextlayout get text layout layout draw g float origin x float origin y + layout getascent get ascent } } invalidate { super invalidate textlayout text layout = } textlayout text layout gettextlayout get text layout { if textlayout text layout == { text = gettext get text if text == || text length == 0 { text = } fontrendercontext font render context frc = getfontrendercontext get font render context hashmap<textattribute hash map< text attribute object> textattributes text attributes = new hashmap<textattribute hash map< text attribute object> textattributes text attributes put textattribute text attribute font f o n t getfont get font if FONT_UNDERLINED get this { textattributes text attributes put textattribute text attribute underline u n d e r l i n e textattribute text attribute UNDERLINE_LOW_ONE_PIXEL } textlayout text layout = new textlayout text layout text textattributes text attributes frc } textlayout text layout } rectangle2d rectangle2 d getbounds get bounds { textlayout text layout layout = gettextlayout get text layout rectangle2d rectangle2 d r = new rectangle2d rectangle2 d origin x origin y layout getadvance get advance layout getascent get ascent + layout getdescent get descent r } dimension2ddouble dimension2 d getpreferredsize get preferred size { rectangle2d rectangle2 d b = getbounds get bounds new dimension2ddouble dimension2 d b width b height } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { if gettext get text == { getbounds get bounds } else { textlayout text layout layout = gettextlayout get text layout rectangle2d rectangle2 d r = new rectangle2d rectangle2 d origin x origin y layout getadvance get advance layout getascent get ascent rectangle2d rectangle2 d lbounds l bounds = layout getbounds get bounds if ! lbounds l bounds isempty is empty ! isnan is na n lbounds l bounds getx get x { r add new rectangle2d rectangle2 d lbounds l bounds getx get x +origin x lbounds l bounds gety get y +origin y+layout getascent get ascent lbounds l bounds getwidth get width lbounds l bounds getheight get height } geom grow r 2d 2d r } } collection<handle> collection< handle> createhandles create handles detaillevel detail level { linkedlist<handle> linked list< handle> handles = new linkedlist<handle> linked list< handle> if detaillevel detail level == 0 { handles add new movehandle move handle this relativelocator relative locator northwest north west handles add new movehandle move handle this relativelocator relative locator northeast north east handles add new movehandle move handle this relativelocator relative locator southeast south east handles add new fontsizehandle font size handle this } handles } validate { super validate textlayout text layout = } iseditable is editable { editable } seteditable set editable b { this editable = b } gettextcolumns get text columns { gettext get text == ? 4 math max gettext get text length 4 } tool gettool get tool point2d point2 d p { iseditable is editable contains p ? new texttool text tool this } read dominput dom input in ioexception i o { setbounds set bounds new point2d point2 d in getattribute get attribute x 0d in getattribute get attribute y 0d new point2d point2 d 0 0 readattributes read attributes in } write domoutput dom output out ioexception i o { rectangle2d rectangle2 d b = getbounds get bounds out addattribute add attribute x b x out addattribute add attribute y b y writeattributes write attributes out } gettabsize get tab size { 8 } textholder text holder getlabelfor get label for { this } insets2ddouble insets2 d getinsets get insets { new insets2ddouble insets2 d 0 0 0 0 } restoreto restore to geometry { point2d point2 d p = point2d point2 d geometry origin x = p x origin y = p y } getrestoredata get restore data { origin clone } textfigure text figure clone { textfigure text figure that = textfigure text figure super clone that origin = point2d point2 d this origin clone that textlayout text layout = that } font getfont get font { attributekeys attribute keys getfont get font this } color gettextcolor get text color { TEXT_COLOR get this } color getfillcolor get fill color { FILL_COLOR get this } setfontsize set font size float size { FONT_SIZE set this new size } float getfontsize get font size { FONT_SIZE get this floatvalue float value } } 