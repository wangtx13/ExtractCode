org jhotdraw samples svg figures import awt * import awt event * import awt geom * import io * import util * import javax swing * import org jhotdraw draw * import org jhotdraw draw action * import org jhotdraw geom * import org jhotdraw samples svg * import org jhotdraw util * import org jhotdraw xml * import org jhotdraw draw attributekeys attribute keys * svgpath s v g path abstractattributedcompositefigure attributed composite figure implements svgfigure s v g figure { private generalpath general path path svgpath s v g path { add new bezierfigure bezier figure svgutil s v g util setdefaults set defaults this } drawfigure draw figure graphics2d graphics2 d g { validatepath validate path if attributekeys attribute keys FILL_COLOR get this != { g setcolor set color attributekeys attribute keys FILL_COLOR get this drawfill draw fill g } if STROKE_COLOR get this != { g setstroke set stroke attributekeys attribute keys getstroke get stroke this g setcolor set color STROKE_COLOR get this drawstroke draw stroke g } if isconnectorsvisible is connectors visible { drawconnectors draw connectors g } } drawfill draw fill graphics2d graphics2 d g { if getchildren get children size > 0 { g fill path } } drawstroke draw stroke graphics2d graphics2 d g { g draw path } invalidate { super invalidate invalidatepath invalidate path } validate { validatepath validate path super validate } validatepath validate path { if path == { path = new generalpath general path path setwindingrule set winding rule WINDING_RULE get this == windingrule winding rule EVEN_ODD ? generalpath general path WIND_EVEN_ODD generalpath general path WIND_NON_ZERO for figure child getchildren get children { bezierfigure bezier figure b = bezierfigure bezier figure child path append b getbezierpath get bezier path } } } invalidatepath invalidate path { path = } @override @ override write domoutput dom output out ioexception i o { writepoints write points out writeattributes write attributes out } writepoints write points domoutput dom output out { stringbuilder builder buf = new stringbuilder builder for figure child getchildren get children { bezierfigure bezier figure b = bezierfigure bezier figure child buf append svgutil s v g util topathdata to path data b getbezierpath get bezier path } out addattribute add attribute d buf tostring to } writeattributes write attributes domoutput dom output out ioexception i o { svgutil s v g util writeattributes write attributes this out } @override @ override read dominput dom input in ioexception i o { readpoints read points in readattributes read attributes in affinetransform affine transform tx = svgutil s v g util gettransform get transform in transform basictransform basic transform tx } readpoints read points dominput dom input in ioexception i o { removeallchildren remove all children if in gettagname get tag name equals polyline { bezierpath bezier path b = new bezierpath bezier path points = in getattribute get attribute points stringtokenizer tokenizer tt = new stringtokenizer tokenizer points while tt hasmoretokens has more tokens { b add new bezierpath bezier path node valueof value of tt nexttoken next token valueof value of tt nexttoken next token } bezierfigure bezier figure child = new bezierfigure bezier figure child basicsetbezierpath basic set bezier path b basicadd basic add child } else if in gettagname get tag name equals polygon { bezierpath bezier path b = new bezierpath bezier path b setclosed set closed points = in getattribute get attribute points stringtokenizer tokenizer tt = new stringtokenizer tokenizer points while tt hasmoretokens has more tokens { b add new bezierpath bezier path node valueof value of tt nexttoken next token valueof value of tt nexttoken next token } bezierfigure bezier figure child = new bezierfigure bezier figure child basicsetbezierpath basic set bezier path b basicadd basic add child } else { util list<bezierpath> list< bezier path> paths = svgutil s v g util getpath get path in d for bezierpath bezier path b paths { bezierfigure bezier figure child = new bezierfigure bezier figure child basicsetbezierpath basic set bezier path b basicadd basic add child } if paths size == 0 { bezierfigure bezier figure child = new bezierfigure bezier figure basicadd basic add child } } } readattributes read attributes dominput dom input in ioexception i o { svgutil s v g util readattributes read attributes this in } basictransform basic transform affinetransform affine transform tx { super basictransform basic transform tx invalidatepath invalidate path } isempty is empty { for figure child getchildren get children { bezierfigure bezier figure b = bezierfigure bezier figure child if b getpointcount get point count > 0 { } } } @override @ override linkedlist<handle> linked list< handle> createhandles create handles detaillevel detail level { linkedlist<handle> linked list< handle> handles if detaillevel detail level == 0 { handles = linkedlist<handle> linked list< handle> super createhandles create handles detaillevel detail level handles add new rotatehandle rotate handle this } else { handles = new linkedlist<handle> linked list< handle> for figure child getchildren get children { handles addall add all child createhandles create handles detaillevel detail level } } handles } @override @ override collection<action> collection< action> getactions get actions point2d point2 d p { resourcebundleutil resource bundle util labels = resourcebundleutil resource bundle util getlafbundle get l a f bundle org jhotdraw samples svg labels linkedlist<action> linked list< action> actions = new linkedlist<action> linked list< action> actions add new abstractaction action labels getstring get closepath close path { actionperformed action performed actionevent action event evt { for figure child getchildren get children { bezierfigure bezier figure b = bezierfigure bezier figure child b setclosed set closed } } } actions add new abstractaction action labels getstring get openpath open path { actionperformed action performed actionevent action event evt { for figure child getchildren get children { bezierfigure bezier figure b = bezierfigure bezier figure child b setclosed set closed } } } actions add new abstractaction action labels getstring get windingevenodd winding even odd { actionperformed action performed actionevent action event evt { WINDING_RULE set svgpath s v g path this windingrule winding rule EVEN_ODD } } actions add new abstractaction action labels getstring get windingnonzero winding non zero { actionperformed action performed actionevent action event evt { WINDING_RULE set svgpath s v g path this windingrule winding rule NON_ZERO } } actions } } 