org jhotdraw draw import org jhotdraw gui datatransfer compositetransferable composite transferable import org jhotdraw util * import org jhotdraw undo * import awt * import awt datatransfer * import awt geom * import awt color * import awt event * import io * import util * import javax swing * import org jhotdraw app editablecomponent editable component import org jhotdraw geom * import org jhotdraw xml * import org jhotdraw xml xmltransferable xml transferable defaultdrawingview default drawing view jcomponent j component implements drawingview drawing view drawinglistener drawing listener handlelistener handle listener editablecomponent editable component { private drawing drawing private set<figure> set< figure> dirtyfigures dirty figures = new hashset<figure> hash set< figure> private set<figure> set< figure> selectedfigures selected figures = new hashset<figure> hash set< figure> private rainbow = 0 private linkedlist<handle> linked list< handle> selectionhandles selection handles = new linkedlist<handle> linked list< handle> private handle secondaryhandleowner secondary handle owner private linkedlist<handle> linked list< handle> secondaryhandles secondary handles = new linkedlist<handle> linked list< handle> private handlesarevalid handles are valid = private dimension preferredsize preferred size private scalefactor scale factor = 1 private point2d point2 d translate = new point2d point2 d 0 0 private detaillevel detail level private domfactory dom factory domfactory dom factory private drawingeditor drawing editor editor private constrainer constrainer = new gridconstrainer grid constrainer 1 1 private jlabel j label emptydrawinglabel empty drawing label defaultdrawingview default drawing view { initcomponents init components setfocusable set focusable addfocuslistener add focus listener new focuslistener focus listener { focusgained focus gained focusevent focus event e { repaint } focuslost focus lost focusevent focus event e { repaint } } } private initcomponents init components { buttongroup1 button group1 = new javax swing buttongroup button group setlayout set layout setbackground set background new awt color 255 255 255 } drawing getdrawing get drawing { drawing } util set gettools get tools { } setemptydrawingmessage set empty drawing message newvalue new value { oldvalue old value = emptydrawinglabel empty drawing label == ? emptydrawinglabel empty drawing label gettext get text if newvalue new value == { emptydrawinglabel empty drawing label = } else { emptydrawinglabel empty drawing label = new jlabel j label newvalue new value emptydrawinglabel empty drawing label sethorizontalalignment set horizontal alignment jlabel j label center c e n t e r } firepropertychange fire property change emptydrawingmessage empty drawing message oldvalue old value newvalue new value repaint } getemptydrawingmessage get empty drawing message { emptydrawinglabel empty drawing label == ? emptydrawinglabel empty drawing label gettext get text } paintcomponent paint component graphics gr { graphics2d graphics2 d g = graphics2d graphics2 d gr g setrenderinghint set rendering hint renderinghints rendering hints KEY_ALPHA_INTERPOLATION renderinghints rendering hints VALUE_ALPHA_INTERPOLATION_QUALITY g setrenderinghint set rendering hint renderinghints rendering hints KEY_ANTIALIASING renderinghints rendering hints VALUE_ANTIALIAS_ON g setrenderinghint set rendering hint renderinghints rendering hints KEY_STROKE_CONTROL renderinghints rendering hints VALUE_STROKE_NORMALIZE g setrenderinghint set rendering hint renderinghints rendering hints KEY_FRACTIONALMETRICS options isfractionalmetrics is fractional metrics ? renderinghints rendering hints VALUE_FRACTIONALMETRICS_ON renderinghints rendering hints VALUE_FRACTIONALMETRICS_OFF g setrenderinghint set rendering hint renderinghints rendering hints KEY_FRACTIONALMETRICS renderinghints rendering hints VALUE_FRACTIONALMETRICS_OFF g setrenderinghint set rendering hint renderinghints rendering hints KEY_INTERPOLATION renderinghints rendering hints VALUE_INTERPOLATION_BICUBIC g setrenderinghint set rendering hint renderinghints rendering hints KEY_RENDERING renderinghints rendering hints VALUE_RENDER_QUALITY g setrenderinghint set rendering hint renderinghints rendering hints KEY_TEXT_ANTIALIASING options istextantialiased is text antialiased ? renderinghints rendering hints VALUE_TEXT_ANTIALIAS_ON renderinghints rendering hints VALUE_TEXT_ANTIALIAS_OFF drawbackground draw background g drawgrid draw grid g drawdrawing draw drawing g drawhandles draw handles g drawtool draw tool g } drawbackground draw background graphics2d graphics2 d g { x = translate x * scalefactor scale factor y = translate y * scalefactor scale factor w = getwidth get width h = getheight get height g setcolor set color getbackground get background g fillrect fill rect x y w x h y if y > 0 { g setcolor set color new color 0xf0f0f0 g fillrect fill rect 0 0 w y } if x > 0 { g setcolor set color new color 0xf0f0f0 g fillrect fill rect 0 0 x h } } drawgrid draw grid graphics2d graphics2 d g { constrainer draw g this } drawdrawing draw drawing graphics2d graphics2 d gr { if drawing != { if drawing getfigurecount get figure count == 0 emptydrawinglabel empty drawing label != { emptydrawinglabel empty drawing label setbounds set bounds 0 0 getwidth get width getheight get height emptydrawinglabel empty drawing label paint gr } else { graphics2d graphics2 d g = graphics2d graphics2 d gr create affinetransform affine transform tx = g gettransform get transform tx translate translate x * scalefactor scale factor translate y * scalefactor scale factor tx scale scalefactor scale factor scalefactor scale factor g settransform set transform tx drawing setfontrendercontext set font render context g getfontrendercontext get font render context drawing draw g g dispose } } } drawhandles draw handles awt graphics2d graphics2 d g { if editor != editor getfocusedview get focused view == this { validatehandles validate handles for handle h getselectionhandles get selection handles { h draw g } for handle h getsecondaryhandles get secondary handles { h draw g } } } drawtool draw tool graphics2d graphics2 d g { if editor != editor getview get view == this editor gettool get tool != { editor gettool get tool draw g } } setdrawing set drawing drawing d { if this drawing != { this drawing removedrawinglistener remove drawing listener this clearselection clear selection } this drawing = d if this drawing != { this drawing adddrawinglistener add drawing listener this } invalidatedimension invalidate dimension invalidate if getparent get parent != getparent get parent validate repaint } repaint rectangle2d rectangle2 d r { rectangle vr = drawingtoview drawing to view r vr grow 1 1 repaint vr } areainvalidated area invalidated drawingevent drawing event evt { repaint evt getinvalidatedarea get invalidated area invalidatedimension invalidate dimension } areainvalidated area invalidated handleevent handle event evt { repaint evt getinvalidatedarea get invalidated area invalidatedimension invalidate dimension } figureadded figure added drawingevent drawing event evt { if evt getdrawing get drawing getfigurecount get figure count == 1 { repaint } else { repaint evt getinvalidatedarea get invalidated area } invalidatedimension invalidate dimension } figureremoved figure removed drawingevent drawing event evt { if evt getdrawing get drawing getfigurecount get figure count == 0 { repaint } else { repaint evt getinvalidatedarea get invalidated area } removefromselection remove from selection evt getfigure get figure invalidatedimension invalidate dimension } invalidate { invalidatedimension invalidate dimension super invalidate } addtoselection add to selection figure figure { selectedfigures selected figures add figure invalidatehandles invalidate handles fireselectionchanged fire selection changed repaint } addtoselection add to selection collection<figure> collection< figure> figures { selectedfigures selected figures addall add all figures invalidatehandles invalidate handles fireselectionchanged fire selection changed repaint } removefromselection remove from selection figure figure { if selectedfigures selected figures remove figure { invalidatehandles invalidate handles fireselectionchanged fire selection changed } repaint } toggleselection toggle selection figure figure { if selectedfigures selected figures contains figure { selectedfigures selected figures remove figure } else { selectedfigures selected figures add figure } fireselectionchanged fire selection changed invalidatehandles invalidate handles repaint } selectall select all { selectedfigures selected figures clear selectedfigures selected figures addall add all drawing getfigures get figures invalidatehandles invalidate handles fireselectionchanged fire selection changed repaint } clearselection clear selection { if getselectioncount get selection count > 0 { selectedfigures selected figures clear invalidatehandles invalidate handles fireselectionchanged fire selection changed } repaint } isfigureselected is figure selected figure checkfigure check figure { selectedfigures selected figures contains checkfigure check figure } collection<figure> collection< figure> getselectedfigures get selected figures { collections unmodifiableset unmodifiable set selectedfigures selected figures } getselectioncount get selection count { selectedfigures selected figures size } private util list<handle> list< handle> getselectionhandles get selection handles { validatehandles validate handles collections unmodifiablelist unmodifiable list selectionhandles selection handles } private util list<handle> list< handle> getsecondaryhandles get secondary handles { validatehandles validate handles collections unmodifiablelist unmodifiable list secondaryhandles secondary handles } private invalidatehandles invalidate handles { if handlesarevalid handles are valid { handlesarevalid handles are valid = rectangle invalidatedarea invalidated area = for handle handle selectionhandles selection handles { handle removehandlelistener remove handle listener this if invalidatedarea invalidated area == { invalidatedarea invalidated area = handle getdrawbounds get draw bounds } else { invalidatedarea invalidated area add handle getdrawbounds get draw bounds } handle dispose } selectionhandles selection handles clear secondaryhandles secondary handles clear switch selectedfigures selected figures size { case 0 if invalidatedarea invalidated area != { repaint invalidatedarea invalidated area } break case 1 if invalidatedarea invalidated area != { repaint invalidatedarea invalidated area } break default repaint break } } } private validatehandles validate handles { if ! handlesarevalid handles are valid { handlesarevalid handles are valid = rectangle invalidatedarea invalidated area = level = detaillevel detail level do { for figure figure getselectedfigures get selected figures { for handle handle figure createhandles create handles level { handle setview set view this selectionhandles selection handles add handle handle addhandlelistener add handle listener this if invalidatedarea invalidated area == { invalidatedarea invalidated area = handle getbounds get bounds } else { invalidatedarea invalidated area add handle getbounds get bounds } } } } while level > 0 selectionhandles selection handles size == 0 detaillevel detail level = level + 1 if invalidatedarea invalidated area != { repaint invalidatedarea invalidated area } } } handle findhandle find handle point p { validatehandles validate handles for handle handle new reversedlist<handle> reversed list< handle> getsecondaryhandles get secondary handles { if handle contains p { handle } } for handle handle new reversedlist<handle> reversed list< handle> getselectionhandles get selection handles { if handle contains p { handle } } } collection<handle> collection< handle> getcompatiblehandles get compatible handles handle master { validatehandles validate handles hashset<figure> hash set< figure> owners = new hashset<figure> hash set< figure> linkedlist<handle> linked list< handle> compatiblehandles compatible handles = new linkedlist<handle> linked list< handle> owners add master getowner get owner compatiblehandles compatible handles add master for handle handle getselectionhandles get selection handles { if ! owners contains handle getowner get owner handle iscombinablewith is combinable with master { owners add handle getowner get owner compatiblehandles compatible handles add handle } } compatiblehandles compatible handles } figure findfigure find figure point p { getdrawing get drawing findfigure find figure viewtodrawing view to drawing p } collection<figure> collection< figure> findfigures find figures rectangle r { getdrawing get drawing findfigures find figures viewtodrawing view to drawing r } collection<figure> collection< figure> findfigureswithin find figures within rectangle r { getdrawing get drawing findfigureswithin find figures within viewtodrawing view to drawing r } addfigureselectionlistener add figure selection listener figureselectionlistener figure selection listener fsl { listenerlist listener list add figureselectionlistener figure selection listener fsl } removefigureselectionlistener remove figure selection listener figureselectionlistener figure selection listener fsl { listenerlist listener list remove figureselectionlistener figure selection listener fsl } fireselectionchanged fire selection changed { if listenerlist listener list getlistenercount get listener count > 0 { figureselectionevent figure selection event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figureselectionlistener figure selection listener { if event == event = new figureselectionevent figure selection event this figureselectionlistener figure selection listener listeners i+1 selectionchanged selection changed event } } } } handlerequestremove handle request remove handleevent handle event e { selectionhandles selection handles remove e gethandle get handle e gethandle get handle dispose invalidatehandles invalidate handles repaint e getinvalidatedarea get invalidated area } invalidatedimension invalidate dimension { preferredsize preferred size = } constrainer getconstrainer get constrainer { constrainer } setconstrainer set constrainer constrainer newvalue new value { constrainer oldvalue old value = constrainer constrainer = newvalue new value repaint firepropertychange fire property change constrainer oldvalue old value newvalue new value } dimension getpreferredsize get preferred size { if preferredsize preferred size == { dimension2ddouble dimension2 d d = new dimension2ddouble dimension2 d if drawing != { translate x = 0 translate y = 0 for figure f drawing getfigures get figures { rectangle2d rectangle2 d r = f getdrawbounds get draw bounds d width = math max d width r x + r width d height = math max d height r y + r height translate x = math min translate x r x translate y = math min translate y r y } } preferredsize preferred size = new dimension d width + 10 translate x * scalefactor scale factor d height + 10 translate y * scalefactor scale factor fireviewtransformchanged fire view transform changed repaint } preferredsize preferred size } point drawingtoview drawing to view point2d point2 d p { new point p x translate x * scalefactor scale factor p y translate y * scalefactor scale factor } point2d point2 d viewtodrawing view to drawing point p { new point2d point2 d p x / scalefactor scale factor + translate x p y / scalefactor scale factor + translate y } rectangle drawingtoview drawing to view rectangle2d rectangle2 d r { new rectangle r x translate x * scalefactor scale factor r y translate y * scalefactor scale factor r width * scalefactor scale factor r height * scalefactor scale factor } rectangle2d rectangle2 d viewtodrawing view to drawing rectangle r { new rectangle2d rectangle2 d r x / scalefactor scale factor + translate x r y / scalefactor scale factor + translate y r width / scalefactor scale factor r height / scalefactor scale factor } container getcontainer get container { this } getscalefactor get scale factor { scalefactor scale factor } setscalefactor set scale factor newvalue new value { oldvalue old value = scalefactor scale factor scalefactor scale factor = newvalue new value fireviewtransformchanged fire view transform changed firepropertychange fire property change scalefactor scale factor oldvalue old value newvalue new value invalidatedimension invalidate dimension invalidate if getparent get parent != getparent get parent validate repaint } fireviewtransformchanged fire view transform changed { for handle handle selectionhandles selection handles { handle viewtransformchanged view transform changed } for handle handle secondaryhandles secondary handles { handle viewtransformchanged view transform changed } } sethandledetaillevel set handle detail level newvalue new value { detaillevel detail level = newvalue new value invalidatehandles invalidate handles repaint } gethandledetaillevel get handle detail level { detaillevel detail level } handlerequestsecondaryhandles handle request secondary handles handleevent handle event e { secondaryhandleowner secondary handle owner = e gethandle get handle secondaryhandles secondary handles clear secondaryhandles secondary handles addall add all secondaryhandleowner secondary handle owner createsecondaryhandles create secondary handles for handle h secondaryhandles secondary handles { h setview set view this h addhandlelistener add handle listener this } repaint } affinetransform affine transform getdrawingtoviewtransform get drawing to view transform { affinetransform affine transform t = new affinetransform affine transform t scale scalefactor scale factor scalefactor scale factor t translate translate x translate y t } setdomfactory set dom factory domfactory dom factory newvalue new value { domfactory dom factory oldvalue old value = domfactory dom factory this domfactory dom factory = newvalue new value firepropertychange fire property change domfactory dom factory oldvalue old value newvalue new value } domfactory dom factory getdomfactory get dom factory { domfactory dom factory } copy { if domfactory dom factory == { gettoolkit get toolkit beep } hashset<figure> hash set< figure> tobecopied to be copied = new hashset<figure> hash set< figure> getselectedfigures get selected figures if tobecopied to be copied size == 0 bytearrayoutputstream byte output stream out = new bytearrayoutputstream byte output stream try { nanoxmllitedomoutput nano xml lite dom output domo = new nanoxmllitedomoutput nano xml lite dom output domfactory dom factory domo openelement open element drawingclip drawing clip for figure f getdrawing get drawing getfigures get figures { if tobecopied to be copied contains f { domo writeobject write f } } domo closeelement close element domo save out byte data = out tobytearray to byte compositetransferable composite transferable transfer = new compositetransferable composite transferable transfer add new xmltransferable xml transferable data application/x drawing clip drawingclip drawing clip transfer add new xmltransferable xml transferable data text/xml drawingclip drawing clip toolkit getdefaulttoolkit get default toolkit getsystemclipboard get clipboard setcontents set contents transfer transfer } catch ioexception i o e { e printstacktrace print stack trace gettoolkit get toolkit beep } } cut { if domfactory dom factory == { gettoolkit get toolkit beep } copy delete } delete { arraylist<figure> list< figure> tobedeleted to be deleted = new arraylist<figure> list< figure> getselectedfigures get selected figures clearselection clear selection getdrawing get drawing removeall remove all tobedeleted to be deleted } paste { if domfactory dom factory == { gettoolkit get toolkit beep } try { arraylist<figure> list< figure> tobeselected to be selected = new arraylist<figure> list< figure> dataflavor data flavor flavor = new dataflavor data flavor application/x drawing clip drawing clip transferable transfer = toolkit getdefaulttoolkit get default toolkit getsystemclipboard get clipboard getcontents get contents this if transfer isdataflavorsupported is data flavor supported flavor { compositeedit composite edit ce = new compositeedit composite edit paste getdrawing get drawing fireundoableedithappened fire undoable edit happened ce for figure f new linkedlist<figure> linked list< figure> getselectedfigures get selected figures { getdrawing get drawing remove f } inputstream input stream in = try { in = inputstream input stream transfer gettransferdata get transfer data flavor nanoxmllitedominput nano xml lite dom input domi = new nanoxmllitedominput nano xml lite dom input domfactory dom factory in domi openelement open element drawingclip drawing clip for i=0 n=domi getelementcount get element count i < n i++ { figure f = figure domi readobject read i getdrawing get drawing add f tobeselected to be selected add f } } finally { if in != in close } clearselection clear selection addtoselection add to selection tobeselected to be selected getdrawing get drawing fireundoableedithappened fire undoable edit happened ce } else { toolkit getdefaulttoolkit get default toolkit beep } } catch throwable e { e printstacktrace print stack trace } } duplicate { collection<figure> collection< figure> sorted = getdrawing get drawing sort getselectedfigures get selected figures hashmap<figure hash map< figure figure> originaltoduplicatemap original to duplicate map = new hashmap<figure hash map< figure figure> sorted size clearselection clear selection drawing drawing = getdrawing get drawing arraylist<figure> list< figure> duplicates = new arraylist<figure> list< figure> sorted size affinetransform affine transform tx = new affinetransform affine transform tx translate 5 5 for figure f sorted { figure d = figure f clone d basictransform basic transform tx duplicates add d originaltoduplicatemap original to duplicate map put f d drawing add d } for figure f duplicates { f remap originaltoduplicatemap original to duplicate map } addtoselection add to selection duplicates } removenotify remove notify drawingeditor drawing editor editor { this editor = repaint } addnotify add notify drawingeditor drawing editor editor { this editor = editor repaint } private javax swing buttongroup button group buttongroup1 button group1 } 