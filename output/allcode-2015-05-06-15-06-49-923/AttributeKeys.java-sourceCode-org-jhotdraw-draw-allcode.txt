org jhotdraw draw import awt * import util * import org jhotdraw geom * attributekeys attribute keys { attributekey<color> attribute key< color> FILL_COLOR = new attributekey<color> attribute key< color> fillcolor fill color color white enum windingrule winding rule { EVEN_ODD NON_ZERO } attributekey<windingrule> attribute key< winding rule> WINDING_RULE = new attributekey<windingrule> attribute key< winding rule> windingrule winding rule windingrule winding rule EVEN_ODD enum underfill { none n o n e center c e n t e r full f u l l } attributekey<underfill> attribute key< underfill> FILL_UNDER_STROKE = new attributekey<underfill> attribute key< underfill> fillunderstroke fill under stroke underfill center c e n t e r attributekey<color> attribute key< color> STROKE_COLOR = new attributekey<color> attribute key< color> strokecolor stroke color color black attributekey<double> attribute key< double> STROKE_WIDTH = new attributekey<double> attribute key< double> strokewidth stroke width 1d attributekey<double> attribute key< double> STROKE_INNER_WIDTH_FACTOR = new attributekey<double> attribute key< double> innerstrokewidthfactor inner stroke width factor 2d attributekey<integer> attribute key< integer> STROKE_JOIN = new attributekey<integer> attribute key< integer> strokejoin stroke join basicstroke basic stroke JOIN_MITER attributekey<integer> attribute key< integer> STROKE_CAP = new attributekey<integer> attribute key< integer> strokecap stroke cap basicstroke basic stroke CAP_BUTT attributekey<double> attribute key< double> STROKE_MITER_LIMIT_FACTOR = new attributekey<double> attribute key< double> strokemiterlimitfactor stroke miter limit factor 3d attributekey<double attribute key<double > STROKE_DASHES = new attributekey<double attribute key<double > strokedashes stroke dashes attributekey<double> attribute key< double> STROKE_DASH_PHASE = new attributekey<double> attribute key< double> strokedashphase stroke dash phase 0d attributekey<double> attribute key< double> STROKE_DASH_FACTOR = new attributekey<double> attribute key< double> strokedashfactor stroke dash factor enum stroketype stroke type { basic b a s i c double d o u b l e } attributekey<stroketype> attribute key< stroke type> STROKE_TYPE = new attributekey<stroketype> attribute key< stroke type> stroketype stroke type stroketype stroke type basic b a s i c enum strokeplacement stroke placement { center c e n t e r inside i n sid e outside o u t sid e } attributekey<strokeplacement> attribute key< stroke placement> STROKE_PLACEMENT = new attributekey<strokeplacement> attribute key< stroke placement> strokeplacement stroke placement strokeplacement stroke placement center c e n t e r attributekey<string> attribute key< string> text t e x t = new attributekey<string> attribute key< string> text attributekey<color> attribute key< color> TEXT_COLOR = new attributekey<color> attribute key< color> textcolor text color color black attributekey<color> attribute key< color> TEXT_SHADOW_COLOR = new attributekey<color> attribute key< color> textshadowcolor text shadow color attributekey<dimension2ddouble> attribute key< dimension2 d double> TEXT_SHADOW_OFFSET = new attributekey<dimension2ddouble> attribute key< dimension2 d double> textshadowoffset text shadow offset new dimension2ddouble dimension2 d 1d 1d attributekey<font> attribute key< font> FONT_FACE = new attributekey<font> attribute key< font> fontface font face new font verdana v e r d a n a font plain p l a i n 10 attributekey<double> attribute key< double> FONT_SIZE = new attributekey<double> attribute key< double> fontsize font size 12d attributekey<boolean> attribute key< boolean> FONT_BOLD = new attributekey<boolean> attribute key< boolean> fontbold font bold attributekey<boolean> attribute key< boolean> FONT_ITALIC = new attributekey<boolean> attribute key< boolean> fontitalic font italic attributekey<boolean> attribute key< boolean> FONT_UNDERLINED = new attributekey<boolean> attribute key< boolean> fontunderlined font underlined attributekey<liner> attribute key< liner> BEZIER_PATH_LAYOUTER = new attributekey<liner> attribute key< liner> bezierpathlayouter bezier path layouter attributekey<linedecoration> attribute key< line decoration> END_DECORATION = new attributekey<linedecoration> attribute key< line decoration> enddecoration end decoration attributekey<linedecoration> attribute key< line decoration> START_DECORATION = new attributekey<linedecoration> attribute key< line decoration> startdecoration start decoration attributekey<insets2ddouble> attribute key< insets2 d double> DECORATOR_INSETS = new attributekey<insets2ddouble> attribute key< insets2 d double> decoratorinsets decorator insets new insets2ddouble insets2 d 0 0 0 0 attributekey<insets2ddouble> attribute key< insets2 d double> LAYOUT_INSETS = new attributekey<insets2ddouble> attribute key< insets2 d double> borderinsets border insets new insets2ddouble insets2 d 0 0 0 0 enum orientation { north n o r t h NORTH_EAST east e a s t SOUTH_EAST south s o u t h SOUTH_WEST west w e s t NORTH_WEST } attributekey<orientation> attribute key< orientation> orientation o r i e n t a t i o n = new attributekey<orientation> attribute key< orientation> orientation orientation north n o r t h set<attributekey> set< attribute key> supportedattributes supported attributes map<string map< attributekey> attribute key> supportedattributemap supported attribute map { hashset<attributekey> hash set< attribute key> as = new hashset<attributekey> hash set< attribute key> as addall add all arrays aslist as list new attributekey attribute key { FILL_COLOR FILL_UNDER_STROKE STROKE_COLOR STROKE_WIDTH STROKE_INNER_WIDTH_FACTOR STROKE_JOIN STROKE_CAP STROKE_MITER_LIMIT_FACTOR STROKE_DASHES STROKE_DASH_PHASE STROKE_TYPE STROKE_PLACEMENT text t e x t TEXT_COLOR TEXT_SHADOW_COLOR TEXT_SHADOW_OFFSET FONT_FACE FONT_SIZE FONT_BOLD FONT_ITALIC FONT_UNDERLINED BEZIER_PATH_LAYOUTER END_DECORATION START_DECORATION DECORATOR_INSETS orientation o r i e n t a t i o n WINDING_RULE } supportedattributes supported attributes = collections unmodifiableset unmodifiable set as hashmap<string hash map< attributekey> attribute key> am = new hashmap<string hash map< attributekey> attribute key> for attributekey attribute key a as { am put a getkey get key a } supportedattributemap supported attribute map = collections unmodifiablemap unmodifiable map am } getstroketotalwidth get stroke total width figure f { switch STROKE_TYPE get f { case basic b a s i c default STROKE_WIDTH get f case double d o u b l e STROKE_WIDTH get f * 1d + STROKE_INNER_WIDTH_FACTOR get f } } stroke getstroke get stroke figure f { strokewidth stroke width = STROKE_WIDTH get f dashfactor dash factor = STROKE_DASH_FACTOR get f != ? STROKE_DASH_FACTOR get f strokewidth stroke width ddashes = STROKE_DASHES get f float dashes = if ddashes != { dashes = new float ddashes length for i=0 i < dashes length i++ { dashes i = float ddashes i * dashfactor dash factor } } switch STROKE_TYPE get f { case basic b a s i c default new basicstroke basic stroke float strokewidth stroke width basicstroke basic stroke CAP_BUTT STROKE_JOIN get f math max 1f float STROKE_MITER_LIMIT_FACTOR get f * strokewidth stroke width dashes float STROKE_DASH_PHASE get f * dashfactor dash factor case double d o u b l e new doublestroke stroke float STROKE_INNER_WIDTH_FACTOR get f * strokewidth stroke width float strokewidth stroke width basicstroke basic stroke CAP_BUTT STROKE_JOIN get f math max 1f float STROKE_MITER_LIMIT_FACTOR get f * strokewidth stroke width dashes float STROKE_DASH_PHASE get f floatvalue float value * dashfactor dash factor } } font getfont get font figure f { font prototype = FONT_FACE get f if prototype == { } if getfontstyle get font style f != font plain p l a i n { prototype derivefont derive font getfontstyle get font style f FONT_SIZE get f floatvalue float value } else { prototype derivefont derive font FONT_SIZE get f floatvalue float value } } getfontstyle get font style figure f { style = font plain p l a i n if FONT_BOLD get f style |= font bold b o l d if FONT_ITALIC get f style |= font italic i t a l i c style } getperpendicularfillgrowth get perpendicular fill growth figure f { grow strokewidth stroke width = attributekeys attribute keys getstroketotalwidth get stroke total width f strokeplacement stroke placement placement = STROKE_PLACEMENT get f switch FILL_UNDER_STROKE get f { case full f u l l switch placement { case inside i n sid e grow = 0f break case outside o u t sid e grow = strokewidth stroke width break case center c e n t e r default grow = strokewidth stroke width / 2d break } break case none n o n e switch placement { case inside i n sid e grow = strokewidth stroke width break case outside o u t sid e grow = 0f break case center c e n t e r default grow = strokewidth stroke width / 2d break } break case center c e n t e r default switch placement { case inside i n sid e grow = strokewidth stroke width / 2d break case outside o u t sid e grow = strokewidth stroke width / 2d break case center c e n t e r default grow = 0d break } break } grow } getperpendiculardrawgrowth get perpendicular draw growth figure f { grow strokewidth stroke width = attributekeys attribute keys getstroketotalwidth get stroke total width f strokeplacement stroke placement placement = STROKE_PLACEMENT get f switch placement { case inside i n sid e grow = strokewidth stroke width / 2d break case outside o u t sid e grow = strokewidth stroke width / 2d break case center c e n t e r default grow = 0f break } grow } getperpendicularhitgrowth get perpendicular hit growth figure f { grow if STROKE_COLOR get f == { grow = getperpendicularfillgrowth get perpendicular fill growth f } else { strokewidth stroke width = attributekeys attribute keys getstroketotalwidth get stroke total width f grow = getperpendiculardrawgrowth get perpendicular draw growth f + strokewidth stroke width / 2d } grow } } 