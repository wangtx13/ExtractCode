org jhotdraw draw import awt * import awt geom * import awt event * import util * dragtracker drag tracker abstracttool tool { figure anchorfigure anchor figure point2d point2 d oldpoint old point point2d point2 d anchorpoint anchor point private isdragging is dragging dragtracker drag tracker figure figure { anchorfigure anchor figure = figure } mousemoved mouse moved mouseevent mouse event evt { updatecursor update cursor editor findview find view container evt getsource get source new point evt getx get x evt gety get y } mousepressed mouse pressed mouseevent mouse event evt { super mousepressed mouse pressed evt drawingview drawing view view = getview get view if evt isshiftdown is shift down { view sethandledetaillevel set handle detail level 0 view toggleselection toggle selection anchorfigure anchor figure if ! view isfigureselected is figure selected anchorfigure anchor figure { anchorfigure anchor figure = } } else if ! view isfigureselected is figure selected anchorfigure anchor figure { view sethandledetaillevel set handle detail level 0 view clearselection clear selection view addtoselection add to selection anchorfigure anchor figure } point2d point2 d origin = new point2d point2 d MAX_VALUE MAX_VALUE for figure f view getselectedfigures get selected figures { rectangle2d rectangle2 d b = f getbounds get bounds origin x = math min origin x b x origin y = math min origin y b y } point2d point2 d constrainedorigin constrained origin = view getconstrainer get constrainer constrainpoint constrain point new point2d point2 d origin x origin y oldpoint old point = view getconstrainer get constrainer constrainpoint constrain point view viewtodrawing view to drawing new point evt getx get x evt gety get y oldpoint old point x += origin x constrainedorigin constrained origin x oldpoint old point y += origin y constrainedorigin constrained origin y anchorpoint anchor point = oldpoint old point } mousedragged mouse dragged mouseevent mouse event evt { drawingview drawing view view = getview get view if isdragging is dragging = { isdragging is dragging = updatecursor update cursor editor findview find view container evt getsource get source new point evt getx get x evt gety get y } point2d point2 d newpoint new point = view getconstrainer get constrainer constrainpoint constrain point view viewtodrawing view to drawing new point evt getx get x evt gety get y affinetransform affine transform tx = new affinetransform affine transform tx translate newpoint new point x oldpoint old point x newpoint new point y oldpoint old point y for figure f view getselectedfigures get selected figures { f willchange will change f basictransform basic transform tx f changed } oldpoint old point = newpoint new point } mousereleased mouse released mouseevent mouse event evt { super mousereleased mouse released evt isdragging is dragging = x = evt getx get x y = evt gety get y updatecursor update cursor editor findview find view container evt getsource get source new point evt getx get x evt gety get y point2d point2 d p = getview get view getconstrainer get constrainer constrainpoint constrain point getview get view viewtodrawing view to drawing new point x y collection<figure> collection< figure> draggedfigures dragged figures = new linkedlist linked list getview get view getselectedfigures get selected figures figure droptarget drop target = getdrawing get drawing findfigureexcept find figure except p draggedfigures dragged figures if droptarget drop target != { snapback snap back = droptarget drop target handledrop handle drop p draggedfigures dragged figures getview get view if snapback snap back { affinetransform affine transform tx = new affinetransform affine transform tx translate anchorpoint anchor point x oldpoint old point x anchorpoint anchor point y oldpoint old point y for figure f draggedfigures dragged figures { f willchange will change f basictransform basic transform tx f changed } } else { affinetransform affine transform tx = new affinetransform affine transform tx translate anchorpoint anchor point x + oldpoint old point x anchorpoint anchor point y + oldpoint old point y if ! tx isidentity is identity { getdrawing get drawing fireundoableedithappened fire undoable edit happened new transformedit transform edit draggedfigures dragged figures tx } } } else { affinetransform affine transform tx = new affinetransform affine transform tx translate anchorpoint anchor point x + oldpoint old point x anchorpoint anchor point y + oldpoint old point y if ! tx isidentity is identity { getdrawing get drawing fireundoableedithappened fire undoable edit happened new transformedit transform edit draggedfigures dragged figures tx } } firetooldone fire tool done } } 