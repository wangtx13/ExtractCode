net n3 nanoxml import io ioexception i o import io outputstream output stream import io printwriter print writer import io writer import util iterator import util vector xmlwriter xml writer { private printwriter print writer writer xmlwriter xml writer writer writer { if writer instanceof printwriter print writer { this writer = printwriter print writer writer } else { this writer = new printwriter print writer writer } } xmlwriter xml writer outputstream output stream stream { this writer = new printwriter print writer stream } finalize throwable { this writer = super finalize } write ixmlelement i xml element xml ioexception i o { this write xml 0 } write ixmlelement i xml element xml prettyprint pretty print ioexception i o { this write xml prettyprint pretty print 0 } write ixmlelement i xml element xml prettyprint pretty print indent ioexception i o { this write xml prettyprint pretty print indent } write ixmlelement i xml element xml prettyprint pretty print indent collapseemptyelements collapse empty elements ioexception i o { if prettyprint pretty print { for i = 0 i < indent i++ { this writer print ' ' } } if xml getname get name == { if xml getcontent get content != { if prettyprint pretty print { this writeencoded write encoded xml getcontent get content trim writer } else { this writeencoded write encoded xml getcontent get content } } } else { this writer print '<' this writer print xml getfullname get full name vector nsprefixes = new vector if xml getnamespace get namespace != { if xml getname get name equals xml getfullname get full name { this writer print xmlns=\ + xml getnamespace get namespace + ' ' } else { prefix = xml getfullname get full name prefix = prefix substring 0 prefix indexof index of ' ' nsprefixes addelement add element prefix this writer print xmlns + prefix this writer print =\ + xml getnamespace get namespace + \ } } iterator enm = xml iterateattributenames iterate attribute names while enm hasnext has next { key = enm next index = key indexof index of ' ' if index >= 0 { namespace = xml getattributenamespace get attribute namespace key if namespace != { prefix = key substring 0 index if ! nsprefixes contains prefix { this writer print xmlns + prefix this writer print =\ + namespace + ' ' nsprefixes addelement add element prefix } } } } enm = xml iterateattributenames iterate attribute names while enm hasnext has next { key = enm next value = xml getattribute get attribute key this writer print + key + =\ this writeencoded write encoded value this writer print ' ' } if xml getcontent get content != xml getcontent get content length > 0 { writer print '>' this writeencoded write encoded xml getcontent get content writer print </ + xml getfullname get full name + '>' if prettyprint pretty print { writer } } else if xml haschildren has children || ! collapseemptyelements collapse empty elements { writer print '>' if prettyprint pretty print { writer } enm = xml iteratechildren iterate children while enm hasnext has next { ixmlelement i xml element child = ixmlelement i xml element enm next this write child prettyprint pretty print indent + 4 collapseemptyelements collapse empty elements } if prettyprint pretty print { for i = 0 i < indent i++ { this writer print ' ' } } this writer print </ + xml getfullname get full name + > if prettyprint pretty print { writer } } else { this writer print /> if prettyprint pretty print { writer } } } this writer flush } private writeencoded write encoded str { for i = 0 i < str length i++ { char c = str charat char at i switch c { case 0x0a 0x0 a this writer print c break case '<' this writer print lt break case '>' this writer print break case ' ' this writer print amp break case '\'' this writer print apos break case ' ' this writer print break default if c < ' ' || c > 0x7e 0x7 e { this writer print #x this writer print integer tostring to c 16 this writer print ' ' } else { this writer print c } } } } } 