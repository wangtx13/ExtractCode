org jhotdraw draw import org jhotdraw undo * import org jhotdraw util * import awt * import awt geom * import org jhotdraw geom * connectionhandle connection handle locatorhandle locator handle { private compositeedit composite edit edit private connectionfigure connection figure currentconnection current connection private connectionfigure connection figure prototype private figure targetfigure target figure connectionhandle connection handle figure owner locator locator connectionfigure connection figure prototype { super owner locator this prototype = prototype } draw graphics2d graphics2 d g { drawcircle draw circle g color blue color blue darker } trackstart track start point anchor modifiersex modifiers ex { setconnection set connection createconnection create connection resourcebundleutil resource bundle util labels = resourcebundleutil resource bundle util getlafbundle get l a f bundle org jhotdraw draw labels edit = new compositeedit composite edit labels getstring get createconnection create connection fireundoableedithappened fire undoable edit happened edit point2d point2 d p = getlocationondrawing get location on drawing getconnection get connection setstartpoint set start point p getconnection get connection setendpoint set end point p view getdrawing get drawing add getconnection get connection } trackstep track step point anchor point modifiersex modifiers ex { point2d point2 d p = view viewtodrawing view to drawing figure f = findconnectablefigure find connectable figure p view getdrawing get drawing if f != gettargetfigure get target figure { if gettargetfigure get target figure != { gettargetfigure get target figure setconnectorsvisible set connectors visible } settargetfigure set target figure f if gettargetfigure get target figure != { gettargetfigure get target figure setconnectorsvisible set connectors visible getconnection get connection } } connector target = findconnectiontarget find connection target p view getdrawing get drawing if target != { p = geom center target getbounds get bounds } getconnection get connection setendpoint set end point p } trackend track end point anchor point modifiersex modifiers ex { point2d point2 d p = view viewtodrawing view to drawing 		connector 		 connector target = findconnectiontarget find connection target p view getdrawing get drawing 		if target != { 			getconnection 			get connection setstartconnector set start connector getstartconnector get start connector 			getconnection 			get connection setendconnector set end connector target 			getconnection 			get connection updateconnection update connection 		} else { 			view getdrawing get drawing remove getconnection get connection 			 edit setsignificant set significant 		} 		setconnection 		set connection 		if gettargetfigure get target figure != { 			gettargetfigure 			get target figure setconnectorsvisible set connectors visible 			settargetfigure 			set target figure 		} fireundoableedithappened fire undoable edit happened edit } connectionfigure connection figure createconnection create connection { connectionfigure connection figure prototype clone } setconnection set connection connectionfigure connection figure newconnection new connection { currentconnection current connection = newconnection new connection } connectionfigure connection figure getconnection get connection { currentconnection current connection } figure gettargetfigure get target figure { targetfigure target figure } settargetfigure set target figure figure newtargetfigure new target figure { targetfigure target figure = newtargetfigure new target figure } private figure findconnectablefigure find connectable figure point2d point2 d p drawing drawing { for figure figure drawing getfiguresfronttoback get figures front to back { if !figure includes getconnection get connection figure canconnect can connect figure contains p { figure } } } 	 	protected connector findconnectiontarget find connection target point2d point2 d p drawing drawing { 		figure 		 figure target = findconnectablefigure find connectable figure p drawing 		if target != target canconnect can connect 			 !target includes getowner get owner 			 getconnection get connection canconnect can connect getowner get owner target { 				return target findconnector find connector p getconnection get connection 		} 		return 	} 	private connector getstartconnector get start connector { 		point2d 		 point2 d p = getlocationondrawing get location on drawing 		return getowner get owner findconnector find connector p getconnection get connection 	} } 