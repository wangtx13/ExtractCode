org jhotdraw draw import io * import awt * import awt geom * import org jhotdraw geom geom import org jhotdraw util * import org jhotdraw draw attributekeys attribute keys * abstractlinedecoration line decoration implements linedecoration line decoration { private isfilled is filled private isstroked is stroked private issolid is solid abstractlinedecoration line decoration isfilled is filled isstroked is stroked issolid is solid { this isfilled is filled = isfilled is filled this isstroked is stroked = isstroked is stroked this issolid is solid = issolid is solid } isfilled is filled { isfilled is filled } isstroked is stroked { isstroked is stroked } issolid is solid { issolid is solid } draw graphics2d graphics2 d g figure f point2d point2 d p1 point2d point2 d p2 { generalpath general path path = gettransformeddecoratorpath get transformed decorator path f p1 p2 color color if isfilled is filled { if issolid is solid { color = STROKE_COLOR get f } else { color = FILL_COLOR get f } if color != { g setcolor set color color g fill path } } if isstroked is stroked { color = STROKE_COLOR get f if color != { g setcolor set color color g setstroke set stroke attributekeys attribute keys getstroke get stroke f g draw path } } } rectangle2d rectangle2 d getdrawbounds get draw bounds figure f point2d point2 d p1 point2d point2 d p2 { generalpath general path path = gettransformeddecoratorpath get transformed decorator path f p1 p2 rectangle2d rectangle2 d b = path getbounds2d get bounds2 d rectangle2d rectangle2 d bounds = new rectangle2d rectangle2 d b getx get x b gety get y b getwidth get width b getheight get height if isstroked is stroked { strokewidth stroke width = STROKE_WIDTH get f strokejoin stroke join = STROKE_JOIN get f float miterlimit miter limit = float STROKE_MITER_LIMIT_FACTOR get f * strokewidth stroke width grow if strokejoin stroke join == basicstroke basic stroke JOIN_MITER { grow = 1 + strokewidth stroke width / 2 * miterlimit miter limit } else { grow = 1 + strokewidth stroke width / 2 } geom grow bounds grow grow } bounds } getdecorationradius get decoration radius figure f { strokewidth stroke width = STROKE_WIDTH get f scalefactor scale factor if strokewidth stroke width > 1f { scalefactor scale factor = 1d + strokewidth stroke width 1d / 2d } else { scalefactor scale factor = 1d } getdecoratorpathradius get decorator path radius f * scalefactor scale factor } private generalpath general path gettransformeddecoratorpath get transformed decorator path figure f point2d point2 d p1 point2d point2 d p2 { generalpath general path path = getdecoratorpath get decorator path f strokewidth stroke width = STROKE_WIDTH get f affinetransform affine transform transform = new affinetransform affine transform transform translate p1 x p1 y transform rotate math atan2 p1 x p2 x p2 y p1 y if strokewidth stroke width > 1f { transform scale 1d + strokewidth stroke width 1d / 2d 1d + strokewidth stroke width 1d / 2d } path transform transform path } setfilled set filled b { isfilled is filled = b } setstroked set stroked b { isstroked is stroked = b } setsolid set solid b { issolid is solid = b } generalpath general path getdecoratorpath get decorator path figure f getdecoratorpathradius get decorator path radius figure f } 