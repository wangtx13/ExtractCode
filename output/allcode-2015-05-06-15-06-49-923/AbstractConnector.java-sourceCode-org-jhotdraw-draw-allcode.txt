org jhotdraw draw import io ioexception i o import org jhotdraw util * import awt * import awt geom * import org jhotdraw geom * import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output abstractconnector connector implements connector { private figure owner private isconnecttodecorator is connect to decorator private isvisible is visible private isstatepersistent is state persistent abstractconnector connector { owner = } abstractconnector connector figure owner { this owner = owner } setconnecttodecorator set connect to decorator newvalue new value { isconnecttodecorator is connect to decorator = newvalue new value } isconnecttodecorator is connect to decorator { isconnecttodecorator is connect to decorator } setvisible set visible newvalue new value { isvisible is visible = newvalue new value } isvisible is visible { isvisible is visible } figure getconnectortarget get connector target figure f { isconnecttodecorator is connect to decorator f getdecorator get decorator != ? f getdecorator get decorator f } contains point2d point2 d p { getowner get owner contains p } draw graphics2d graphics2 d g { if isvisible is visible { rectangle2d rectangle2 d bounds = getbounds get bounds ellipse2d ellipse2 d circle = new ellipse2d ellipse2 d bounds x + bounds width / 2 3 bounds y + bounds height / 2 3 6 6 g setcolor set color color blue g fill circle } } point2d point2 d findstart find start connectionfigure connection figure connection { findpoint find point connection } point2d point2 d findend find end connectionfigure connection figure connection { findpoint find point connection } point2d point2 d findpoint find point connectionfigure connection figure connection { geom center getbounds get bounds } rectangle2d rectangle2 d getbounds get bounds { getowner get owner getbounds get bounds } figure getowner get owner { owner } setowner set owner figure newvalue new value { owner = newvalue new value } clone { try { abstractconnector connector that = abstractconnector connector super clone that } catch clonenotsupportedexception clone not supported e { internalerror internal = new internalerror internal e tostring to throw } } updatestartlocation update start location point2d point2 d p { } updateendlocation update end location point2d point2 d p { } point2d point2 d getanchor get anchor { geom center getbounds get bounds } updateanchor update anchor point2d point2 d p { } read dominput dom input in ioexception i o { if isstatepersistent is state persistent { isconnecttodecorator is connect to decorator = in getattribute get attribute connecttodecorator connect to decorator isvisible is visible = in getattribute get attribute visible } in openelement open element owner this owner = figure in readobject read 0 in closeelement close element } write domoutput dom output out ioexception i o { if isstatepersistent is state persistent { if isconnecttodecorator is connect to decorator { out addattribute add attribute connecttodecorator connect to decorator } if isvisible is visible { out addattribute add attribute visible } } out openelement open element owner out writeobject write getowner get owner out closeelement close element } } 