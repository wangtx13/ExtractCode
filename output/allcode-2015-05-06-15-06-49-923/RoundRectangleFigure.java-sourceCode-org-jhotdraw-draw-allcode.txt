org jhotdraw draw import awt * import awt geom * import io * import util * import javax swing undo * import org jhotdraw draw attributekeys attribute keys * import org jhotdraw geom * import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output roundrectanglefigure round rectangle figure attributedfigure attributed figure { private roundrectangle2d round rectangle2 d roundrect private DEFAULT_ARC = 20 roundrectanglefigure round rectangle figure { this 0 0 0 0 } roundrectanglefigure round rectangle figure x y width height { roundrect = new roundrectangle2d round rectangle2 d x y width height DEFAULT_ARC DEFAULT_ARC } rectangle2d rectangle2 d getbounds get bounds { rectangle2d rectangle2 d roundrect getbounds2d get bounds2 d } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { rectangle2d rectangle2 d r = rectangle2d rectangle2 d roundrect getbounds2d get bounds2 d grow = attributekeys attribute keys getperpendicularhitgrowth get perpendicular hit growth this geom grow r grow grow r } getarcwidth get arc width { roundrect arcwidth } getarcheight get arc height { roundrect archeight } setarc set arc w h { oldwidth old width = roundrect getarcwidth get arc width oldheight old height = roundrect getarcheight get arc height roundrect arcwidth = w roundrect archeight = h firefigurechanged fire figure changed getdrawbounds get draw bounds fireundoableedithappened fire undoable edit happened new abstractundoableedit undoable edit { getpresentationname get presentation name { rundung } undo cannotundoexception cannot undo { super undo willchange will change roundrect arcwidth = oldwidth old width roundrect archeight = oldheight old height changed } redo cannotredoexception cannot redo { super redo willchange will change roundrect arcwidth = w roundrect archeight = h changed } } } drawfill draw fill graphics2d graphics2 d g { roundrectangle2d round rectangle2 d r = roundrectangle2d round rectangle2 d roundrect clone grow = attributekeys attribute keys getperpendicularfillgrowth get perpendicular fill growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 if r width > 0 r height > 0 { g fill r } } drawstroke draw stroke graphics2d graphics2 d g { roundrectangle2d round rectangle2 d r = roundrectangle2d round rectangle2 d roundrect clone grow = attributekeys attribute keys getperpendiculardrawgrowth get perpendicular draw growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 if r width > 0 r height > 0 { g draw r } } contains point2d point2 d p { roundrectangle2d round rectangle2 d r = roundrectangle2d round rectangle2 d roundrect clone grow = attributekeys attribute keys getperpendicularhitgrowth get perpendicular hit growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r arcwidth += grow * 2 r archeight += grow * 2 r contains p } basicsetbounds basic set bounds point2d point2 d anchor point2d point2 d { roundrect x = math min anchor x x roundrect y = math min anchor y y roundrect width = math max 0 1 math abs x anchor x roundrect height = math max 0 1 math abs y anchor y } basictransform basic transform affinetransform affine transform tx { point2d point2 d anchor = getstartpoint get start point point2d point2 d = getendpoint get end point basicsetbounds basic set bounds point2d point2 d tx transform anchor anchor point2d point2 d tx transform } collection<handle> collection< handle> createhandles create handles detaillevel detail level { linkedlist<handle> linked list< handle> handles = linkedlist<handle> linked list< handle> super createhandles create handles detaillevel detail level handles add new roundrectradiushandle round rect radius handle this handles } connector findconnector find connector point2d point2 d p connectionfigure connection figure prototype { new choproundrectconnector chop round rect connector this } connector findcompatibleconnector find compatible connector connector c isstartconnector is start connector { new choproundrectconnector chop round rect connector this } roundrectanglefigure round rectangle figure clone { roundrectanglefigure round rectangle figure that = roundrectanglefigure round rectangle figure super clone that roundrect = roundrectangle2d round rectangle2 d this roundrect clone that } @override @ override read dominput dom input in ioexception i o { super read in roundrect arcwidth = in getattribute get attribute arcwidth arc width DEFAULT_ARC roundrect archeight = in getattribute get attribute archeight arc height DEFAULT_ARC } @override @ override write domoutput dom output out ioexception i o { super write out out addattribute add attribute arcwidth arc width roundrect arcwidth out addattribute add attribute archeight arc height roundrect archeight } restoreto restore to geometry { roundrectangle2d round rectangle2 d r = roundrectangle2d round rectangle2 d geometry roundrect x = r x roundrect y = r y roundrect width = r width roundrect height = r height } getrestoredata get restore data { roundrect clone } point2d point2 d chop point2d point2 d from { rectangle2d rectangle2 d outer = getbounds get bounds grow switch STROKE_PLACEMENT get this { case center c e n t e r default grow = attributekeys attribute keys getstroketotalwidth get stroke total width this / 2 break case outside o u t sid e grow = attributekeys attribute keys getstroketotalwidth get stroke total width this break case inside i n sid e grow = 0 break } outer x = grow outer y = grow outer width += grow * 2 outer height += grow * 2 rectangle2d rectangle2 d inner = rectangle2d rectangle2 d outer clone gw = getarcwidth get arc width + grow * 2 / 2 gh = getarcheight get arc height + grow *2 / 2 inner x = gw inner y = gh inner width += gw * 2 inner height += gh * 2 angle = geom pointtoangle point to angle outer from point2d point2 d p = geom angletopoint angle to point outer geom pointtoangle point to angle outer from if p x == outer x || p x == outer x + outer width { p y = math min math max p y inner y inner y + inner height } else { p x = math min math max p x inner x inner x + inner width } p } } 