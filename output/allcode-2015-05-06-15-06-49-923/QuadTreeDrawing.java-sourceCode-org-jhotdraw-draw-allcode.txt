org jhotdraw draw import org jhotdraw geom quadtree2ddouble quad tree2 d import org jhotdraw util reversedlist reversed list import awt * import awt geom * import javax swing * import javax swing event * import org jhotdraw util * import util * quadtreedrawing quad tree drawing abstractdrawing drawing implements figurelistener figure listener undoableeditlistener undoable edit listener { private arraylist<figure> list< figure> figures = new arraylist<figure> list< figure> private quadtree2ddouble<figure> quad tree2 d double< figure> quadtree quad tree = new quadtree2ddouble<figure> quad tree2 d double< figure> private needssorting needs sorting = quadtreedrawing quad tree drawing { } indexof index of figure figure { figures indexof index of figure } basicadd basic add index figure figure { figures add index figure quadtree quad tree add figure figure getdrawbounds get draw bounds figure addfigurelistener add figure listener this figure addundoableeditlistener add undoable edit listener this needssorting needs sorting = } basicremove basic remove figure figure { figures remove figure quadtree quad tree remove figure figure removefigurelistener remove figure listener this figure removeundoableeditlistener remove undoable edit listener this needssorting needs sorting = } draw graphics2d graphics2 d g { collection<figure> collection< figure> c = quadtree quad tree findintersects find intersects g getclipbounds get clip bounds getbounds2d get bounds2 d collection<figure> collection< figure> todraw to draw = sort c draw g todraw to draw } collection<figure> collection< figure> sort collection<figure> collection< figure> c { ensuresorted ensure sorted arraylist<figure> list< figure> sorted = new arraylist<figure> list< figure> c size for figure f figures { if c contains f { sorted add f } } sorted } draw graphics2d graphics2 d g collection<figure> collection< figure> c { for figure f c { f draw g } } figureareainvalidated figure area invalidated figureevent figure event e { fireareainvalidated fire area invalidated e getinvalidatedarea get invalidated area } figurechanged figure changed figureevent figure event e { quadtree quad tree remove e getfigure get figure quadtree quad tree add e getfigure get figure e getfigure get figure getdrawbounds get draw bounds needssorting needs sorting = fireareainvalidated fire area invalidated e getinvalidatedarea get invalidated area } figureadded figure added figureevent figure event e { } figureremoved figure removed figureevent figure event e { } figurerequestremove figure request remove figureevent figure event e { remove e getfigure get figure } collection<figure> collection< figure> getfigures get figures rectangle2d rectangle2 d bounds { quadtree quad tree findinside find inside bounds } collection<figure> collection< figure> getfigures get figures { collections unmodifiablecollection unmodifiable collection figures } figure findfigureinside find figure inside point2d point2 d p { collection<figure> collection< figure> c = quadtree quad tree findcontains find contains p for figure f getfiguresfronttoback get figures front to back { if c contains f f contains p { f findfigureinside find figure inside p } } } util list<figure> list< figure> getfiguresfronttoback get figures front to back { ensuresorted ensure sorted new reversedlist<figure> reversed list< figure> figures } figure findfigure find figure point2d point2 d p { collection<figure> collection< figure> c = quadtree quad tree findcontains find contains p switch c size { case 0 case 1 { figure f = c iterator next f contains p ? f } default { for figure f getfiguresfronttoback get figures front to back { if c contains f f contains p f } } } } figure findfigureexcept find figure except point2d point2 d p figure ignore { collection<figure> collection< figure> c = quadtree quad tree findcontains find contains p switch c size { case 0 { } case 1 { figure f = c iterator next f == ignore || ! f contains p ? f } default { for figure f getfiguresfronttoback get figures front to back { if f != ignore f contains p f } } } } figure findfigureexcept find figure except point2d point2 d p collection ignore { collection<figure> collection< figure> c = quadtree quad tree findcontains find contains p switch c size { case 0 { } case 1 { figure f = c iterator next ! ignore contains f || ! f contains p ? f } default { for figure f getfiguresfronttoback get figures front to back { if ! ignore contains f f contains p f } } } } collection<figure> collection< figure> findfigures find figures rectangle2d rectangle2 d r { collection<figure> collection< figure> c = quadtree quad tree findintersects find intersects r switch c size { case 0 case 1 c default sort c } } collection<figure> collection< figure> findfigureswithin find figures within rectangle2d rectangle2 d r { collection<figure> collection< figure> c = findfigures find figures r arraylist<figure> list< figure> result = new arraylist<figure> list< figure> c size for figure f c { if r contains f getbounds get bounds { result add f } } result } bringtofront bring to front figure figure { if figures remove figure { figures add figure needssorting needs sorting = fireareainvalidated fire area invalidated figure getdrawbounds get draw bounds } } sendtoback send to back figure figure { if figures remove figure { figures add 0 figure needssorting needs sorting = fireareainvalidated fire area invalidated figure getdrawbounds get draw bounds } } undoableedithappened undoable edit happened undoableeditevent undoable edit event e { fireundoableedithappened fire undoable edit happened e getedit get edit } figureattributechanged figure attribute changed figureevent figure event e { } contains figure f { figures contains f } private ensuresorted ensure sorted { if needssorting needs sorting { collections sort figures figurelayercomparator figure layer comparator instance i n s t a n c e needssorting needs sorting = } } } 