org jhotdraw draw import org jhotdraw util * import javax swing event * import awt * import awt event * import awt font * import awt geom * import util * import javax swing * import javax swing undo * import io * import org jhotdraw geom * abstractfigure figure implements figure { eventlistenerlist event listener list listenerlist listener list = new eventlistenerlist event listener list private isconnectorsvisible is connectors visible private connectionfigure connection figure courtingconnection courting connection private drawing drawing private isinteractive is interactive private isvisible is visible = figure decorator private isdrawdecoratorfirst is draw decorator first = changingdepth changing depth = 0 abstractfigure figure { } addfigurelistener add figure listener figurelistener figure listener l { listenerlist listener list add figurelistener figure listener l } removefigurelistener remove figure listener figurelistener figure listener l { listenerlist listener list remove figurelistener figure listener l } addundoableeditlistener add undoable edit listener undoableeditlistener undoable edit listener l { listenerlist listener list add undoableeditlistener undoable edit listener l } removeundoableeditlistener remove undoable edit listener undoableeditlistener undoable edit listener l { listenerlist listener list remove undoableeditlistener undoable edit listener l } addnotify add notify drawing d { this drawing = d firefigureadded fire figure added } removenotify remove notify drawing d { firefigureremoved fire figure removed this drawing = } drawing getdrawing get drawing { drawing } getlock get lock { getdrawing get drawing == ? this getdrawing get drawing getlock get lock } setdrawdecoratorfirst set draw decorator first newvalue new value { isdrawdecoratorfirst is draw decorator first = newvalue new value } isdrawdecoratorfirst is draw decorator first { isdrawdecoratorfirst is draw decorator first } fireareainvalidated fire area invalidated { fireareainvalidated fire area invalidated getdrawbounds get draw bounds } fireareainvalidated fire area invalidated rectangle2d rectangle2 d invalidatedarea invalidated area { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this invalidatedarea invalidated area figurelistener figure listener listeners i+1 figureareainvalidated figure area invalidated event } } } } firefigurerequestremove fire figure request remove { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this getbounds get bounds figurelistener figure listener listeners i+1 figurerequestremove figure request remove event } } } } firefigureadded fire figure added { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this getbounds get bounds figurelistener figure listener listeners i+1 figureadded figure added event } } } } firefigureremoved fire figure removed { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this getbounds get bounds figurelistener figure listener listeners i+1 figureremoved figure removed event } } } } firefigurechanged fire figure changed { firefigurechanged fire figure changed getbounds get bounds } firefigurechanged fire figure changed rectangle2d rectangle2 d changedarea changed area { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this changedarea changed area figurelistener figure listener listeners i+1 figurechanged figure changed event } } } } firefigurechanged fire figure changed figureevent figure event event { if listenerlist listener list getlistenercount get listener count > 0 { listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { figurelistener figure listener listeners i+1 figurechanged figure changed event } } } } fireattributechanged fire attribute changed attributekey attribute key attribute oldvalue old value newvalue new value { if listenerlist listener list getlistenercount get listener count > 0 { figureevent figure event event = listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if listeners i == figurelistener figure listener { if event == event = new figureevent figure event this attribute oldvalue old value newvalue new value figurelistener figure listener listeners i+1 figureattributechanged figure attribute changed event } } } } fireundoableedithappened fire undoable edit happened undoableedit undoable edit edit { undoableeditevent undoable edit event event = if listenerlist listener list getlistenercount get listener count > 0 { listeners = listenerlist listener list getlistenerlist get listener list for i = listeners length 2 i>=0 i =2 { if event == event = new undoableeditevent undoable edit event this edit if listeners i == undoableeditlistener undoable edit listener { undoableeditlistener undoable edit listener listeners i+1 undoableedithappened undoable edit happened event } } } } abstractfigure figure clone { try { abstractfigure figure that = abstractfigure figure super clone that listenerlist listener list = new eventlistenerlist event listener list that isconnectorsvisible is connectors visible = that courtingconnection courting connection = if this decorator != { that decorator = figure this decorator clone } that } catch clonenotsupportedexception clone not supported e { internalerror internal = new internalerror internal e getmessage get message initcause init cause e throw } } abstractfigure figure basicclone basic clone hashmap<figure hash map< figure figure> oldtonew old to new { } remap hashmap<figure hash map< figure figure> oldtonew old to new { } collection<handle> collection< handle> createhandles create handles detaillevel detail level { linkedlist<handle> linked list< handle> handles = new linkedlist<handle> linked list< handle> if detaillevel detail level == 0 { boxhandlekit box handle kit addboxhandles add box handles this handles } handles } cursor getcursor get cursor point2d point2 d p { if contains p { cursor getpredefinedcursor get predefined cursor cursor HAND_CURSOR } else { cursor getdefaultcursor get default cursor } } setbounds set bounds rectangle2d rectangle2 d bounds { setbounds set bounds new point2d point2 d bounds x bounds y new point2d point2 d bounds x + bounds width bounds y + bounds height } setbounds set bounds point2d point2 d anchor point2d point2 d { point2d point2 d oldanchor old anchor = getstartpoint get start point point2d point2 d oldlead old = getendpoint get end point if ! oldanchor old anchor equals anchor || ! oldlead old equals { willchange will change basicsetbounds basic set bounds anchor changed fireundoableedithappened fire undoable edit happened new setboundsedit set bounds edit this oldanchor old anchor oldlead old anchor } } canconnect can connect { } invalidate { fireareainvalidated fire area invalidated getdrawbounds get draw bounds } ischanging is changing { changingdepth changing depth != 0 } getchangingdepth get changing depth { changingdepth changing depth } willchange will change { changingdepth++ changing depth++ invalidate } validate { } changed { if changingdepth changing depth <= 1 { validate firefigurechanged fire figure changed getdrawbounds get draw bounds changingdepth changing depth = 0 } else { changingdepth changing depth } } transform affinetransform affine transform tx { willchange will change basictransform basic transform tx fireundoableedithappened fire undoable edit happened new transformedit transform edit this tx changed } basictransform basic transform affinetransform affine transform ty connector findconnector find connector point2d point2 d p connectionfigure connection figure prototype { new chopboxconnector chop box connector this } includes figure figure { figure == this } figure findfigureinside find figure inside point2d point2 d p { contains p ? this } connector findcompatibleconnector find compatible connector connector c isstart is start { new chopboxconnector chop box connector this } collection<action> collection< action> getactions get actions point2d point2 d p { collections emptylist empty list } tool gettool get tool point2d point2 d p { } handlemouseclick handle mouse click point2d point2 d p mouseevent mouse event evt drawingview drawing view view { } handledrop handle drop point2d point2 d p collection<figure> collection< figure> droppedfigures dropped figures drawingview drawing view view { } point2d point2 d getendpoint get end point { rectangle2d rectangle2 d r = getbounds get bounds new point2d point2 d r x + r width r y + r height } point2d point2 d getstartpoint get start point { rectangle2d rectangle2 d r = getbounds get bounds new point2d point2 d r x r y } dimension2ddouble dimension2 d getpreferredsize get preferred size { rectangle2d rectangle2 d r = getbounds get bounds new dimension2ddouble dimension2 d r width r height } remap map oldtonew old to new { } isinteractive is interactive { isinteractive is interactive } setinteractive set interactive b { isinteractive is interactive = b } isvisible is visible { isvisible is visible } setvisible set visible newvalue new value { if newvalue new value != isvisible is visible { willchange will change isvisible is visible = newvalue new value changed } } setconnectorsvisible set connectors visible isvisible is visible connectionfigure connection figure connection { willchange will change isconnectorsvisible is connectors visible = isvisible is visible courtingconnection courting connection = connection changed } isconnectorsvisible is connectors visible { isconnectorsvisible is connectors visible } connectionfigure connection figure getcourtingconnection get courting connection { courtingconnection courting connection } collection<figure> collection< figure> getdecomposition get decomposition { linkedlist<figure> linked list< figure> list = new linkedlist<figure> linked list< figure> list add this list } fontrendercontext font render context getfontrendercontext get font render context { fontrendercontext font render context frc = if frc == { frc = new fontrendercontext font render context new affinetransform affine transform options istextantialiased is text antialiased options isfractionalmetrics is fractional metrics } frc } requestremove request remove { firefigurerequestremove fire figure request remove } getlayer get layer { 0 } gettooltip get tooltip point2d point2 d p { } setdecorator set decorator figure newvalue new value { willchange will change decorator = newvalue new value if decorator != { decorator basicsetbounds basic set bounds getstartpoint get start point getendpoint get end point } changed } figure getdecorator get decorator { decorator } draw graphics2d graphics2 d g { if isdrawdecoratorfirst is draw decorator first { drawdecorator draw decorator g drawfigure draw figure g } else { drawfigure draw figure g drawdecorator draw decorator g } } drawfigure draw figure graphics2d graphics2 d g drawdecorator draw decorator graphics2d graphics2 d g { if decorator != { updatedecoratorbounds update decorator bounds decorator draw g } } updatedecoratorbounds update decorator bounds { if decorator != { point2d point2 d sp = getstartpoint get start point point2d point2 d ep = getendpoint get end point insets2ddouble insets2 d decoratorinsets decorator insets = attributekeys attribute keys DECORATOR_INSETS get this sp x = decoratorinsets decorator insets left sp y = decoratorinsets decorator insets top ep x += decoratorinsets decorator insets right ep y += decoratorinsets decorator insets bottom decorator basicsetbounds basic set bounds sp ep } } rectangle2d rectangle2 d getdrawbounds get draw bounds { rectangle2d rectangle2 d figuredrawbounds figure draw bounds = getfiguredrawbounds get figure draw bounds if decorator != { updatedecoratorbounds update decorator bounds figuredrawbounds figure draw bounds add decorator getdrawbounds get draw bounds } figuredrawbounds figure draw bounds } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds tostring to { stringbuilder builder buf = new stringbuilder builder buf append getclass get getname get name substring getclass get getname get name lastindexof last index of ' ' +1 buf append '@' buf append hashcode hash buf tostring to } } 