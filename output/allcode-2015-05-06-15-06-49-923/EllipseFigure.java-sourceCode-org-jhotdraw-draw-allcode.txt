org jhotdraw draw import org jhotdraw geom geom import org jhotdraw util * import awt * import awt geom * import org jhotdraw draw attributekeys attribute keys * ellipsefigure ellipse figure attributedfigure attributed figure { private ellipse2d ellipse2 d ellipse ellipsefigure ellipse figure { this 0 0 0 0 } ellipsefigure ellipse figure x y width height { ellipse = new ellipse2d ellipse2 d x y width height setattributeenabled set attribute enabled TEXT_COLOR } connector findconnector find connector point2d point2 d p connectionfigure connection figure prototype { new chopellipseconnector chop ellipse connector this } connector findcompatibleconnector find compatible connector connector c isstartconnector is start connector { new chopellipseconnector chop ellipse connector this } rectangle2d rectangle2 d getbounds get bounds { rectangle2d rectangle2 d ellipse getbounds2d get bounds2 d } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { rectangle2d rectangle2 d r = rectangle2d rectangle2 d ellipse getbounds2d get bounds2 d grow = attributekeys attribute keys getperpendicularhitgrowth get perpendicular hit growth this geom grow r grow grow r } drawfill draw fill graphics2d graphics2 d g { ellipse2d ellipse2 d r = ellipse2d ellipse2 d ellipse clone grow = attributekeys attribute keys getperpendicularfillgrowth get perpendicular fill growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 if r width > 0 r height > 0 { g fill r } } drawstroke draw stroke graphics2d graphics2 d g { ellipse2d ellipse2 d r = ellipse2d ellipse2 d ellipse clone grow = attributekeys attribute keys getperpendiculardrawgrowth get perpendicular draw growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 if r width > 0 r height > 0 { g draw r } } contains point2d point2 d p { ellipse2d ellipse2 d r = ellipse2d ellipse2 d ellipse clone grow = attributekeys attribute keys getperpendicularhitgrowth get perpendicular hit growth this r x = grow r y = grow r width += grow * 2 r height += grow * 2 r contains p } basicsetbounds basic set bounds point2d point2 d anchor point2d point2 d { ellipse x = math min anchor x x ellipse y = math min anchor y y ellipse width = math max 0 1 math abs x anchor x ellipse height = math max 0 1 math abs y anchor y } basictransform basic transform affinetransform affine transform tx { point2d point2 d anchor = getstartpoint get start point point2d point2 d = getendpoint get end point basicsetbounds basic set bounds point2d point2 d tx transform anchor anchor point2d point2 d tx transform } ellipsefigure ellipse figure clone { ellipsefigure ellipse figure that = ellipsefigure ellipse figure super clone that ellipse = ellipse2d ellipse2 d this ellipse clone that } restoreto restore to geometry { ellipse2d ellipse2 d r = ellipse2d ellipse2 d geometry ellipse x = r x ellipse y = r y ellipse width = r width ellipse height = r height } getrestoredata get restore data { ellipse clone } } 