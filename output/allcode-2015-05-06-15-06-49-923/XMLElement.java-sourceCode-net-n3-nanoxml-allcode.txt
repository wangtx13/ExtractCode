net n3 nanoxml import io serializable import util * xmlelement xml element implements ixmlelement i xml element serializable { long serialversionuid serial uid = 2383376380548624920l 2383376380548624920 l NO_LINE = 1 private ixmlelement i xml element parent private arraylist list attributes private arraylist list children private name private fullname full name private namespace private content private systemid private linenr line nr xmlelement xml element { this NO_LINE } xmlelement xml element fullname full name { this fullname full name NO_LINE } xmlelement xml element fullname full name systemid linenr line nr { this fullname full name systemid linenr line nr } xmlelement xml element fullname full name namespace { this fullname full name namespace NO_LINE } xmlelement xml element fullname full name namespace systemid linenr line nr { this attributes = new arraylist list this children = new arraylist list 8 this fullname full name = fullname full name if namespace == { this name = fullname full name } else { index = fullname full name indexof index of ' ' if index >= 0 { this name = fullname full name substring index + 1 } else { this name = fullname full name } } this namespace = namespace this content = this linenr line nr = linenr line nr this systemid = systemid this parent = } ixmlelement i xml element createpcdataelement create p c data element { new xmlelement xml element } ixmlelement i xml element createelement create element fullname full name { new xmlelement xml element fullname full name } ixmlelement i xml element createelement create element fullname full name systemid linenr line nr { new xmlelement xml element fullname full name systemid linenr line nr } ixmlelement i xml element createelement create element fullname full name namespace { new xmlelement xml element fullname full name namespace } ixmlelement i xml element createelement create element fullname full name namespace systemid linenr line nr { new xmlelement xml element fullname full name namespace systemid linenr line nr } finalize throwable { this attributes clear this attributes = this children = this fullname full name = this name = this namespace = this content = this systemid = this parent = super finalize } ixmlelement i xml element getparent get parent { this parent } getfullname get full name { this fullname full name } getname get name { this name } getnamespace get namespace { this namespace } setname set name name { this name = name this fullname full name = name this namespace = } setname set name fullname full name namespace { index = fullname full name indexof index of ' ' if namespace == || index < 0 { this name = fullname full name } else { this name = fullname full name substring index + 1 } this fullname full name = fullname full name this namespace = namespace } addchild add child ixmlelement i xml element child { if child == { throw new illegalargumentexception illegal argument child must not be } if child getname get name == ! this children isempty is empty { ixmlelement i xml element lastchild last child = ixmlelement i xml element this children get this children size 1 if lastchild last child getname get name == { lastchild last child setcontent set content lastchild last child getcontent get content + child getcontent get content } } xmlelement xml element child parent = this this children add child } insertchild insert child ixmlelement i xml element child index { if child == { throw new illegalargumentexception illegal argument child must not be } if child getname get name == ! this children isempty is empty { ixmlelement i xml element lastchild last child = ixmlelement i xml element this children get this children size 1 if lastchild last child getname get name == { lastchild last child setcontent set content lastchild last child getcontent get content + child getcontent get content } } xmlelement xml element child parent = this this children add index child } removechild remove child ixmlelement i xml element child { if child == { throw new illegalargumentexception illegal argument child must not be } this children remove child } removechildatindex remove child at index index { this children remove index } iterator iteratechildren iterate children { this children iterator } isleaf is leaf { this children isempty is empty } haschildren has children { ! this children isempty is empty } getchildrencount get children count { this children size } arraylist list getchildren get children { this children } ixmlelement i xml element getchildatindex get child at index index arrayindexoutofboundsexception index out of bounds { ixmlelement i xml element this children get index } ixmlelement i xml element getfirstchildnamed get first child named name { iterator enm = this children iterator while enm hasnext has next { ixmlelement i xml element child = ixmlelement i xml element enm next childname child name = child getfullname get full name if childname child name != childname child name equals name { child } } } ixmlelement i xml element getfirstchildnamed get first child named name namespace { iterator enm = this children iterator while enm hasnext has next { ixmlelement i xml element child = ixmlelement i xml element enm next str = child getname get name found = str != str equals name str = child getnamespace get namespace if str == { found = name == } else { found = str equals namespace } if found { child } } } arraylist list getchildrennamed get children named name { arraylist list result = new arraylist list this children size iterator enm = this children iterator while enm hasnext has next { ixmlelement i xml element child = ixmlelement i xml element enm next childname child name = child getfullname get full name if childname child name != childname child name equals name { result add child } } result } arraylist list getchildrennamed get children named name namespace { arraylist list result = new arraylist list this children size iterator enm = this children iterator while enm hasnext has next { ixmlelement i xml element child = ixmlelement i xml element enm next str = child getname get name found = str != str equals name str = child getnamespace get namespace if str == { found = name == } else { found = str equals namespace } if found { result add child } } result } private xmlattribute xml attribute findattribute find attribute fullname full name { iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next if attr getfullname get full name equals fullname full name { attr } } } private xmlattribute xml attribute findattribute find attribute name namespace { iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next found = attr getname get name equals name if namespace == { found = attr getnamespace get namespace == } else { found = namespace equals attr getnamespace get namespace } if found { attr } } } getattributecount get attribute count { this attributes size } getattribute get attribute name { this getattribute get attribute name } getattribute get attribute name defaultvalue default value { xmlattribute xml attribute attr = this findattribute find attribute name if attr == { defaultvalue default value } else { attr getvalue get value } } getattribute get attribute name namespace defaultvalue default value { xmlattribute xml attribute attr = this findattribute find attribute name namespace if attr == { defaultvalue default value } else { attr getvalue get value } } getattribute get attribute name defaultvalue default value { value = this getattribute get attribute name integer tostring to defaultvalue default value integer parseint parse value } getattribute get attribute name namespace defaultvalue default value { value = this getattribute get attribute name namespace integer tostring to defaultvalue default value integer parseint parse value } getattributetype get attribute type name { xmlattribute xml attribute attr = this findattribute find attribute name if attr == { } else { attr gettype get type } } getattributenamespace get attribute namespace name { xmlattribute xml attribute attr = this findattribute find attribute name if attr == { } else { attr getnamespace get namespace } } getattributetype get attribute type name namespace { xmlattribute xml attribute attr = this findattribute find attribute name namespace if attr == { } else { attr gettype get type } } setattribute set attribute name value { xmlattribute xml attribute attr = this findattribute find attribute name if attr == { attr = new xmlattribute xml attribute name name value cdata c d a t a this attributes add attr } else { attr setvalue set value value } } setattribute set attribute fullname full name namespace value { index = fullname full name indexof index of ' ' name = fullname full name substring index + 1 xmlattribute xml attribute attr = this findattribute find attribute name namespace if attr == { attr = new xmlattribute xml attribute fullname full name name namespace value cdata c d a t a this attributes add attr } else { attr setvalue set value value } } removeattribute remove attribute name { for i = 0 i < this attributes size i++ { xmlattribute xml attribute attr = xmlattribute xml attribute this attributes get i if attr getfullname get full name equals name { this attributes remove i } } } removeattribute remove attribute name namespace { for i = 0 i < this attributes size i++ { xmlattribute xml attribute attr = xmlattribute xml attribute this attributes get i found = attr getname get name equals name if namespace == { found = attr getnamespace get namespace == } else { found = attr getnamespace get namespace equals namespace } if found { this attributes remove i } } } iterator iterateattributenames iterate attribute names { arraylist list result = new arraylist list iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next result add attr getfullname get full name } result iterator } hasattribute has attribute name { this findattribute find attribute name != } hasattribute has attribute name namespace { this findattribute find attribute name namespace != } properties getattributes get attributes { properties result = new properties iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next result put attr getfullname get full name attr getvalue get value } result } properties getattributesinnamespace get attributes in namespace namespace { properties result = new properties iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next if namespace == { if attr getnamespace get namespace == { result put attr getname get name attr getvalue get value } } else { if namespace equals attr getnamespace get namespace { result put attr getname get name attr getvalue get value } } } result } getsystemid get systemid { this systemid } getlinenr get line nr { this linenr line nr } getcontent get content { this content } setcontent set content content { this content = content } equals rawelement raw element { try { this equalsxmlelement equals xml element ixmlelement i xml element rawelement raw element } catch classcastexception cast e { } } equalsxmlelement equals xml element ixmlelement i xml element elt { if ! this name equals elt getname get name { } if this attributes size != elt getattributecount get attribute count { } iterator enm = this attributes iterator while enm hasnext has next { xmlattribute xml attribute attr = xmlattribute xml attribute enm next if ! elt hasattribute has attribute attr getname get name attr getnamespace get namespace { } value = elt getattribute get attribute attr getname get name attr getnamespace get namespace if ! attr getvalue get value equals value { } type = elt getattributetype get attribute type attr getname get name attr getnamespace get namespace if ! attr gettype get type equals type { } } if this children size != elt getchildrencount get children count { } for i = 0 i < this children size i++ { ixmlelement i xml element child1 = this getchildatindex get child at index i ixmlelement i xml element child2 = elt getchildatindex get child at index i if ! child1 equalsxmlelement equals xml element child2 { } } } } 