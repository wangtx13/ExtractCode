org jhotdraw geom import awt * import awt geom * import awt font * doublestroke stroke implements stroke { private basicstroke basic stroke outlinestroke outline stroke private float innerwidth inner width private float outlinewidth outline width private miterlimit miter limit private float dashes private float dashphase dash phase doublestroke stroke float innerwidth inner width float outlinewidth outline width { this innerwidth inner width outlinewidth outline width basicstroke basic stroke CAP_SQUARE basicstroke basic stroke JOIN_BEVEL 10f 0f } doublestroke stroke float innerwidth inner width float outlinewidth outline width cap join float miterlimit miter limit float dashes float dashphase dash phase { this innerwidth inner width = innerwidth inner width this outlinewidth outline width = outlinewidth outline width this miterlimit miter limit = miterlimit miter limit outlinestroke outline stroke = new basicstroke basic stroke outlinewidth outline width cap basicstroke basic stroke JOIN_BEVEL miterlimit miter limit dashes dashphase dash phase } shape createstrokedshape create stroked shape shape s { bezierpath bezier path bp = new bezierpath bezier path generalpath general path left = new generalpath general path generalpath general path right = new generalpath general path coords = new 6 for pathiterator path iterator i = s getpathiterator get path iterator 0 1d ! i isdone is done i next { type = i currentsegment current segment coords switch type { case pathiterator path iterator SEG_MOVETO if bp size != 0 { tracestroke trace stroke bp left right } bp clear bp setclosed set closed bp moveto move to coords 0 coords 1 break case pathiterator path iterator SEG_LINETO if coords 0 != bp get bp size 1 x 0 || coords 1 != bp get bp size 1 y 0 { bp lineto line to coords 0 coords 1 } break case pathiterator path iterator SEG_QUADTO bp quadto quad to coords 0 coords 1 coords 2 coords 3 break case pathiterator path iterator SEG_CUBICTO bp curveto curve to coords 0 coords 1 coords 2 coords 3 coords 4 coords 5 break case pathiterator path iterator SEG_CLOSE bp setclosed set closed break } } if bp size != 0 { tracestroke trace stroke bp left right } right append left outlinestroke outline stroke createstrokedshape create stroked shape right } tracestroke trace stroke bezierpath bezier path bp generalpath general path left generalpath general path right { currentcorners current corners = new 8 prevcorners prev corners = new 8 point2d point2 d intersect if bp isclosed is closed { bezierpath bezier path node prev = bp get bp size 1 for i=0 i < bp size i++ { bezierpath bezier path node node = bp get i if prev x 0 == node x 0 prev y 0 == node y 0 { bp remove i } else { prev = node } } } else { bezierpath bezier path node prev = bp get 0 for i=1 i < bp size i++ { bezierpath bezier path node node = bp get i if prev x 0 == node x 0 prev y 0 == node y 0 { bp remove i } else { prev = node } } } if bp isclosed is closed bp size > 1 { prevcorners prev corners = computethickline compute thick line bp get bp size 1 x 0 bp get bp size 1 y 0 bp get 0 x 0 bp get 0 y 0 innerwidth inner width prevcorners prev corners currentcorners current corners = computethickline compute thick line bp get 0 x 0 bp get 0 y 0 bp get 1 x 0 bp get 1 y 0 innerwidth inner width currentcorners current corners intersect = geom intersect prevcorners prev corners 0 prevcorners prev corners 1 prevcorners prev corners 4 prevcorners prev corners 5 currentcorners current corners 0 currentcorners current corners 1 currentcorners current corners 4 currentcorners current corners 5 miterlimit miter limit if intersect != { right moveto move to float intersect x float intersect y } else { right moveto move to float prevcorners prev corners 4 float prevcorners prev corners 5 right lineto line to float currentcorners current corners 0 float currentcorners current corners 1 } intersect = geom intersect prevcorners prev corners 2 prevcorners prev corners 3 prevcorners prev corners 6 prevcorners prev corners 7 currentcorners current corners 2 currentcorners current corners 3 currentcorners current corners 6 currentcorners current corners 7 miterlimit miter limit if intersect != { left moveto move to float intersect x float intersect y } else { left moveto move to float prevcorners prev corners 6 float prevcorners prev corners 7 left lineto line to float currentcorners current corners 2 float currentcorners current corners 3 } } else { if bp size > 1 { currentcorners current corners = computethickline compute thick line bp get 0 x 0 bp get 0 y 0 bp get 1 x 0 bp get 1 y 0 innerwidth inner width currentcorners current corners right moveto move to float currentcorners current corners 0 float currentcorners current corners 1 left moveto move to float currentcorners current corners 2 float currentcorners current corners 3 } } for i=1 n = bp size 1 i < n i++ { tmp = prevcorners prev corners prevcorners prev corners = currentcorners current corners currentcorners current corners = computethickline compute thick line bp get i x 0 bp get i y 0 bp get i+1 x 0 bp get i+1 y 0 innerwidth inner width tmp intersect = geom intersect prevcorners prev corners 0 prevcorners prev corners 1 prevcorners prev corners 4 prevcorners prev corners 5 currentcorners current corners 0 currentcorners current corners 1 currentcorners current corners 4 currentcorners current corners 5 miterlimit miter limit if intersect != { right lineto line to float intersect x float intersect y } else { right lineto line to float prevcorners prev corners 4 float prevcorners prev corners 5 right lineto line to float currentcorners current corners 0 float currentcorners current corners 1 } intersect = geom intersect prevcorners prev corners 2 prevcorners prev corners 3 prevcorners prev corners 6 prevcorners prev corners 7 currentcorners current corners 2 currentcorners current corners 3 currentcorners current corners 6 currentcorners current corners 7 miterlimit miter limit if intersect != { left lineto line to float intersect x float intersect y } else { left lineto line to float prevcorners prev corners 6 float prevcorners prev corners 7 left lineto line to float currentcorners current corners 2 float currentcorners current corners 3 } } if bp isclosed is closed { tmp = prevcorners prev corners prevcorners prev corners = currentcorners current corners currentcorners current corners = computethickline compute thick line bp get bp size 1 x 0 bp get bp size 1 y 0 bp get 0 x 0 bp get 0 y 0 innerwidth inner width tmp intersect = geom intersect prevcorners prev corners 0 prevcorners prev corners 1 prevcorners prev corners 4 prevcorners prev corners 5 currentcorners current corners 0 currentcorners current corners 1 currentcorners current corners 4 currentcorners current corners 5 miterlimit miter limit if intersect != { right lineto line to float intersect x float intersect y } else { right lineto line to float prevcorners prev corners 4 float prevcorners prev corners 5 right lineto line to float currentcorners current corners 0 float currentcorners current corners 1 } intersect = geom intersect prevcorners prev corners 2 prevcorners prev corners 3 prevcorners prev corners 6 prevcorners prev corners 7 currentcorners current corners 2 currentcorners current corners 3 currentcorners current corners 6 currentcorners current corners 7 miterlimit miter limit if intersect != { left lineto line to float intersect x float intersect y } else { left lineto line to float prevcorners prev corners 6 float prevcorners prev corners 7 left lineto line to float currentcorners current corners 2 float currentcorners current corners 3 } right closepath close path left closepath close path } else { right lineto line to float currentcorners current corners 4 float currentcorners current corners 5 left lineto line to float currentcorners current corners 6 float currentcorners current corners 7 } } private computethickline compute thick line seg offset corners { computethickline compute thick line seg 0+offset seg 1+offset seg 2+offset seg 3+offset innerwidth inner width corners } private computethickline compute thick line x1 y1 x2 y2 thickness corners { dx = x2 x1 dy = y2 y1 linelength line length = math sqrt dx * dx + dy * dy scale = thickness / 2d * linelength line length ddx = scale * dy ddy = scale * dx corners 0 = x1 + ddx corners 1 = y1 + ddy corners 2 = x1 ddx corners 3 = y1 ddy corners 4 = x2 + ddx corners 5 = y2 + ddy corners 6 = x2 ddx corners 7 = y2 ddy corners } } 