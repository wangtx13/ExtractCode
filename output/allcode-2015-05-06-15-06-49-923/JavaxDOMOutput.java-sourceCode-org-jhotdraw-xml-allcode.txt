org jhotdraw xml import awt * import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import io * javaxdomoutput javax dom output implements domoutput dom output { private doctype private hashmap<object hash map< string> objectids private hashmap<string hash map< object> prototypes private document document private node current private domfactory dom factory factory javaxdomoutput javax dom output domfactory dom factory factory ioexception i o { this factory = factory try { objectids = new hashmap<object hash map< string> document = documentbuilderfactory document builder factory newinstance new instance newdocumentbuilder new document builder newdocument new document current = document } catch parserconfigurationexception parser configuration e { ioexception i o = new ioexception i o e getmessage get message initcause init cause e throw } } save outputstream output stream out ioexception i o { try { if doctype != { outputstreamwriter output stream writer w = new outputstreamwriter output stream writer out utf8 u t f8 w write <!doctype <! d o c t y p e w write doctype w write >\n w flush } transformer t = transformerfactory transformer factory newinstance new instance newtransformer new transformer t transform new domsource dom source document new streamresult stream result out } catch transformerexception transformer e { ioexception i o = new ioexception i o e getmessage get message initcause init cause e throw } } save writer out ioexception i o { try { if doctype != { out write <!doctype <! d o c t y p e out write doctype out write >\n } transformer t = transformerfactory transformer factory newinstance new instance newtransformer new transformer t transform new domsource dom source document new streamresult stream result out } catch transformerexception transformer e { ioexception i o = new ioexception i o e getmessage get message initcause init cause e throw } } openelement open element tagname tag name { element newelement new element = document createelement create element tagname tag name current appendchild append child newelement new element current = newelement new element } closeelement close element { current = current getparentnode get parent node } addcomment add comment comment { current appendchild append child document createcomment create comment comment } addtext add text text { current appendchild append child document createtextnode create text node text } addattribute add attribute name value { if value != { element current setattribute set attribute name value } } addattribute add attribute name value { element current setattribute set attribute name integer tostring to value } addattribute add attribute name value { element current setattribute set attribute name tostring to value } addattribute add attribute name float value { str = float tostring to value if str endswith ends with 0 str = str substring 0 str length 2 element current setattribute set attribute name str } addattribute add attribute name value { str = tostring to value if str endswith ends with 0 str = str substring 0 str length 2 element current setattribute set attribute name str } writeobject write o ioexception i o { if o == { openelement open element closeelement close element } else if o instanceof domstorable dom storable { writestorable write storable domstorable dom storable o } else if o instanceof { openelement open element addtext add text o closeelement close element } else if o instanceof integer { openelement open element addtext add text o tostring to closeelement close element } else if o instanceof long { openelement open element long addtext add text o tostring to closeelement close element } else if o instanceof { openelement open element addtext add text o tostring to closeelement close element } else if o instanceof float { openelement open element float addtext add text o tostring to closeelement close element } else if o instanceof { openelement open element addtext add text o tostring to closeelement close element } else if o instanceof color { color c = color o openelement open element color addattribute add attribute rgba # +integer + integer tohexstring to hex c getrgb get r g b closeelement close element } else if o instanceof { openelement open element intarray a = o for i=0 i < a length i++ { writeobject write new integer a i } closeelement close element } else if o instanceof float { openelement open element floatarray float float a = float o for i=0 i < a length i++ { writeobject write new float a i } closeelement close element } else if o instanceof { openelement open element doublearray a = o for i=0 i < a length i++ { writeobject write new a i } closeelement close element } else if o instanceof font { font f = font o openelement open element font addattribute add attribute name f getname get name addattribute add attribute style f getstyle get style addattribute add attribute size f getsize get size closeelement close element } else if o instanceof enum { openelement open element enum enum e = enum o addattribute add attribute type factory getenumname get enum name e addtext add text factory getenumvalue get enum value e closeelement close element } else { throw new illegalargumentexception illegal argument unable to store +o+ +o getclass get } } private writestorable write storable domstorable dom storable o ioexception i o { tagname tag name = factory getname get name o if tagname tag name == throw new illegalargumentexception illegal argument no tag name for +o openelement open element tagname tag name if objectids containskey contains key o { addattribute add attribute ref objectids get o } else { = integer tostring to objectids size 16 objectids put o addattribute add attribute o write this } closeelement close element } addattribute add attribute name float value float defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if ! value equals defaultvalue default value { addattribute add attribute name value } } getprototype get prototype { if prototypes == { prototypes = new hashmap<string hash map< object> } if ! prototypes containskey contains key current getnodename get node name { prototypes put current getnodename get node name factory create current getnodename get node name } prototypes get current getnodename get node name } setdoctype set doctype doctype { this doctype = doctype } } 