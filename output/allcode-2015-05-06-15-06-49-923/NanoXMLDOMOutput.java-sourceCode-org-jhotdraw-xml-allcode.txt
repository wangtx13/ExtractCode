org jhotdraw xml import awt * import util * import io * import net n3 nanoxml * nanoxmldomoutput nano xml dom output implements domoutput dom output { private doctype private hashmap<object hash map< string> objectids private hashmap<string hash map< object> prototypes private xmlelement xml element document private xmlelement xml element current private domfactory dom factory factory private stack<xmlelement> stack< xml element> stack nanoxmldomoutput nano xml dom output domfactory dom factory factory { this factory = factory objectids = new hashmap<object hash map< string> document = new xmlelement xml element current = document stack = new stack<xmlelement> stack< xml element> stack push current } save outputstream output stream out ioexception i o { writer w = new outputstreamwriter output stream writer out utf8 u t f8 save w w flush } save writer out ioexception i o { if doctype != { out write <!doctype <! d o c t y p e out write doctype out write >\n } xmlwriter xml writer writer = new xmlwriter xml writer out writer write xmlelement xml element document getchildren get children get 0 } print printwriter print writer out { xmlwriter xml writer writer = new xmlwriter xml writer out try { writer write xmlelement xml element document getchildren get children get 0 } catch ioexception i o e { internalerror internal = new internalerror internal initcause init cause e throw } } openelement open element tagname tag name { xmlelement xml element newelement new element = new xmlelement xml element newelement new element setname set name tagname tag name current addchild add child newelement new element stack push current current = newelement new element } closeelement close element { current = xmlelement xml element stack pop } addcomment add comment comment { } addtext add text text { old = current getcontent get content if old == { current setcontent set content text } else { current setcontent set content old+text } } addattribute add attribute name value { if value != { current setattribute set attribute name value } } addattribute add attribute name value { current setattribute set attribute name integer tostring to value } addattribute add attribute name value { current setattribute set attribute name new value tostring to } addattribute add attribute name float value { str = float tostring to value if str endswith ends with 0 str = str substring 0 str length 2 current setattribute set attribute name str } addattribute add attribute name value { str = tostring to value if str endswith ends with 0 str = str substring 0 str length 2 current setattribute set attribute name str } writeobject write o ioexception i o { if o == { openelement open element closeelement close element } else if o instanceof domstorable dom storable { writestorable write storable domstorable dom storable o } else if o instanceof { openelement open element addtext add text o closeelement close element } else if o instanceof integer { openelement open element addtext add text o tostring to closeelement close element } else if o instanceof long { openelement open element long addtext add text o tostring to closeelement close element } else if o instanceof { openelement open element str = o tostring to if str endswith ends with 0 str = str substring 0 str length 2 addtext add text str closeelement close element } else if o instanceof float { openelement open element float str = o tostring to if str endswith ends with 0 str = str substring 0 str length 2 addtext add text str closeelement close element } else if o instanceof { openelement open element addtext add text o tostring to closeelement close element } else if o instanceof color { color c = color o openelement open element color addattribute add attribute rgba # +integer + integer tohexstring to hex c getrgb get r g b closeelement close element } else if o instanceof { openelement open element intarray a = o for i=0 i < a length i++ { writeobject write new integer a i } closeelement close element } else if o instanceof float { openelement open element floatarray float float a = float o for i=0 i < a length i++ { writeobject write new float a i } closeelement close element } else if o instanceof { openelement open element doublearray a = o for i=0 i < a length i++ { writeobject write new a i } closeelement close element } else if o instanceof font { font f = font o openelement open element font addattribute add attribute name f getname get name addattribute add attribute style f getstyle get style addattribute add attribute size f getsize get size closeelement close element } else if o instanceof enum { openelement open element enum enum e = enum o addattribute add attribute type factory getenumname get enum name e addtext add text factory getenumvalue get enum value e closeelement close element } else { throw new illegalargumentexception illegal argument unable to store +o+ +o getclass get } } private xmlelement xml element writestorable write storable domstorable dom storable o ioexception i o { tagname tag name = factory getname get name o if tagname tag name == throw new illegalargumentexception illegal argument no tag name for +o openelement open element tagname tag name xmlelement xml element element = current if objectids containskey contains key o { addattribute add attribute ref objectids get o } else { = integer tostring to objectids size 16 objectids put o addattribute add attribute o write this } closeelement close element element } addattribute add attribute name float value float defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != defaultvalue default value { addattribute add attribute name value } } addattribute add attribute name value defaultvalue default value { if value != ! value equals defaultvalue default value { addattribute add attribute name value } } getprototype get prototype { if prototypes == { prototypes = new hashmap<string hash map< object> } if ! prototypes containskey contains key current getname get name { prototypes put current getname get name factory create current getname get name } prototypes get current getname get name } setdoctype set doctype doctype { this doctype = doctype } } 