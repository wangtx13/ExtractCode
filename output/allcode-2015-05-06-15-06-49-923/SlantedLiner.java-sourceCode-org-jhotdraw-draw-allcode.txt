org jhotdraw draw import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output import org jhotdraw xml domstorable dom storable import util * import awt * import awt geom * import org jhotdraw geom * slantedliner slanted liner implements liner domstorable dom storable { private slantsize slant size slantedliner slanted liner { this 20 } slantedliner slanted liner slantsize slant size { this slantsize slant size = slantsize slant size } collection<handle> collection< handle> createhandles create handles bezierpath bezier path path { } lineout connectionfigure connection figure figure { bezierpath bezier path path = lineconnectionfigure line connection figure figure getbezierpath get bezier path connector start = figure getstartconnector get start connector connector end = figure getendconnector get end connector if start == || end == || path == { } while path size < 4 { path add 1 new bezierpath bezier path node 0 0 } while path size < 4 { path remove 1 } point2d point2 d sp = start findstart find start figure point2d point2 d ep = end findend find end figure sp = figure getstartpoint get start point ep = figure getendpoint get end point rectangle2d rectangle2 d sb = start getbounds get bounds rectangle2d rectangle2 d eb = end getbounds get bounds path get 0 moveto move to sp path get path size 1 moveto move to ep outcode = sb outcode sp if outcode == 0 { outcode = geom outcode sb eb } if outcode geom OUT_RIGHT != 0 { path get 1 moveto move to sp x + slantsize slant size sp y } else if outcode geom OUT_LEFT != 0 { path get 1 moveto move to sp x slantsize slant size sp y } else if outcode geom OUT_BOTTOM != 0 { path get 1 moveto move to sp x sp y + slantsize slant size } else { path get 1 moveto move to sp x sp y slantsize slant size } outcode = eb outcode ep if outcode == 0 { outcode = geom outcode eb sb } if outcode geom OUT_RIGHT != 0 { path get 2 moveto move to ep x + slantsize slant size ep y } else if outcode geom OUT_LEFT != 0 { path get 2 moveto move to ep x slantsize slant size ep y } else if outcode geom OUT_BOTTOM != 0 { path get 2 moveto move to ep x ep y + slantsize slant size } else { path get 2 moveto move to ep x ep y slantsize slant size } path invalidatepath invalidate path } read dominput dom input in { slantsize slant size = in getattribute get attribute slant 20d } write domoutput dom output out { out addattribute add attribute slant slantsize slant size } liner clone { try { liner super clone } catch clonenotsupportedexception clone not supported ex { internalerror internal = new internalerror internal ex getmessage get message initcause init cause ex throw } } } 