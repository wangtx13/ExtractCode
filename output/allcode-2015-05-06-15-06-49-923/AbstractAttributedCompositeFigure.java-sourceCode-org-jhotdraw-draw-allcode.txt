org jhotdraw draw import awt * import awt geom * import util * import io * import org jhotdraw draw attributekeys attribute keys * import org jhotdraw geom * import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output abstractattributedcompositefigure attributed composite figure abstractcompositefigure composite figure { private hashmap<attributekey hash map< attribute key object> attributes = new hashmap<attributekey hash map< attribute key object> private hashset<attributekey> hash set< attribute key> forbiddenattributes forbidden attributes abstractattributedcompositefigure attributed composite figure { } setattribute set attribute attributekey attribute key key newvalue new value { if forbiddenattributes forbidden attributes == || ! forbiddenattributes forbidden attributes contains key { oldvalue old value = attributes get key if ! attributes containskey contains key key || oldvalue old value != newvalue new value || oldvalue old value != newvalue new value != ! oldvalue old value equals newvalue new value { willchange will change basicsetattribute basic set attribute key newvalue new value fireattributechanged fire attribute changed key oldvalue old value newvalue new value fireundoableedithappened fire undoable edit happened new attributechangeedit attribute change edit this key oldvalue old value newvalue new value changed } } } setattributeenabled set attribute enabled attributekey attribute key key b { if forbiddenattributes forbidden attributes == { forbiddenattributes forbidden attributes = new hashset<attributekey> hash set< attribute key> } if b { forbiddenattributes forbidden attributes remove key } else { forbiddenattributes forbidden attributes add key } } isattributeenabled is attribute enabled attributekey attribute key key { forbiddenattributes forbidden attributes == || ! forbiddenattributes forbidden attributes contains key } setattributes set attributes hashmap<attributekey hash map< attribute key object> map { for map entry<attributekey entry< attribute key object> entry map entryset entry set { setattribute set attribute entry getkey get key entry getvalue get value } } map<attributekey map< attribute key object> getattributes get attributes { new hashmap<attributekey hash map< attribute key object> attributes } basicsetattribute basic set attribute attributekey attribute key key newvalue new value { if forbiddenattributes forbidden attributes == || ! forbiddenattributes forbidden attributes contains key { attributes put key newvalue new value } basicsetattributeonchildren basic set attribute on children key newvalue new value } basicsetattributeonchildren basic set attribute on children attributekey attribute key key newvalue new value { for figure child getchildren get children { child basicsetattribute basic set attribute key newvalue new value } } getattribute get attribute attributekey attribute key key { hasattribute has attribute key ? attributes get key key getdefaultvalue get default value } drawfigure draw figure graphics2d graphics2 d g { drawchildren draw children g if attributekeys attribute keys FILL_COLOR get this != { g setcolor set color attributekeys attribute keys FILL_COLOR get this drawfill draw fill g } if STROKE_COLOR get this != STROKE_WIDTH get this > 0d { g setstroke set stroke attributekeys attribute keys getstroke get stroke this g setcolor set color STROKE_COLOR get this drawstroke draw stroke g } if TEXT_COLOR get this != { if TEXT_SHADOW_COLOR get this != TEXT_SHADOW_OFFSET get this != { dimension2ddouble dimension2 d d = TEXT_SHADOW_OFFSET get this g translate d width d height g setcolor set color TEXT_SHADOW_COLOR get this drawtext draw text g g translate d width d height } g setcolor set color TEXT_COLOR get this drawtext draw text g } if isconnectorsvisible is connectors visible { drawconnectors draw connectors g } } drawchildren draw children graphics2d graphics2 d g { for figure child getchildren get children { child draw g } } drawconnectors draw connectors graphics2d graphics2 d g { } stroke getstroke get stroke { attributekeys attribute keys getstroke get stroke this } getstrokemiterlimitfactor get stroke miter limit factor { number value = number getattribute get attribute attributekeys attribute keys STROKE_MITER_LIMIT_FACTOR value != ? value doublevalue value 10f } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { width = attributekeys attribute keys getstroketotalwidth get stroke total width this / 2d if STROKE_JOIN get this == basicstroke basic stroke JOIN_MITER { width *= STROKE_MITER_LIMIT_FACTOR get this } width++ rectangle2d rectangle2 d r = getbounds get bounds geom grow r width width r } drawfill draw fill awt graphics2d graphics2 d g drawstroke draw stroke awt graphics2d graphics2 d g drawtext draw text awt graphics2d graphics2 d g { } abstractattributedcompositefigure attributed composite figure clone { abstractattributedcompositefigure attributed composite figure that = abstractattributedcompositefigure attributed composite figure super clone that attributes = new hashmap<attributekey hash map< attribute key object> this attributes if this forbiddenattributes forbidden attributes != { that forbiddenattributes forbidden attributes = new hashset<attributekey> hash set< attribute key> this forbiddenattributes forbidden attributes } that } writeattributes write attributes domoutput dom output out ioexception i o { figure prototype = figure out getprototype get prototype iselementopen is element open = for map entry<attributekey entry< attribute key object> entry attributes entryset entry set { attributekey attribute key key = entry getkey get key if forbiddenattributes forbidden attributes == || ! forbiddenattributes forbidden attributes contains key { prototypevalue prototype value = key get prototype attributevalue attribute value = key get this if prototypevalue prototype value != attributevalue attribute value || prototypevalue prototype value != attributevalue attribute value != ! prototypevalue prototype value equals attributevalue attribute value { if ! iselementopen is element open { out openelement open element a iselementopen is element open = } out openelement open element key getkey get key out writeobject write entry getvalue get value out closeelement close element } } } if iselementopen is element open { out closeelement close element } } readattributes read attributes dominput dom input in ioexception i o { if in getelementcount get element count a > 0 { in openelement open element a for i=in getelementcount get element count 1 i >= 0 i { in openelement open element i name = in gettagname get tag name value = in readobject read attributekey attribute key key = getattributekey get attribute key name if key != key isassignable is assignable value { if forbiddenattributes forbidden attributes == || ! forbiddenattributes forbidden attributes contains key { setattribute set attribute key value } } in closeelement close element } in closeelement close element } } attributekey attribute key getattributekey get attribute key name { attributekeys attribute keys supportedattributemap supported attribute map get name } applyattributesto apply attributes to figure that { for map entry<attributekey entry< attribute key object> entry attributes entryset entry set { that setattribute set attribute entry getkey get key entry getvalue get value } } write domoutput dom output out ioexception i o { super write out writeattributes write attributes out } read dominput dom input in ioexception i o { super read in readattributes read attributes in } removeattribute remove attribute attributekey attribute key key { if hasattribute has attribute key { oldvalue old value = getattribute get attribute key attributes remove key fireattributechanged fire attribute changed key oldvalue old value key getdefaultvalue get default value } } hasattribute has attribute attributekey attribute key key { attributes containskey contains key key } } 