org jhotdraw draw action import awt * verticalgridlayout vertical grid layout implements layoutmanager layout manager io serializable { hgap vgap rows cols isvertical is vertical = verticalgridlayout vertical grid layout { this 1 0 0 0 } verticalgridlayout vertical grid layout rows cols { this rows cols 0 0 } verticalgridlayout vertical grid layout rows cols isvertical is vertical { this rows cols 0 0 isvertical is vertical } verticalgridlayout vertical grid layout rows cols hgap vgap { this rows cols hgap vgap } verticalgridlayout vertical grid layout rows cols hgap vgap isvertical is vertical { if rows == 0 cols == 0 { throw new illegalargumentexception illegal argument rows and cols cannot both be zero } this rows = rows this cols = cols this hgap = hgap this vgap = vgap this isvertical is vertical = isvertical is vertical } getrows get rows { rows } setrows set rows rows { if rows == 0 this cols == 0 { throw new illegalargumentexception illegal argument rows and cols cannot both be zero } this rows = rows } setvertical set vertical b { isvertical is vertical = b } isvertical is vertical { isvertical is vertical } getcolumns get columns { cols } setcolumns set columns cols { if cols == 0 this rows == 0 { throw new illegalargumentexception illegal argument rows and cols cannot both be zero } this cols = cols } gethgap get hgap { hgap } sethgap set hgap hgap { this hgap = hgap } getvgap get vgap { vgap } setvgap set vgap vgap { this vgap = vgap } addlayoutcomponent add layout component name component comp { } removelayoutcomponent remove layout component component comp { } dimension preferredlayoutsize preferred layout size container parent { synchronized parent gettreelock get tree lock { insets insets = parent getinsets get insets ncomponents = parent getcomponentcount get component count nrows = rows ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } w = 0 h = 0 for i = 0 i < ncomponents i++ { component comp = parent getcomponent get component i dimension d = comp getpreferredsize get preferred size if w < d width { w = d width } if h < d height { h = d height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } dimension minimumlayoutsize minimum layout size container parent { synchronized parent gettreelock get tree lock { insets insets = parent getinsets get insets ncomponents = parent getcomponentcount get component count nrows = rows ncols = cols if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } w = 0 h = 0 for i = 0 i < ncomponents i++ { component comp = parent getcomponent get component i dimension d = comp getminimumsize get minimum size if w < d width { w = d width } if h < d height { h = d height } } new dimension insets left + insets right + ncols*w + ncols 1 *hgap insets top + insets bottom + nrows*h + nrows 1 *vgap } } layoutcontainer layout container container parent { synchronized parent gettreelock get tree lock { insets insets = parent getinsets get insets ncomponents = parent getcomponentcount get component count nrows = rows ncols = cols ltr = parent getcomponentorientation get component orientation islefttoright is left to right if ncomponents == 0 { } if nrows > 0 { ncols = ncomponents + nrows 1 / nrows } else { nrows = ncomponents + ncols 1 / ncols } w = parent getwidth get width insets left + insets right h = parent getheight get height insets top + insets bottom w = w ncols 1 * hgap / ncols h = h nrows 1 * vgap / nrows i if ltr { for c = 0 x = insets left c < ncols c++ x += w + hgap { for r = 0 y = insets top r < nrows r++ y += h + vgap { if isvertical is vertical { i = r + c * nrows } else { i = r * ncols + c } if i < ncomponents { parent getcomponent get component i setbounds set bounds x y w h } } } } else { for c = 0 x = parent getwidth get width insets right w c < ncols c++ x = w + hgap { for r = 0 y = insets top r < nrows r++ y += h + vgap { if isvertical is vertical { i = r + c * nrows } else { i = r * ncols + c } if i < ncomponents { parent getcomponent get component i setbounds set bounds x y w h } } } } } } tostring to { getclass get getname get name + hgap= + hgap + vgap= + vgap + rows= + rows + cols= + cols + } } 