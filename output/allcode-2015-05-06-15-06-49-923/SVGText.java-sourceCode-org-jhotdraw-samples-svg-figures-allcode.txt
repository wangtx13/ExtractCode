org jhotdraw samples svg figures import awt * import awt font * import awt geom * import io * import org jhotdraw draw * import org jhotdraw geom geom import org jhotdraw samples svg * import org jhotdraw xml * import org jhotdraw draw attributekeys attribute keys * svgtext s v g text textfigure text figure implements svgfigure s v g figure { enum textanchor text anchor { start s t a r t middle mid d l e end e n d } attributekey<textanchor> attribute key< text anchor> TEXT_ANCHOR = new attributekey<textanchor> attribute key< text anchor> textanchor text anchor textanchor text anchor start s t a r t svgtext s v g text { svgutil s v g util setdefaults set defaults this } @override @ override drawstroke draw stroke graphics2d graphics2 d g { if gettext get text != || iseditable is editable { rectangle2d rectangle2 d bounds = getbounds get bounds textlayout text layout layout = gettextlayout get text layout affinetransform affine transform tx = new affinetransform affine transform tx translate origin x origin y + layout getascent get ascent shape outline = layout getoutline get outline tx g draw outline } } @override @ override drawfill draw fill graphics2d graphics2 d g { if gettext get text != || iseditable is editable { textlayout text layout layout = gettextlayout get text layout layout draw g float origin x float origin y + layout getascent get ascent } } @override @ override drawtext draw text awt graphics2d graphics2 d g { } @override @ override write domoutput dom output out { out addattribute add attribute x origin x out addattribute add attribute y origin y out addtext add text gettext get text } writeattributes write attributes domoutput dom output out ioexception i o { svgutil s v g util writeattributes write attributes this out } @override @ override read dominput dom input in ioexception i o { origin x = svgutil s v g util getdimension get dimension in x origin y = svgutil s v g util getdimension get dimension in y settext set text in gettext get text readattributes read attributes in affinetransform affine transform tx = svgutil s v g util gettransform get transform in transform basictransform basic transform tx rectangle2d rectangle2 d r = getbounds get bounds switch TEXT_ANCHOR get this { case start s t a r t break case middle mid d l e origin x = r width / 2d break case end e n d origin x = r width break } origin y = FONT_SIZE get this } readattributes read attributes dominput dom input in ioexception i o { svgutil s v g util readattributes read attributes this in } color gettextcolor get text color { FILL_COLOR get this } color getfillcolor get fill color { color white } isempty is empty { gettext get text == || gettext get text length == 0 } } 