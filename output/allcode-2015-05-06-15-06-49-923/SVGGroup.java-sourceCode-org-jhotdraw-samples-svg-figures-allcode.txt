org jhotdraw samples svg figures import awt geom * import io * import util * import org jhotdraw draw * import org jhotdraw samples svg * import org jhotdraw xml * svggroup s v g group groupfigure group figure implements svgfigure s v g figure { svggroup s v g group { svgutil s v g util setdefaults set defaults this } @override @ override linkedlist<handle> linked list< handle> createhandles create handles detaillevel detail level { linkedlist<handle> linked list< handle> handles if detaillevel detail level == 0 { handles = linkedlist<handle> linked list< handle> super createhandles create handles detaillevel detail level handles add new rotatehandle rotate handle this } else { handles = new linkedlist<handle> linked list< handle> } handles } @override @ override read dominput dom input in ioexception i o { readattributes read attributes in for i=0 n = in getelementcount get element count i < n i++ { in openelement open element i name = in gettagname get tag name if name equals pattern { in closeelement close element } else if name equals color profile { in closeelement close element } else if name equals defs { in closeelement close element } else if name equals use { in closeelement close element } else if name equals script { in closeelement close element } else if name equals filter { in closeelement close element } else if name equals title { in closeelement close element } else if name equals desc { in closeelement close element } else if name equals switch { in closeelement close element } else if name equals radialgradient radial gradient { in closeelement close element } else if name equals lineargradient linear gradient { in closeelement close element } else { in closeelement close element f = in readobject read i if f instanceof svgdrawing s v g drawing { svggroup s v g group g = new svggroup s v g group g willchange will change for figure child svgdrawing s v g drawing f getfigures get figures { g basicadd basic add child } g changed if ! g isempty is empty { add g } } else if f instanceof svgfigure s v g figure { if ! svgfigure s v g figure f isempty is empty { add svgfigure s v g figure f } } else { throw new ioexception i o unexpected child +f } } } affinetransform affine transform tx = svgutil s v g util gettransform get transform in transform for figure child getchildren get children { child basictransform basic transform tx } invalidatebounds invalidate bounds } readattributes read attributes dominput dom input in ioexception i o { svgutil s v g util readattributes read attributes this in } @override @ override write domoutput dom output out ioexception i o { for figure child getchildren get children { out writeobject write child } writeattributes write attributes out } writeattributes write attributes domoutput dom output out ioexception i o { svgutil s v g util writeattributes write attributes this out } isempty is empty { getchildcount get child count == 0 } tostring to { stringbuilder builder buf = new stringbuilder builder buf append getclass get getname get name substring getclass get getname get name lastindexof last index of ' ' +1 buf append '@' buf append hashcode hash if getchildcount get child count > 0 { buf append ' ' for iterator<figure> iterator< figure> i = getchildren get children iterator i hasnext has next { figure child = i next buf append child if i hasnext has next { buf append ' ' } } buf append ' ' } buf tostring to } } 