org jhotdraw draw import org jhotdraw util * import util * import awt * import awt geom * import javax swing event * import javax swing undo * labeledlineconnectionfigure labeled line connection figure lineconnectionfigure line connection figure implements compositefigure composite figure { private layouter layouter private arraylist<figure> list< figure> children = new arraylist list private rectangle2d rectangle2 d drawbounds draw bounds private childhandler child handler childhandler child handler = new childhandler child handler this private childhandler child handler implements figurelistener figure listener undoableeditlistener undoable edit listener { private labeledlineconnectionfigure labeled line connection figure owner private childhandler child handler labeledlineconnectionfigure labeled line connection figure owner { this owner = owner } figurerequestremove figure request remove figureevent figure event e { owner remove e getfigure get figure } figureremoved figure removed figureevent figure event evt { } figurechanged figure changed figureevent figure event e { if ! owner ischanging is changing { owner willchange will change owner firefigurechanged fire figure changed e owner changed } } figureadded figure added figureevent figure event e { } figureattributechanged figure attribute changed figureevent figure event e { } figureareainvalidated figure area invalidated figureevent figure event e { if ! owner ischanging is changing { owner fireareainvalidated fire area invalidated e getinvalidatedarea get invalidated area } } undoableedithappened undoable edit happened undoableeditevent undoable edit event e { owner fireundoableedithappened fire undoable edit happened e getedit get edit } } labeledlineconnectionfigure labeled line connection figure { } drawfigure draw figure graphics2d graphics2 d g { super drawfigure draw figure g for figure child children { if child isvisible is visible { child draw g } } } basictransform basic transform affinetransform affine transform tx { super basictransform basic transform tx for figure f children { f basictransform basic transform tx } invalidatebounds invalidate bounds } basicsetbounds basic set bounds point2d point2 d anchor point2d point2 d { super basicsetbounds basic set bounds anchor invalidate } rectangle2d rectangle2 d getbounds get bounds { super getbounds get bounds } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { if drawbounds draw bounds == { drawbounds draw bounds = super getfiguredrawbounds get figure draw bounds for figure child getchildrenfronttoback get children front to back { if child isvisible is visible { rectangle2d rectangle2 d childbounds child bounds = child getdrawbounds get draw bounds if ! childbounds child bounds isempty is empty { drawbounds draw bounds add childbounds child bounds } } } } rectangle2d rectangle2 d drawbounds draw bounds clone } contains point2d point2 d p { if getdrawbounds get draw bounds contains p { for figure child getchildrenfronttoback get children front to back { if child isvisible is visible child contains p } super contains p } } invalidatebounds invalidate bounds { drawbounds draw bounds = } setattribute set attribute attributekey attribute key key newvalue new value { willchange will change super setattribute set attribute key newvalue new value if isattributeenabled is attribute enabled key { if children != { for figure child children { child setattribute set attribute key newvalue new value } } } changed } figure findfigureinside find figure inside point2d point2 d p { if getdrawbounds get draw bounds contains p { figure found = for figure child getchildrenfronttoback get children front to back { if child isvisible is visible { found = child findfigureinside find figure inside p if found != { found } } } } } updateconnection update connection { super updateconnection update connection layout } util list<figure> list< figure> getchildren get children { collections unmodifiablelist unmodifiable list children } getchildcount get child count { children size } figure getchild get child index { children get index } set index figure child { children set index child } util list<figure> list< figure> getchildrenfronttoback get children front to back { children == ? new linkedlist<figure> linked list< figure> new reversedlist<figure> reversed list< figure> children } add figure figure { basicadd basic add figure if getdrawing get drawing != { figure addnotify add notify getdrawing get drawing } } add index figure figure { basicadd basic add index figure if getdrawing get drawing != { figure addnotify add notify getdrawing get drawing } } basicadd basic add figure figure { basicadd basic add children size figure } basicadd basic add index figure figure { children add index figure figure addfigurelistener add figure listener childhandler child handler figure addundoableeditlistener add undoable edit listener childhandler child handler invalidate } remove figure figure { index = children indexof index of figure if index == 1 { } else { willchange will change basicremovechild basic remove child index if getdrawing get drawing != { figure removenotify remove notify getdrawing get drawing } changed } } figure removechild remove child index { willchange will change figure figure = basicremovechild basic remove child index if getdrawing get drawing != { figure removenotify remove notify getdrawing get drawing } changed figure } basicremove basic remove figure figure { index = children indexof index of figure if index == 1 { } else { basicremovechild basic remove child index } } figure basicremovechild basic remove child index { figure figure = children remove index figure removefigurelistener remove figure listener childhandler child handler figure removeundoableeditlistener remove undoable edit listener childhandler child handler figure } removeallchildren remove all children { willchange will change while children size > 0 { figure figure = basicremovechild basic remove child children size 1 if getdrawing get drawing != { figure removenotify remove notify getdrawing get drawing } } changed } basicremoveallchildren basic remove all children { while children size > 0 { basicremovechild basic remove child children size 1 } } layouter getlayouter get layouter { layouter } setlayouter set layouter layouter newlayouter new layouter { this layouter = newlayouter new layouter } layout { if getlayouter get layouter != { rectangle2d rectangle2 d bounds = getbounds get bounds point2d point2 d p = new point2d point2 d bounds x bounds y rectangle2d rectangle2 d r = getlayouter get layouter layout this p p invalidatebounds invalidate bounds } } invalidate { super invalidate invalidatebounds invalidate bounds } validate { super validate layout } addnotify add notify drawing drawing { for figure child new linkedlist<figure> linked list< figure> children { child addnotify add notify drawing } super addnotify add notify drawing } removenotify remove notify drawing drawing { for figure child new linkedlist<figure> linked list< figure> children { child removenotify remove notify drawing } super removenotify remove notify drawing } labeledlineconnectionfigure labeled line connection figure clone { labeledlineconnectionfigure labeled line connection figure that = labeledlineconnectionfigure labeled line connection figure super clone that childhandler child handler = new childhandler child handler that that children = new arraylist<figure> list< figure> for figure thischild this child this children { figure thatchild that child = figure thischild this child clone that children add thatchild that child thatchild that child addfigurelistener add figure listener that childhandler child handler thatchild that child addundoableeditlistener add undoable edit listener that childhandler child handler } that } remap hashmap<figure hash map< figure figure> oldtonew old to new { super remap oldtonew old to new for figure child children { child remap oldtonew old to new } } } 