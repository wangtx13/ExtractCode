org jhotdraw xml import util * defaultdomfactory default dom factory implements domfactory dom factory { private hashmap<class hash map< string> classtonamemap to name map = new hashmap<class hash map< string> private hashmap<string hash map< object> nametoprototypemap name to prototype map = new hashmap<string hash map< object> private hashmap<class hash map< string> enumclasstonamemap enum to name map = new hashmap<class hash map< string> private hashmap<string hash map< class> nametoenumclassmap name to enum map = new hashmap<string hash map< class> private hashmap<enum hash map< enum string> enumtovaluemap enum to value map = new hashmap<enum hash map< enum string> private hashmap<string hash map< set<enum>> set< enum>> valuetoenummap value to enum map = new hashmap<string hash map< set<enum>> set< enum>> defaultdomfactory default dom factory { } addstorableclass add storable name c { nametoprototypemap name to prototype map put name c classtonamemap to name map put c name } addstorable add storable name domstorable dom storable prototype { nametoprototypemap name to prototype map put name prototype classtonamemap to name map put prototype getclass get name } addenumclass add enum name c { enumclasstonamemap enum to name map put c name nametoenumclassmap name to enum map put name c } addenum add enum value enum e { enumtovaluemap enum to value map put e value set<enum> set< enum> enums if valuetoenummap value to enum map containskey contains key value { enums = valuetoenummap value to enum map get value } else { enums = new hashset<enum> hash set< enum> valuetoenummap value to enum map put value enums } enums add e } create name { o = nametoprototypemap name to prototype map get name if o == { throw new illegalargumentexception illegal argument storable name not known to factory +name } if o instanceof { try { o newinstance new instance } catch e { illegalargumentexception illegal argument = new illegalargumentexception illegal argument storable not instantiable by factory +name initcause init cause e throw } } else { try { o getclass get getmethod get clone o } catch e { illegalargumentexception illegal argument = new illegalargumentexception illegal argument storable prototype not cloneable by factory name +name initcause init cause e throw } } } getname get name domstorable dom storable o { name = classtonamemap to name map get o getclass get if name == { throw new illegalargumentexception illegal argument storable not known to factory storable +o+ factory +this getclass get } name } getenumname get enum name enum e { name = enumclasstonamemap enum to name map get e getclass get if name == { throw new illegalargumentexception illegal argument enum not known to factory +e getclass get } name } getenumvalue get enum value enum e { enumtovaluemap enum to value map containskey contains key e ? enumtovaluemap enum to value map get e e tostring to } enum createenum create enum name value { enumclass enum = nametoenumclassmap name to enum map get name if enumclass enum == { throw new illegalargumentexception illegal argument enum name not known to factory +name } set<enum> set< enum> enums = valuetoenummap value to enum map get value if enums == { enum valueof value of enumclass enum value } for enum e enums { if e getclass get == enumclass enum { e } } throw new illegalargumentexception illegal argument enum value not known to factory +value } } 