org jhotdraw draw action import lang reflect * genericlistener generic listener { create listenerinterface listener listenermethodname listener name target targetmethodname target name { listenermethod listener = getlistenermethod get listener listenerinterface listener listenermethodname listener name targetmethod target = gettargetmethod get target target targetmethodname target name listenermethod listener getparametertypes get parameter types if targetmethod target == { targetmethod target = gettargetmethod get target target targetmethodname target name new 0 } if targetmethod target == { throw new runtimeexception runtime no such +targetmethodname+ +target name+ in +target getclass get } create listenermethod listener target targetmethod target } create listenermethod listener target targetmethod target { invocationhandler invocation handler handler = new defaultinvoker default invoker { proxy args throwable { if listenermethod listener equals { if targetmethod target getparametertypes get parameter types length == 0 { targetmethod target target new 0 } else { targetmethod target target args } } else { super proxy args } } } cls = listenermethod listener getdeclaringclass get declaring classloader loader cl = cls getclassloader get loader proxy newproxyinstance new proxy instance cl new {cls} handler } private defaultinvoker default invoker implements invocationhandler invocation handler { proxy args throwable { if getdeclaringclass get declaring == { methodname name = getname get name if methodname name equals hashcode hash { proxyhashcode proxy hash proxy } else if methodname name equals equals { proxyequals proxy equals proxy args 0 } else if methodname name equals tostring to { proxytostring proxy to proxy } } nullvalueof value of getreturntype get type } integer proxyhashcode proxy hash proxy { new integer identityhashcode identity hash proxy } proxyequals proxy equals proxy other { proxy == other ? true t r u e false f a l s e } proxytostring proxy to proxy { proxy getclass get getname get name + '@' + integer tohexstring to hex proxy hashcode hash } private character char_0 = new character char 0 private byte byte_0 = new byte byte 0 private nullvalueof value of rt { if !rt isprimitive is primitive { } else if rt == { } else if rt == { false f a l s e } else if rt == char { char_0 } else { byte_0 } } } private getlistenermethod get listener listenerinterface listener listenermethodname listener name { m = listenerinterface listener getmethods get result = for i = 0 i < m length i++ { if listenermethodname listener name equals m i getname get name { if result != { throw new runtimeexception runtime ambiguous +m i + vs +result } result = m i } } if result == { throw new runtimeexception runtime no such +listenermethodname+ +listener name+ in +listenerinterface +listener } result } private gettargetmethod get target target targetmethodname target name parametertypes parameter types { m = target getclass get getmethods get result = eachmethod each for i = 0 i < m length i++ { if !targetmethodname !target name equals m i getname get name continue eachmethod each p = m i getparametertypes get parameter types if p length != parametertypes parameter types length continue eachmethod each for j = 0 j < p length j++ { if !p j isassignablefrom is assignable from parametertypes parameter types j continue eachmethod each } if result != { throw new runtimeexception runtime ambiguous +m i + vs +result } result = m i } if result == { } publicresult result = raisetopublicclass raise to result if publicresult result != result = publicresult result result } private raisetopublicclass raise to m { c = m getdeclaringclass get declaring if modifier ispublic is m getmodifiers get modifiers modifier ispublic is c getmodifiers get modifiers m sc = c getsuperclass get superclass if sc != { sm = raisetopublicclass raise to m sc if sm != sm } ints = c getinterfaces get for i = 0 i < ints length i++ { im = raisetopublicclass raise to m ints i if im != im } } private raisetopublicclass raise to m c { try { sm = c getmethod get m getname get name m getparametertypes get parameter types raisetopublicclass raise to sm } catch nosuchmethodexception no such ee { } } private genericlistener generic listener {} } 