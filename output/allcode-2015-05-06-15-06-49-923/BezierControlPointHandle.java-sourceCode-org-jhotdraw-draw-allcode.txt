org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * beziercontrolpointhandle bezier control point handle abstracthandle handle { index controlpointindex control point index private compositeedit composite edit edit beziercontrolpointhandle bezier control point handle bezierfigure bezier figure owner index coord { super owner this index = index this controlpointindex control point index = coord } bezierfigure bezier figure getbezierfigure get bezier figure { bezierfigure bezier figure getowner get owner } point getlocation get location { getbezierfigure get bezier figure getpointcount get point count > index ? view drawingtoview drawing to view getbezierfigure get bezier figure getpoint get point index controlpointindex control point index new point 10 10 } draw graphics2d graphics2 d g { bezierfigure bezier figure f = getbezierfigure get bezier figure if f getpointcount get point count > index { bezierpath bezier path node v = f getnode get node index if v keepcolinear keep colinear v mask == bezierpath bezier path C1C2_MASK index > 0 index < f getnodecount get node count || f isclosed is closed { drawcircle draw circle g color white color blue } else { drawcircle draw circle g color blue color white } g setcolor set color color blue g draw new line2d line2 d view drawingtoview drawing to view new point2d point2 d v x 0 v y 0 view drawingtoview drawing to view new point2d point2 d v x controlpointindex control point index v y controlpointindex control point index } } rectangle basicgetbounds basic get bounds { rectangle r = new rectangle getlocation get location r grow gethandlesize get handlesize / 2 gethandlesize get handlesize / 2 r } trackstart track start point anchor modifiersex modifiers ex { view getdrawing get drawing fireundoableedithappened fire undoable edit happened edit = new compositeedit composite edit punkt verschieben point2d point2 d location = view getconstrainer get constrainer constrainpoint constrain point view viewtodrawing view to drawing getlocation get location point2d point2 d p = view getconstrainer get constrainer constrainpoint constrain point view viewtodrawing view to drawing anchor } trackstep track step point anchor point modifiersex modifiers ex { bezierfigure bezier figure figure = getbezierfigure get bezier figure point2d point2 d p = view getconstrainer get constrainer constrainpoint constrain point view viewtodrawing view to drawing bezierpath bezier path node v = figure getnode get node index fireareainvalidated fire area invalidated v figure willchange will change if ! v keepcolinear keep colinear { figure basicsetpoint basic set point index controlpointindex control point index p } else { a = math pi p i + math atan2 p y v y 0 p x v x 0 c2 = controlpointindex control point index == 1 ? 2 1 r = math sqrt v x c2 v x 0 * v x c2 v x 0 + v y c2 v y 0 * v y c2 v y 0 sina = math sin a cosa = math cos a point2d point2 d p2 = new point2d point2 d r * cosa + v x 0 r * sina + v y 0 figure basicsetpoint basic set point index controlpointindex control point index p figure basicsetpoint basic set point index c2 p2 } figure changed fireareainvalidated fire area invalidated figure getnode get node index } private fireareainvalidated fire area invalidated bezierpath bezier path node v { rectangle2d rectangle2 d dr = new rectangle2d rectangle2 d v x 0 v y 0 0 0 for i=1 i < 3 i++ { dr add v x i v y i } rectangle vr = view drawingtoview drawing to view dr vr grow gethandlesize get handlesize gethandlesize get handlesize fireareainvalidated fire area invalidated vr } trackend track end point anchor point modifiersex modifiers ex { bezierfigure bezier figure figure = getbezierfigure get bezier figure if modifiersex modifiers ex inputevent input event META_DOWN_MASK | inputevent input event CTRL_DOWN_MASK != 0 { figure willchange will change bezierpath bezier path node v = figure getnode get node index v keepcolinear keep colinear = ! v keepcolinear keep colinear if v keepcolinear keep colinear { point2d point2 d p = figure getpoint get point index controlpointindex control point index a = math pi p i + math atan2 p y v y 0 p x v x 0 c2 = controlpointindex control point index == 1 ? 2 1 r = math sqrt v x c2 v x 0 * v x c2 v x 0 + v y c2 v y 0 * v y c2 v y 0 sina = math sin a cosa = math cos a point2d point2 d p2 = new point2d point2 d r * cosa + v x 0 r * sina + v y 0 v x c2 = p2 x v y c2 = p2 y } figure setnode set node index v figure changed } view getdrawing get drawing fireundoableedithappened fire undoable edit happened edit } iscombinablewith is combinable with handle h { if super iscombinablewith is combinable with h { beziercontrolpointhandle bezier control point handle that = beziercontrolpointhandle bezier control point handle h that index == this index that controlpointindex control point index == this controlpointindex control point index that getbezierfigure get bezier figure getnodecount get node count == this getbezierfigure get bezier figure getnodecount get node count } } } 