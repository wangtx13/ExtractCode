org jhotdraw app import awt * import awt event * import util prefs * import javax swing * import util * osxpalettehandler o s x palette handler { private hashset<window> hash set< window> palettes = new hashset<window> hash set< window> private hashmap<window hash map< window project> windows = new hashmap<window hash map< window project> private osxpalettehandler o s x palette handler instance private javax swing timer timer private defaultosxapplication default o s x application app private windowfocuslistener window focus listener focushandler focus handler = new windowfocuslistener window focus listener { windowgainedfocus window gained focus windowevent window event e { timer stop if windows containskey contains key e getwindow get window { app setcurrentproject set current project project windows get e getwindow get window showpalettes show palettes } } windowlostfocus window lost focus windowevent window event e { timer restart } } osxpalettehandler o s x palette handler defaultosxapplication default o s x application app { this app = app timer = new javax swing timer 60 new actionlistener action listener { actionperformed action performed actionevent action event evt { maybehidepalettes maybe hide palettes } } timer setrepeats set repeats } add window window project project { window addwindowfocuslistener add window focus listener focushandler focus handler windows put window project } remove window window project project { windows remove window window removewindowfocuslistener remove window focus listener focushandler focus handler } addpalette add palette window palette { palette addwindowfocuslistener add window focus listener focushandler focus handler palettes add palette } removepalette remove palette window palette { palettes remove palette palette removewindowfocuslistener remove window focus listener focushandler focus handler } set<window> set< window> getpalettes get palettes { collections unmodifiableset unmodifiable set palettes } private showpalettes show palettes { for window palette palettes { if ! palette isvisible is visible { palette setvisible set visible } } } private isfocused is focused window w { if w isfocused is focused window ownedwindows owned windows = w getownedwindows get owned windows for i=0 i < ownedwindows owned windows length i++ { if isfocused is focused ownedwindows owned windows i { } } } private maybehidepalettes maybe hide palettes { hasfocus has focus = for window window windows keyset key set { if isfocused is focused window { hasfocus has focus = break } } if ! hasfocus has focus windows size > 0 { for window palette palettes { if isfocused is focused palette { hasfocus has focus = break } } } if ! hasfocus has focus { for window palette palettes { palette setvisible set visible } } } } 