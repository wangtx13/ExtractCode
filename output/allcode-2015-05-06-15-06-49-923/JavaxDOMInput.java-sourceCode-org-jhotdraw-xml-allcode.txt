org jhotdraw xml import util * import javax xml parsers * import javax xml transform * import javax xml transform dom * import javax xml transform stream * import org w3c dom * import io * import awt * javaxdominput javax dom input implements dominput dom input { private hashmap<string hash map< object> idobjects = new hashmap<string hash map< object> private document document private node current private domfactory dom factory factory javaxdominput javax dom input domfactory dom factory factory inputstream input stream in ioexception i o { this factory = factory try { transformer t = transformerfactory transformer factory newinstance new instance newtransformer new transformer domresult dom result result = new domresult dom result t transform new streamsource stream source in result document = document result getnode get node current = document } catch transformerexception transformer e { ioexception i o = new ioexception i o e getmessage get message initcause init cause e throw } } javaxdominput javax dom input domfactory dom factory factory reader in ioexception i o { this factory = factory try { transformer t = transformerfactory transformer factory newinstance new instance newtransformer new transformer domresult dom result result = new domresult dom result t transform new streamsource stream source in result document = document result getnode get node current = document } catch transformerexception transformer e { ioexception i o = new ioexception i o e getmessage get message initcause init cause e throw } } gettagname get tag name { element current gettagname get tag name } getattribute get attribute name defaultvalue default value { value = element current getattribute get attribute name value length == 0 ? defaultvalue default value value } gettext get text { gettext get text } gettext get text defaultvalue default value { if current getchildnodes get child nodes getlength get length == 0 defaultvalue default value stringbuilder builder buf = new stringbuilder builder gettext get text current buf buf tostring to } private gettext get text node n stringbuilder builder buf { if n getnodevalue get node value != buf append n getnodevalue get node value nodelist node list children = n getchildnodes get child nodes for i=0 i < children getlength get length i++ { gettext get text children item i buf } } util list<string> list< string> getinheritedattribute get inherited attribute name { linkedlist<string> linked list< string> values = new linkedlist<string> linked list< string> node node = current while node != { value = element node getattribute get attribute name values addfirst add first value node = node getparentnode get parent node } values } getattribute get attribute name defaultvalue default value { value = element current getattribute get attribute name value length == 0 ? defaultvalue default value long decode value intvalue value } getattribute get attribute name defaultvalue default value { value = element current getattribute get attribute name value length == 0 ? defaultvalue default value parsedouble parse value } getattribute get attribute name defaultvalue default value { value = element current getattribute get attribute name value length == 0 ? defaultvalue default value valueof value of value booleanvalue value } getelementcount get element count { count = 0 nodelist node list list = current getchildnodes get child nodes for i=0 i < list getlength get length i++ { node node = list item i if node instanceof element { count++ } } count } getelementcount get element count tagname tag name { count = 0 nodelist node list list = current getchildnodes get child nodes for i=0 i < list getlength get length i++ { node node = list item i if node instanceof element element node gettagname get tag name equals tagname tag name { count++ } } count } openelement open element index { count = 0 nodelist node list list = current getchildnodes get child nodes len = list getlength get length for i=0 i < len i++ { node node = list item i if node instanceof element { if count++ == index { current = node } } } } openelement open element tagname tag name { count = 0 nodelist node list list = current getchildnodes get child nodes len = list getlength get length for i=0 i < len i++ { node node = list item i if node instanceof element element node gettagname get tag name equals tagname tag name { current = node } } throw new illegalargumentexception illegal argument element not found +tagname +tag name } openelement open element tagname tag name index { count = 0 nodelist node list list = current getchildnodes get child nodes len = list getlength get length for i=0 i < len i++ { node node = list item i if node instanceof element element node gettagname get tag name equals tagname tag name { if count++ == index { current = node } } } throw new illegalargumentexception illegal argument no such child +tagname+ +tag name+ +index+ } closeelement close element { current = current getparentnode get parent node } readobject read ioexception i o { readobject read 0 } readobject read index ioexception i o { openelement open element index o tagname tag name = gettagname get tag name if tagname tag name equals { o = } else if tagname tag name equals { o = gettext get text } else if tagname tag name equals { o = integer decode gettext get text } else if tagname tag name equals long { o = long decode gettext get text } else if tagname tag name equals float { o = new float float parsefloat parse float gettext get text } else if tagname tag name equals { o = new parsedouble parse gettext get text } else if tagname tag name equals { o = valueof value of gettext get text } else if tagname tag name equals color { o = new color getattribute get attribute rgba 0xff } else if tagname tag name equals intarray { a = new getelementcount get element count for i=0 i < a length i++ { a i = integer readobject read i intvalue value } o = a } else if tagname tag name equals floatarray float { float a = new float getelementcount get element count for i=0 i < a length i++ { a i = float readobject read i floatvalue float value } o = a } else if tagname tag name equals doublearray { a = new getelementcount get element count for i=0 i < a length i++ { a i = readobject read i doublevalue value } o = a } else if tagname tag name equals font { o = new font getattribute get attribute name dialog getattribute get attribute style 0 getattribute get attribute size 0 } else if tagname tag name equals enum { o = factory createenum create enum getattribute get attribute type gettext get text } else { ref = getattribute get attribute ref = getattribute get attribute ref if == { o = factory create gettagname get tag name } else if idobjects containskey contains key { o = idobjects get } else { o = factory create gettagname get tag name idobjects put o } if ref == { if o instanceof domstorable dom storable { domstorable dom storable o read this } } } closeelement close element o } } 