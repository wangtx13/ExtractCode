org jhotdraw draw import awt * import awt geom * import io * import util * import org jhotdraw draw attributekeys attribute keys * import org jhotdraw geom geom import org omg corba c o r b a marshal m a r s h a l diamondfigure diamond figure attributedfigure attributed figure { attributekey<boolean> attribute key< boolean> IS_QUADRATIC = new attributekey<boolean> attribute key< boolean> isquadratic is quadratic private rectangle2d rectangle2 d rectangle diamondfigure diamond figure { this 0 0 0 0 } diamondfigure diamond figure x y width height { rectangle = new rectangle2d rectangle2 d x y width height } drawfill draw fill graphics2d graphics2 d g { rectangle2d rectangle2 d r = rectangle2d rectangle2 d rectangle clone if isquadratic is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attributekeys attribute keys getperpendicularfillgrowth get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d linelength line length = math sqrt w * w + h * h scale = grow / linelength line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } generalpath general path diamond = new generalpath general path diamond moveto move to float r x + r width / 2 float r y diamond lineto line to float r x + r width float r y + r height / 2 diamond lineto line to float r x + r width / 2 float r y + r height diamond lineto line to float r x float r y + r height / 2 diamond closepath close path g fill diamond } drawstroke draw stroke graphics2d graphics2 d g { rectangle2d rectangle2 d r = rectangle2d rectangle2 d rectangle clone if isquadratic is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attributekeys attribute keys getperpendiculardrawgrowth get perpendicular draw growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d linelength line length = math sqrt w * w + h * h scale = grow / linelength line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } generalpath general path diamond = new generalpath general path diamond moveto move to float r x + r width / 2 float r y diamond lineto line to float r x + r width float r y + r height / 2 diamond lineto line to float r x + r width / 2 float r y + r height diamond lineto line to float r x float r y + r height / 2 diamond closepath close path g draw diamond } rectangle2d rectangle2 d getbounds get bounds { rectangle2d rectangle2 d bounds = rectangle2d rectangle2 d rectangle clone bounds } rectangle2d rectangle2 d getfiguredrawbounds get figure draw bounds { rectangle2d rectangle2 d r = rectangle2d rectangle2 d rectangle clone if isquadratic is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attributekeys attribute keys getperpendicularhitgrowth get perpendicular hit growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d linelength line length = math sqrt w * w + h * h scale = grow / linelength line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } r } contains point2d point2 d p { rectangle2d rectangle2 d r = rectangle2d rectangle2 d rectangle clone if isquadratic is quadratic { side = math max r width r height r x = side r width / 2 r y = side r height / 2 r width = r height = side } grow = attributekeys attribute keys getperpendicularfillgrowth get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { w = r width / 2d h = r height / 2d linelength line length = math sqrt w * w + h * h scale = grow / linelength line length yb = scale * w xa = scale * h growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow r growx growy } generalpath general path diamond = new generalpath general path diamond moveto move to float r x + r width / 2 float r y diamond lineto line to float r x + r width float r y + r height / 2 diamond lineto line to float r x + r width / 2 float r y + r height diamond lineto line to float r x float r y + r height / 2 diamond closepath close path diamond contains p } basicsetbounds basic set bounds point2d point2 d anchor point2d point2 d { rectangle x = math min anchor x x rectangle y = math min anchor y y rectangle width = math max 0 1 math abs x anchor x rectangle height = math max 0 1 math abs y anchor y } basictransform basic transform affinetransform affine transform tx { point2d point2 d anchor = getstartpoint get start point point2d point2 d = getendpoint get end point basicsetbounds basic set bounds point2d point2 d tx transform anchor anchor point2d point2 d tx transform } restoreto restore to geometry { rectangle2d rectangle2 d r = rectangle2d rectangle2 d geometry rectangle x = r x rectangle y = r y rectangle width = r width rectangle height = r height } getrestoredata get restore data { rectangle clone } isquadratic is quadratic { b = getattribute get attribute IS_QUADRATIC b == ? b booleanvalue value } setquadratic set quadratic newvalue new value { setattribute set attribute IS_QUADRATIC newvalue new value } connector findconnector find connector point2d point2 d p connectionfigure connection figure prototype { new chopdiamondconnector chop diamond connector this } connector findcompatibleconnector find compatible connector connector c isstart is start { new chopdiamondconnector chop diamond connector this } diamondfigure diamond figure clone { diamondfigure diamond figure that = diamondfigure diamond figure super clone that rectangle = rectangle2d rectangle2 d this rectangle clone that } } 