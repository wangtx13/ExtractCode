org jhotdraw draw import org jhotdraw util * import awt * import awt event * import awt geom * import util * import javax swing undo * import io * import org jhotdraw geom * import org jhotdraw xml dominput dom input import org jhotdraw xml domoutput dom output lineconnectionfigure line connection figure linefigure line figure implements connectionfigure connection figure { private connector startconnector start connector private connector endconnector end connector private liner liner private connectionhandler connection handler connectionhandler connection handler = new connectionhandler connection handler this private connectionhandler connection handler implements figurelistener figure listener { private lineconnectionfigure line connection figure owner private connectionhandler connection handler lineconnectionfigure line connection figure owner { this owner = owner } figurerequestremove figure request remove figureevent figure event e { } figureremoved figure removed figureevent figure event evt { owner firefigurerequestremove fire figure request remove } figurechanged figure changed figureevent figure event e { if e getsource get source == owner getstartfigure get start figure || e getsource get source == owner getendfigure get end figure { owner willchange will change owner updateconnection update connection owner changed } } figureadded figure added figureevent figure event e { } figureattributechanged figure attribute changed figureevent figure event e { } figureareainvalidated figure area invalidated figureevent figure event e { } } lineconnectionfigure line connection figure { } basictransform basic transform affinetransform affine transform tx { super basictransform basic transform tx updateconnection update connection } collection<handle> collection< handle> createhandles create handles detaillevel detail level { arraylist<handle> list< handle> handles = new arraylist<handle> list< handle> getnodecount get node count switch detaillevel detail level { case 0 if getliner get liner == { for i = 1 n = getnodecount get node count 1 i < n i++ { handles add new beziernodehandle bezier node handle this i } } handles add new changeconnectionstarthandle change connection start handle this handles add new changeconnectionendhandle change connection end handle this break } handles } canconnect can connect { } updateconnection update connection { willchange will change if getstartconnector get start connector != { point2d point2 d start = getstartconnector get start connector findstart find start this if start != { basicsetstartpoint basic set start point start } } if getendconnector get end connector != { point2d point2 d end = getendconnector get end connector findend find end this if end != { basicsetendpoint basic set end point end } } changed } validate { super validate lineout } canconnect can connect figure start figure end { start canconnect can connect end canconnect can connect } connectssame connects same connectionfigure connection figure other { other getstartconnector get start connector == getstartconnector get start connector other getendconnector get end connector == getendconnector get end connector } connector getendconnector get end connector { endconnector end connector } figure getendfigure get end figure { endconnector end connector == ? endconnector end connector getowner get owner } connector getstartconnector get start connector { startconnector start connector } figure getstartfigure get start figure { startconnector start connector == ? startconnector start connector getowner get owner } setendconnector set end connector connector newend new end { connector oldend old end = endconnector end connector if newend new end != oldend old end { willchange will change basicsetendconnector basic set end connector newend new end fireundoableedithappened fire undoable edit happened new abstractundoableedit undoable edit { getpresentationname get presentation name { end verbindung setzen } undo cannotundoexception cannot undo { super undo willchange will change basicsetendconnector basic set end connector oldend old end changed } redo cannotundoexception cannot undo { super redo willchange will change basicsetendconnector basic set end connector newend new end changed } } changed } } basicsetendconnector basic set end connector connector newend new end { if newend new end != endconnector end connector { if endconnector end connector != { getendfigure get end figure removefigurelistener remove figure listener connectionhandler connection handler if getstartfigure get start figure != { handledisconnect handle disconnect getstartfigure get start figure getendfigure get end figure } } endconnector end connector = newend new end if endconnector end connector != { getendfigure get end figure addfigurelistener add figure listener connectionhandler connection handler if getstartfigure get start figure != getendfigure get end figure != { handleconnect handle connect getstartfigure get start figure getendfigure get end figure updateconnection update connection } } } } setstartconnector set start connector connector newstart new start { connector oldstart old start = startconnector start connector if newstart new start != oldstart old start { willchange will change basicsetstartconnector basic set start connector newstart new start fireundoableedithappened fire undoable edit happened new abstractundoableedit undoable edit { getpresentationname get presentation name { start verbindung setzen } undo cannotundoexception cannot undo { super undo willchange will change basicsetstartconnector basic set start connector oldstart old start changed } redo cannotundoexception cannot undo { super redo willchange will change basicsetstartconnector basic set start connector newstart new start changed } } changed } } basicsetstartconnector basic set start connector connector newstart new start { if newstart new start != startconnector start connector { if startconnector start connector != { getstartfigure get start figure removefigurelistener remove figure listener connectionhandler connection handler if getendfigure get end figure != { handledisconnect handle disconnect getstartfigure get start figure getendfigure get end figure } } startconnector start connector = newstart new start if startconnector start connector != { getstartfigure get start figure addfigurelistener add figure listener connectionhandler connection handler if getstartfigure get start figure != getendfigure get end figure != { handleconnect handle connect getstartfigure get start figure getendfigure get end figure updateconnection update connection } } } } addnotify add notify drawing drawing { super addnotify add notify drawing } removenotify remove notify drawing drawing { super removenotify remove notify drawing } handledisconnect handle disconnect figure start figure end { } handleconnect handle connect figure start figure end { } lineconnectionfigure line connection figure clone { lineconnectionfigure line connection figure that = lineconnectionfigure line connection figure super clone that connectionhandler connection handler = new connectionhandler connection handler that if this liner != { that liner = liner this liner clone } if this startconnector start connector != { that startconnector start connector = connector this startconnector start connector clone that getstartfigure get start figure addfigurelistener add figure listener that connectionhandler connection handler } if this endconnector end connector != { that endconnector end connector = connector this endconnector end connector clone that getendfigure get end figure addfigurelistener add figure listener that connectionhandler connection handler } if that startconnector start connector != that endconnector end connector != { that handleconnect handle connect that getstartfigure get start figure that getendfigure get end figure that updateconnection update connection } that } remap map oldtonew old to new { willchange will change super remap oldtonew old to new figure newstartfigure new start figure = figure newendfigure new end figure = if getstartfigure get start figure != { newstartfigure new start figure = figure oldtonew old to new get getstartfigure get start figure if newstartfigure new start figure == newstartfigure new start figure = getstartfigure get start figure } if getendfigure get end figure != { newendfigure new end figure = figure oldtonew old to new get getendfigure get end figure if newendfigure new end figure == newendfigure new end figure = getendfigure get end figure } if newstartfigure new start figure != { setstartconnector set start connector newstartfigure new start figure findcompatibleconnector find compatible connector getstartconnector get start connector } if newendfigure new end figure != { setendconnector set end connector newendfigure new end figure findcompatibleconnector find compatible connector getendconnector get end connector } updateconnection update connection changed } canconnect can connect figure start { start canconnect can connect } handlemouseclick handle mouse click point2d point2 d p mouseevent mouse event evt drawingview drawing view view { if getliner get liner == evt getclickcount get click count == 2 { willchange will change index = basicsplitsegment basic split segment p float 5f / view getscalefactor get scale factor if index != 1 { bezierpath bezier path node newnode new node = getnode get node index fireundoableedithappened fire undoable edit happened new abstractundoableedit undoable edit { redo cannotredoexception cannot redo { super redo willchange will change basicaddnode basic add node index newnode new node changed } undo cannotundoexception cannot undo { super undo willchange will change basicremovenode basic remove node index changed } } changed } } } readpoints read points dominput dom input in ioexception i o { super readpoints read points in in openelement open element startconnector start connector setstartconnector set start connector connector in readobject read in closeelement close element in openelement open element endconnector end connector setendconnector set end connector connector in readobject read in closeelement close element } read dominput dom input in ioexception i o { readpoints read points in readattributes read attributes in readliner read liner in } readliner read liner dominput dom input in ioexception i o { if in getelementcount get element count liner > 0 { in openelement open element liner liner = liner in readobject read in closeelement close element } } write domoutput dom output out ioexception i o { writepoints write points out writeattributes write attributes out writeliner write liner out } writeliner write liner domoutput dom output out ioexception i o { if liner != { out openelement open element liner out writeobject write liner out closeelement close element } } writepoints write points domoutput dom output out ioexception i o { super writepoints write points out out openelement open element startconnector start connector out writeobject write getstartconnector get start connector out closeelement close element out openelement open element endconnector end connector out writeobject write getendconnector get end connector out closeelement close element } setliner set liner liner newvalue new value { willchange will change this liner = newvalue new value changed } basicsetnode basic set node index bezierpath bezier path node p { if index != 0 index != getpointcount get point count 1 { if getstartconnector get start connector != { point2d point2 d start = getstartconnector get start connector findstart find start this if start != { basicsetstartpoint basic set start point start } } if getendconnector get end connector != { point2d point2 d end = getendconnector get end connector findend find end this if end != { basicsetendpoint basic set end point end } } } super basicsetnode basic set node index p } lineout { if liner != { liner lineout this } } bezierpath bezier path getbezierpath get bezier path { path } liner getliner get liner { liner } setstartpoint set start point point2d point2 d p { setpoint set point 0 p } setpoint set point index point2d point2 d p { setpoint set point index 0 p } setendpoint set end point point2d point2 d p { setpoint set point getpointcount get point count 1 p } reverseconnection reverse connection { if startconnector start connector != endconnector end connector != { handledisconnect handle disconnect startconnector start connector getowner get owner endconnector end connector getowner get owner connector tmpc tmp c = startconnector start connector startconnector start connector = endconnector end connector endconnector end connector = tmpc tmp c point2d point2 d tmpp tmp p = getstartpoint get start point setstartpoint set start point getendpoint get end point setendpoint set end point tmpp tmp p handleconnect handle connect startconnector start connector getowner get owner endconnector end connector getowner get owner updateconnection update connection } } } 