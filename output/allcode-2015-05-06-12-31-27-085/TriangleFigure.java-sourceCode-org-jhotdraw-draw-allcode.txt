org jhotdraw draw import awt * import awt geom * import * import util * import javax swing * import org jhotdraw draw AttributeKeys attribute keys * import org jhotdraw geom * TriangleFigure triangle figure AttributedFigure attributed figure { private Rectangle2D rectangle2 rectangle TriangleFigure triangle figure { this 0 0 0 0 } TriangleFigure triangle figure orientation direction { this 0 0 0 0 direction } TriangleFigure triangle figure width height { this width height orientation NORTH } TriangleFigure triangle figure width height orientation direction { rectangle = new Rectangle2D rectangle2 width height ORIENTATION set this direction } connector findConnector find connector Point2D point2 ConnectionFigure connection figure prototype { new ChopTriangleConnector chop triangle connector this } connector findCompatibleConnector find compatible connector connector isStartConnector start connector { new ChopTriangleConnector chop triangle connector this } Rectangle2D rectangle2 getBounds get bounds { Rectangle2D rectangle2 bounds = Rectangle2D rectangle2 rectangle clone bounds } drawFill draw fill Graphics2D graphics2 { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone shape triangle = getBezierPath get bezier path grow = AttributeKeys attribute keys getPerpendicularFillGrowth get perpendicular fill growth this if grow != 0d { GrowStroke grow stroke gs = new GrowStroke grow stroke float grow float AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs createStrokedShape create stroked shape triangle } fill triangle } drawStroke draw stroke Graphics2D graphics2 { shape triangle = getBezierPath get bezier path grow = AttributeKeys attribute keys getPerpendicularDrawGrowth get perpendicular draw growth this if grow != 0d { GrowStroke grow stroke gs = new GrowStroke grow stroke float grow float AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs createStrokedShape create stroked shape triangle } draw triangle } Collection<Handle> collection< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles = LinkedList<Handle> linked list< handle> super createHandles create handles detailLevel detail level if detailLevel detail level == 0 { handles add new TriangleRotationHandler triangle rotation handler this } handles } BezierPath bezier path getBezierPath get bezier path { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone BezierPath bezier path triangle = new BezierPath bezier path switch ORIENTATION get this { case NORTH default triangle moveTo move to float + width / 2 float triangle lineTo line to float + width float + height triangle lineTo line to float float + height break case NORTH_EAST triangle moveTo move to float float triangle lineTo line to float + width float triangle lineTo line to float + width float + height break case EAST triangle moveTo move to float float triangle lineTo line to float + width float + height / 2d triangle lineTo line to float float + height break case SOUTH_EAST triangle moveTo move to float + width float triangle lineTo line to float + width float + height triangle lineTo line to float float + height break case SOUTH triangle moveTo move to float + width / 2 float + height triangle lineTo line to float float triangle lineTo line to float + width float break case SOUTH_WEST triangle moveTo move to float + width float + height triangle lineTo line to float float + height triangle lineTo line to float float break case WEST triangle moveTo move to float float + height / 2 triangle lineTo line to float + width float triangle lineTo line to float + width float + height break case NORTH_WEST triangle moveTo move to float float + height triangle lineTo line to float float triangle lineTo line to float + width float break } triangle setClosed set closed triangle } contains Point2D point2 { shape triangle = getBezierPath get bezier path grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this if grow != 0d { GrowStroke grow stroke gs = new GrowStroke grow stroke float grow float AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs createStrokedShape create stroked shape triangle } triangle contains } basicSetBounds basic set bounds Point2D point2 anchor Point2D point2 { rectangle = math min anchor rectangle = math min anchor rectangle width = math max 0 1 math - anchor rectangle height = math max 0 1 math - anchor } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds { totalStrokeWidth total stroke width = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this width = 0d if STROKE_COLOR get this != { switch STROKE_PLACEMENT get this { case INSIDE sid width = 0d break case OUTSIDE sid if STROKE_JOIN get this == BasicStroke basic stroke JOIN_MITER { width = totalStrokeWidth total stroke width * STROKE_MITER_LIMIT_FACTOR get this } else { width = totalStrokeWidth total stroke width } break case CENTER if STROKE_JOIN get this == BasicStroke basic stroke JOIN_MITER { width = totalStrokeWidth total stroke width / 2d * STROKE_MITER_LIMIT_FACTOR get this } else { width = totalStrokeWidth total stroke width / 2d } break } } width++ Rectangle2D rectangle2 = getBounds get bounds geom grow width width } Point2D point2 chop Point2D point2 { shape triangle = getBezierPath get bezier path grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this if grow != 0d { GrowStroke grow stroke gs = new GrowStroke grow stroke float grow float AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs createStrokedShape create stroked shape triangle } geom chop triangle } basicTransform basic transform AffineTransform affine transform tx { Point2D point2 anchor = getStartPoint get start point Point2D point2 = getEndPoint get point basicSetBounds basic set bounds Point2D point2 tx transform anchor anchor Point2D point2 tx transform } TriangleFigure triangle figure clone { TriangleFigure triangle figure that = TriangleFigure triangle figure super clone that rectangle = Rectangle2D rectangle2 this rectangle clone that } restoreTo restore to geometry { Rectangle2D rectangle2 = Rectangle2D rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } getRestoreData get restore data { rectangle clone } } 