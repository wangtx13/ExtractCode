org jhotdraw geom import awt geom * import util * import awt * QuadTree2DDouble<T> quad tree2 double< t> { private HashMap<T hash map< Rectangle2D rectangle2 double> outside = new HashMap<T hash map< Rectangle2D rectangle2 double> private QuadNode quad node root private maxCapacity max capacity = 32 private minSize min size = 32 private maxOutside max outside = 32 QuadTree2DDouble quad tree2 { root = new QuadNode quad node new Rectangle2D rectangle2 0 0 800 600 } QuadTree2DDouble quad tree2 Rectangle2D rectangle2 bounds { root = new QuadNode quad node bounds } add Rectangle2D rectangle2 bounds { if root bounds contains bounds { root add Rectangle2D rectangle2 bounds clone } else { outside put Rectangle2D rectangle2 bounds clone if outside size > maxOutside max outside { reorganize } } } reorganize { root join outside putAll put all root root clear Iterator<Map iterator< map Entry<T entry< Rectangle2D rectangle2 double>> = outside entrySet entry set iterator map Entry<T entry< Rectangle2D rectangle2 double> entry = next Rectangle2D rectangle2 treeBounds tree bounds = Rectangle2D rectangle2 entry getValue get value clone while hasNext has next { entry = next Rectangle2D rectangle2 bounds = entry getValue get value treeBounds tree bounds add bounds } root bounds = treeBounds tree bounds = outside entrySet entry set iterator while hasNext has next { entry = next root add entry getKey get key entry getValue get value } outside clear } remove { outside remove root remove } Collection<T> collection< t> findContains find contains Point2D point2 { HashSet<T> hash set< t> result = new HashSet<T> hash set< t> root findContains find contains result for map Entry<T entry< Rectangle2D rectangle2 double> entry outside entrySet entry set { if entry getValue get value contains { result add entry getKey get key } } result } Collection<T> collection< t> findIntersects find intersects Rectangle2D rectangle2 { findIntersects find intersects new Rectangle2D rectangle2 getX get getY get getWidth get width getHeight get height } Collection<T> collection< t> findIntersects find intersects Rectangle2D rectangle2 { HashSet<T> hash set< t> result = new HashSet<T> hash set< t> root findIntersects find intersects result for map Entry<T entry< Rectangle2D rectangle2 double> entry outside entrySet entry set { if entry getValue get value intersects { result add entry getKey get key } } result } Collection<T> collection< t> findInside find inside Rectangle2D rectangle2 { HashSet<T> hash set< t> result = new HashSet<T> hash set< t> root findInside find inside result for map Entry<T entry< Rectangle2D rectangle2 double> entry outside entrySet entry set { if contains entry getValue get value { result add entry getKey get key } } result } private QuadNode quad node { private Rectangle2D rectangle2 bounds private HashMap<T hash map< Rectangle2D rectangle2 double> private QuadNode quad node northEast north east private QuadNode quad node northWest north west private QuadNode quad node southEast south east private QuadNode quad node southWest south west QuadNode quad node Rectangle2D rectangle2 bounds { this bounds = bounds this = new HashMap<T hash map< Rectangle2D rectangle2 double> } isLeaf leaf { northEast north east == } remove { if remove == ! isLeaf leaf { northEast north east remove northWest north west remove southEast south east remove southWest south west remove } } add Rectangle2D rectangle2 oBounds bounds { if isLeaf leaf size >= maxCapacity max capacity bounds width > minSize min size bounds height > minSize min size { split } if isLeaf leaf || oBounds bounds contains bounds { put oBounds bounds } else { if northEast north east bounds intersects oBounds bounds { northEast north east add oBounds bounds } if northWest north west bounds intersects oBounds bounds { northWest north west add oBounds bounds } if southEast south east bounds intersects oBounds bounds { southEast south east add oBounds bounds } if southWest south west bounds intersects oBounds bounds { southWest south west add oBounds bounds } } } split { if isLeaf leaf { hw = bounds width / 2 hh = bounds height / 2 northWest north west = new QuadNode quad node new Rectangle2D rectangle2 bounds bounds hw hh northEast north east = new QuadNode quad node new Rectangle2D rectangle2 bounds + hw bounds bounds width - hw hh southWest south west = new QuadNode quad node new Rectangle2D rectangle2 bounds bounds + hh hw bounds height - hh southEast south east = new QuadNode quad node new Rectangle2D rectangle2 bounds + hw bounds + hh bounds width - hw bounds height - hh HashMap<T hash map< Rectangle2D rectangle2 double> temp = = new HashMap<T hash map< Rectangle2D rectangle2 double> for map Entry<T entry< Rectangle2D rectangle2 double> entry temp entrySet entry set { add entry getKey get key entry getValue get value } } } join { if ! isLeaf leaf { northWest north west join northEast north east join southWest south west join southEast south east join putAll put all northWest north west putAll put all northEast north east putAll put all southWest south west putAll put all southEast south east northWest north west = northEast north east = southWest south west = southEast south east = } } findContains find contains Point2D point2 HashSet<T> hash set< t> result { if bounds contains { for map Entry<T entry< Rectangle2D rectangle2 double> entry entrySet entry set { if entry getValue get value contains { result add entry getKey get key } } if ! isLeaf leaf { northWest north west findContains find contains result northEast north east findContains find contains result southWest south west findContains find contains result southEast south east findContains find contains result } } } findIntersects find intersects Rectangle2D rectangle2 HashSet<T> hash set< t> result { if bounds intersects { oldSize old size = result size for map Entry<T entry< Rectangle2D rectangle2 double> entry entrySet entry set { if entry getValue get value intersects { result add entry getKey get key } } if ! isLeaf leaf { northWest north west findIntersects find intersects result northEast north east findIntersects find intersects result southWest south west findIntersects find intersects result southEast south east findIntersects find intersects result } } } findInside find inside Rectangle2D rectangle2 HashSet<T> hash set< t> result { if bounds intersects { for map Entry<T entry< Rectangle2D rectangle2 double> entry entrySet entry set { if contains entry getValue get value { result add entry getKey get key } } if ! isLeaf leaf { northWest north west findInside find inside result northEast north east findInside find inside result southWest south west findInside find inside result southEast south east findInside find inside result } } } } } 