org jhotdraw xml import awt * import util * import * import nanoxml * NanoXMLLiteDOMOutput nano xml lite dom output implements DOMOutput dom output { private doctype private HashMap<Object hash map< string> objectids private HashMap<String hash map< object> prototypes private XMLElement xml element document private XMLElement xml element current private DOMFactory dom factory factory private Stack<XMLElement> stack< xml element> stack NanoXMLLiteDOMOutput nano xml lite dom output DOMFactory dom factory factory { this factory = factory objectids = new HashMap<Object hash map< string> document = new XMLElement xml element new HashMap hash map current = document stack = new Stack<XMLElement> stack< xml element> stack push current } save OutputStream output stream out IOException { writer = new OutputStreamWriter output stream writer out UTF8 f8 save flush } save writer out IOException { if doctype != { out write <!DOCTYPE <! out write doctype out write >\n } XMLElement xml element document getChildren get children get 0 write out } PrintWriter writer out { XMLElement xml element document getChildren get children get 0 out } openElement open element tagName tag { XMLElement xml element newElement new element = new XMLElement xml element new HashMap hash map newElement new element setName set tagName tag current addChild add child newElement new element stack push current current = newElement new element } closeElement close element { current = XMLElement xml element stack pop } addComment add comment comment { } addText add text text { old = current getContent get content if old == { current setContent set content text } else { current setContent set content old+text } } addAttribute add attribute value { if value != { current setAttribute set attribute value } } addAttribute add attribute value { current setAttribute set attribute integer toString to value } addAttribute add attribute value { current setAttribute set attribute new value toString to } addAttribute add attribute float value { = float toString to value if endsWith with 0 = substring 0 length - 2 current setAttribute set attribute } addAttribute add attribute value { = toString to value if endsWith with 0 = substring 0 length - 2 current setAttribute set attribute } writeObject write IOException { if == { openElement open element closeElement close element } else if instanceof DOMStorable dom storable { writeStorable write storable DOMStorable dom storable } else if instanceof { openElement open element addText add text closeElement close element } else if instanceof integer { openElement open element addText add text toString to closeElement close element } else if instanceof long { openElement open element long addText add text toString to closeElement close element } else if instanceof { openElement open element = toString to if endsWith with 0 = substring 0 length - 2 addText add text closeElement close element } else if instanceof float { openElement open element float = toString to if endsWith with 0 = substring 0 length - 2 addText add text closeElement close element } else if instanceof { openElement open element addText add text toString to closeElement close element } else if instanceof color { color = color openElement open element color addAttribute add attribute rgba # +Integer + integer toHexString to hex getRGB get closeElement close element } else if instanceof { openElement open element intArray = for i=0 < length i++ { writeObject write new integer } closeElement close element } else if instanceof float { openElement open element floatArray float float = float for i=0 < length i++ { writeObject write new float } closeElement close element } else if instanceof { openElement open element doubleArray = for i=0 < length i++ { writeObject write new } closeElement close element } else if instanceof font { font = font openElement open element font addAttribute add attribute getName get addAttribute add attribute style getStyle get style addAttribute add attribute size getSize get size closeElement close element } else if instanceof enum { openElement open element enum enum = enum addAttribute add attribute type factory getEnumName get enum addText add text factory getEnumValue get enum value closeElement close element } else { new IllegalArgumentException illegal argument unable to store +o+ +o getClass get } } private XMLElement xml element writeStorable write storable DOMStorable dom storable IOException { tagName tag = factory getName get if tagName tag == new IllegalArgumentException illegal argument no tag for +o openElement open element tagName tag XMLElement xml element element = current if objectids containsKey contains key { addAttribute add attribute ref objectids get } else { = integer toString to objectids size 16 objectids put addAttribute add attribute write this } closeElement close element element } addAttribute add attribute float value float defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != defaultValue default value { addAttribute add attribute value } } addAttribute add attribute value defaultValue default value { if value != ! value equals defaultValue default value { addAttribute add attribute value } } getPrototype get prototype { if prototypes == { prototypes = new HashMap<String hash map< object> } if ! prototypes containsKey contains key current getName get { prototypes put current getName get factory create current getName get } prototypes get current getName get } setDoctype set doctype doctype { this doctype = doctype } } 