org jhotdraw draw import org jhotdraw beans * import org jhotdraw undo * import org jhotdraw xml * import awt * import awt geom * import awt font * import javax swing * import javax swing event * import javax swing undo * import org jhotdraw util * import util * import * AbstractDrawing drawing AbstractBean bean implements drawing { private lock = new JPanel panel getTreeLock get tree lock EventListenerList event listener list listenerList listener list = new EventListenerList event listener list private FontRenderContext font render context fontRenderContext font render context AbstractDrawing drawing { } addDrawingListener add drawing listener DrawingListener drawing listener listener { listenerList listener list add DrawingListener drawing listener listener } removeDrawingListener remove drawing listener DrawingListener drawing listener listener { listenerList listener list remove DrawingListener drawing listener listener } addUndoableEditListener add undoable edit listener UndoableEditListener undoable edit listener { listenerList listener list add UndoableEditListener undoable edit listener } removeUndoableEditListener remove undoable edit listener UndoableEditListener undoable edit listener { listenerList listener list remove UndoableEditListener undoable edit listener } addAll add all Collection<Figure> collection< figure> figures { CompositeEdit composite edit edit = new CompositeEdit composite edit figuren hinzuf\u00fcgen fireUndoableEditHappened fire undoable edit happened edit for figure figures { add } fireUndoableEditHappened fire undoable edit happened edit } clear { removeAll remove all getFigures get figures } getFigureCount get figure count { getFigures get figures size } removeAll remove all Collection<Figure> collection< figure> toBeRemoved to be removed { CompositeEdit composite edit edit = new CompositeEdit composite edit figuren entfernen fireUndoableEditHappened fire undoable edit happened edit for figure new ArrayList<Figure> list< figure> toBeRemoved to be removed { remove } fireUndoableEditHappened fire undoable edit happened edit } basicAddAll basic add all Collection<Figure> collection< figure> figures { for figure figures { basicAdd basic add } } basicRemoveAll basic remove all Collection<Figure> collection< figure> toBeOrphaned to be orphaned { for figure new ArrayList<Figure> list< figure> toBeOrphaned to be orphaned { basicRemove basic remove } } add figure figure { index = getFigureCount get figure count basicAdd basic add index figure figure addNotify add notify this fireFigureAdded fire figure added figure fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { getPresentationName get presentation { figur einf\u00fcgen } undo CannotUndoException cannot undo { super undo basicRemove basic remove figure figure removeNotify remove notify AbstractDrawing drawing this fireFigureRemoved fire figure removed figure } redo CannotUndoException cannot undo { super redo basicAdd basic add index figure figure addNotify add notify AbstractDrawing drawing this fireFigureAdded fire figure added figure } } } basicAdd basic add figure figure { basicAdd basic add getFigureCount get figure count figure } remove figure figure { if contains figure { index = indexOf index of figure basicRemove basic remove figure figure removeNotify remove notify this fireFigureRemoved fire figure removed figure fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { getPresentationName get presentation { figur entfernen } redo CannotUndoException cannot undo { super redo basicRemove basic remove figure figure removeNotify remove notify AbstractDrawing drawing this fireFigureRemoved fire figure removed figure } undo CannotUndoException cannot undo { super undo basicAdd basic add index figure figure addNotify add notify AbstractDrawing drawing this fireFigureAdded fire figure added figure } } } else { fireAreaInvalidated fire area invalidated figure getDrawBounds get draw bounds } } indexOf index of figure figure fireAreaInvalidated fire area invalidated Rectangle2D rectangle2 dirtyRegion dirty region { DrawingEvent drawing event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == DrawingListener drawing listener { if event == event = new DrawingEvent drawing event this dirtyRegion dirty region DrawingListener drawing listener listeners i+1 areaInvalidated area invalidated event } } } fireUndoableEditHappened fire undoable edit happened UndoableEdit undoable edit edit { UndoableEditEvent undoable edit event event = if listenerList listener list getListenerCount get listener count > 0 { listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if event == event = new UndoableEditEvent undoable edit event this edit if listeners == UndoableEditListener undoable edit listener { UndoableEditListener undoable edit listener listeners i+1 undoableEditHappened undoable edit happened event } } } } fireFigureAdded fire figure added figure { DrawingEvent drawing event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == DrawingListener drawing listener { if event == event = new DrawingEvent drawing event this getDrawBounds get draw bounds DrawingListener drawing listener listeners i+1 figureAdded figure added event } } } fireFigureRemoved fire figure removed figure { DrawingEvent drawing event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == DrawingListener drawing listener { if event == event = new DrawingEvent drawing event this getDrawBounds get draw bounds DrawingListener drawing listener listeners i+1 figureRemoved figure removed event } } } FontRenderContext font render context getFontRenderContext get font render context { fontRenderContext font render context } setFontRenderContext set font render context FontRenderContext font render context frc { fontRenderContext font render context = frc } read DOMInput dom input IOException { openElement open element figures for i=0 < getElementCount get element count i++ { figure add = figure readObject read } closeElement close element } write DOMOutput dom output out IOException { out openElement open element figures for figure getFigures get figures { out writeObject write } out closeElement close element } getLock get lock { lock } } 