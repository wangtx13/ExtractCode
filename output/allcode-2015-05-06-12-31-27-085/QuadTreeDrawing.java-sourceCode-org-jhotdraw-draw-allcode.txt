org jhotdraw draw import org jhotdraw geom QuadTree2DDouble quad tree2 import org jhotdraw util ReversedList reversed list import awt * import awt geom * import javax swing * import javax swing event * import org jhotdraw util * import util * QuadTreeDrawing quad tree drawing AbstractDrawing drawing implements FigureListener figure listener UndoableEditListener undoable edit listener { private ArrayList<Figure> list< figure> figures = new ArrayList<Figure> list< figure> private QuadTree2DDouble<Figure> quad tree2 double< figure> quadTree quad tree = new QuadTree2DDouble<Figure> quad tree2 double< figure> private needsSorting needs sorting = QuadTreeDrawing quad tree drawing { } indexOf index of figure figure { figures indexOf index of figure } basicAdd basic add index figure figure { figures add index figure quadTree quad tree add figure figure getDrawBounds get draw bounds figure addFigureListener add figure listener this figure addUndoableEditListener add undoable edit listener this needsSorting needs sorting = } basicRemove basic remove figure figure { figures remove figure quadTree quad tree remove figure figure removeFigureListener remove figure listener this figure removeUndoableEditListener remove undoable edit listener this needsSorting needs sorting = } draw Graphics2D graphics2 { Collection<Figure> collection< figure> = quadTree quad tree findIntersects find intersects getClipBounds get clip bounds getBounds2D get bounds2 Collection<Figure> collection< figure> toDraw to draw = sort draw toDraw to draw } Collection<Figure> collection< figure> sort Collection<Figure> collection< figure> { ensureSorted ensure sorted ArrayList<Figure> list< figure> sorted = new ArrayList<Figure> list< figure> size for figure figures { if contains { sorted add } } sorted } draw Graphics2D graphics2 Collection<Figure> collection< figure> { for figure { draw } } figureAreaInvalidated figure area invalidated FigureEvent figure event { fireAreaInvalidated fire area invalidated getInvalidatedArea get invalidated area } figureChanged figure changed FigureEvent figure event { quadTree quad tree remove getFigure get figure quadTree quad tree add getFigure get figure getFigure get figure getDrawBounds get draw bounds needsSorting needs sorting = fireAreaInvalidated fire area invalidated getInvalidatedArea get invalidated area } figureAdded figure added FigureEvent figure event { } figureRemoved figure removed FigureEvent figure event { } figureRequestRemove figure request remove FigureEvent figure event { remove getFigure get figure } Collection<Figure> collection< figure> getFigures get figures Rectangle2D rectangle2 bounds { quadTree quad tree findInside find inside bounds } Collection<Figure> collection< figure> getFigures get figures { collections unmodifiableCollection unmodifiable collection figures } figure findFigureInside find figure inside Point2D point2 { Collection<Figure> collection< figure> = quadTree quad tree findContains find contains for figure getFiguresFrontToBack get figures front to back { if contains contains { findFigureInside find figure inside } } } util List<Figure> list< figure> getFiguresFrontToBack get figures front to back { ensureSorted ensure sorted new ReversedList<Figure> reversed list< figure> figures } figure findFigure find figure Point2D point2 { Collection<Figure> collection< figure> = quadTree quad tree findContains find contains switch size { case 0 case 1 { figure = iterator next contains ? } default { for figure getFiguresFrontToBack get figures front to back { if contains contains } } } } figure findFigureExcept find figure Point2D point2 figure ignore { Collection<Figure> collection< figure> = quadTree quad tree findContains find contains switch size { case 0 { } case 1 { figure = iterator next == ignore || ! contains ? } default { for figure getFiguresFrontToBack get figures front to back { if != ignore contains } } } } figure findFigureExcept find figure Point2D point2 collection ignore { Collection<Figure> collection< figure> = quadTree quad tree findContains find contains switch size { case 0 { } case 1 { figure = iterator next ! ignore contains || ! contains ? } default { for figure getFiguresFrontToBack get figures front to back { if ! ignore contains contains } } } } Collection<Figure> collection< figure> findFigures find figures Rectangle2D rectangle2 { Collection<Figure> collection< figure> = quadTree quad tree findIntersects find intersects switch size { case 0 case 1 default sort } } Collection<Figure> collection< figure> findFiguresWithin find figures within Rectangle2D rectangle2 { Collection<Figure> collection< figure> = findFigures find figures ArrayList<Figure> list< figure> result = new ArrayList<Figure> list< figure> size for figure { if contains getBounds get bounds { result add } } result } bringToFront bring to front figure figure { if figures remove figure { figures add figure needsSorting needs sorting = fireAreaInvalidated fire area invalidated figure getDrawBounds get draw bounds } } sendToBack send to back figure figure { if figures remove figure { figures add 0 figure needsSorting needs sorting = fireAreaInvalidated fire area invalidated figure getDrawBounds get draw bounds } } undoableEditHappened undoable edit happened UndoableEditEvent undoable edit event { fireUndoableEditHappened fire undoable edit happened getEdit get edit } figureAttributeChanged figure attribute changed FigureEvent figure event { } contains figure { figures contains } private ensureSorted ensure sorted { if needsSorting needs sorting { collections sort figures FigureLayerComparator figure layer comparator INSTANCE needsSorting needs sorting = } } } 