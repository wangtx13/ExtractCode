org jhotdraw draw import awt * import awt geom * import * import util * import javax swing undo * import org jhotdraw draw AttributeKeys attribute keys * import org jhotdraw geom * import org jhotdraw xml DOMInput dom input import org jhotdraw xml DOMOutput dom output RoundRectangleFigure round rectangle figure AttributedFigure attributed figure { private RoundRectangle2D round rectangle2 roundrect private DEFAULT_ARC = 20 RoundRectangleFigure round rectangle figure { this 0 0 0 0 } RoundRectangleFigure round rectangle figure width height { roundrect = new RoundRectangle2D round rectangle2 width height DEFAULT_ARC DEFAULT_ARC } Rectangle2D rectangle2 getBounds get bounds { Rectangle2D rectangle2 roundrect getBounds2D get bounds2 } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds { Rectangle2D rectangle2 = Rectangle2D rectangle2 roundrect getBounds2D get bounds2 grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this geom grow grow grow } getArcWidth get arc width { roundrect arcwidth } getArcHeight get arc height { roundrect archeight } setArc set arc { oldWidth old width = roundrect getArcWidth get arc width oldHeight old height = roundrect getArcHeight get arc height roundrect arcwidth = roundrect archeight = fireFigureChanged fire figure changed getDrawBounds get draw bounds fireUndoableEditHappened fire undoable edit happened new AbstractUndoableEdit undoable edit { getPresentationName get presentation { rundung } undo CannotUndoException cannot undo { super undo willChange will change roundrect arcwidth = oldWidth old width roundrect archeight = oldHeight old height changed } redo CannotRedoException cannot redo { super redo willChange will change roundrect arcwidth = roundrect archeight = changed } } } drawFill draw fill Graphics2D graphics2 { RoundRectangle2D round rectangle2 = RoundRectangle2D round rectangle2 roundrect clone grow = AttributeKeys attribute keys getPerpendicularFillGrowth get perpendicular fill growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { fill } } drawStroke draw stroke Graphics2D graphics2 { RoundRectangle2D round rectangle2 = RoundRectangle2D round rectangle2 roundrect clone grow = AttributeKeys attribute keys getPerpendicularDrawGrowth get perpendicular draw growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { draw } } contains Point2D point2 { RoundRectangle2D round rectangle2 = RoundRectangle2D round rectangle2 roundrect clone grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 contains } basicSetBounds basic set bounds Point2D point2 anchor Point2D point2 { roundrect = math min anchor roundrect = math min anchor roundrect width = math max 0 1 math - anchor roundrect height = math max 0 1 math - anchor } basicTransform basic transform AffineTransform affine transform tx { Point2D point2 anchor = getStartPoint get start point Point2D point2 = getEndPoint get point basicSetBounds basic set bounds Point2D point2 tx transform anchor anchor Point2D point2 tx transform } Collection<Handle> collection< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles = LinkedList<Handle> linked list< handle> super createHandles create handles detailLevel detail level handles add new RoundRectRadiusHandle round rect radius handle this handles } connector findConnector find connector Point2D point2 ConnectionFigure connection figure prototype { new ChopRoundRectConnector chop round rect connector this } connector findCompatibleConnector find compatible connector connector isStartConnector start connector { new ChopRoundRectConnector chop round rect connector this } RoundRectangleFigure round rectangle figure clone { RoundRectangleFigure round rectangle figure that = RoundRectangleFigure round rectangle figure super clone that roundrect = RoundRectangle2D round rectangle2 this roundrect clone that } @Override @ read DOMInput dom input IOException { super read roundrect arcwidth = getAttribute get attribute arcWidth arc width DEFAULT_ARC roundrect archeight = getAttribute get attribute arcHeight arc height DEFAULT_ARC } @Override @ write DOMOutput dom output out IOException { super write out out addAttribute add attribute arcWidth arc width roundrect arcwidth out addAttribute add attribute arcHeight arc height roundrect archeight } restoreTo restore to geometry { RoundRectangle2D round rectangle2 = RoundRectangle2D round rectangle2 geometry roundrect = roundrect = roundrect width = width roundrect height = height } getRestoreData get restore data { roundrect clone } Point2D point2 chop Point2D point2 from { Rectangle2D rectangle2 outer = getBounds get bounds grow switch STROKE_PLACEMENT get this { case CENTER default grow = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this / 2 break case OUTSIDE sid grow = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this break case INSIDE sid grow = 0 break } outer -= grow outer -= grow outer width += grow * 2 outer height += grow * 2 Rectangle2D rectangle2 inner = Rectangle2D rectangle2 outer clone gw = - getArcWidth get arc width + grow * 2 / 2 gh = - getArcHeight get arc height + grow *2 / 2 inner -= gw inner -= gh inner width += gw * 2 inner height += gh * 2 angle = geom pointToAngle point to angle outer from Point2D point2 = geom angleToPoint angle to point outer geom pointToAngle point to angle outer from if == outer || == outer + outer width { = math min math max inner inner + inner height } else { = math min math max inner inner + inner width } } } 