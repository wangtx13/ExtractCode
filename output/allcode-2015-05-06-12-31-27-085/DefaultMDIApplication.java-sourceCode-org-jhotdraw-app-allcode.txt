org jhotdraw app import org jhotdraw gui * import org jhotdraw util * import org jhotdraw util prefs * import awt * import awt event * import beans * import * import util * import util prefs * import javax swing * import javax swing event * import org jhotdraw app action * DefaultMDIApplication default application AbstractApplication application { private JFrame frame parentFrame parent frame private JScrollPane scroll pane scrollPane scroll pane private MDIDesktopPane didesktop pane desktopPane desktop pane private preferences prefs private project currentProject current project private LinkedList<Action> linked list< action> toolBarActions tool bar actions DefaultMDIApplication default application { } initApplicationActions init application actions { ApplicationModel application model mo = getModel get model mo putAction put action AboutAction about action new AboutAction about action this mo putAction put action ExitAction exit action new ExitAction exit action this mo putAction put action OSXDropOnDockAction drop dock action new OSXDropOnDockAction drop dock action this mo putAction put action NewAction new action new NewAction new action this mo putAction put action OpenAction open action new OpenAction open action this mo putAction put action ClearRecentFilesAction clear recent files action new ClearRecentFilesAction clear recent files action this mo putAction put action SaveAction save action new SaveAction save action this mo putAction put action SaveAsAction save action new SaveAsAction save action this mo putAction put action CloseAction close action new CloseAction close action this mo putAction put action UndoAction undo action new UndoAction undo action this mo putAction put action RedoAction redo action new RedoAction redo action this mo putAction put action CutAction cut action new CutAction cut action mo putAction put action CopyAction copy action new CopyAction copy action mo putAction put action PasteAction paste action new PasteAction paste action mo putAction put action DeleteAction delete action new DeleteAction delete action mo putAction put action DuplicateAction duplicate action new DuplicateAction duplicate action mo putAction put action SelectAllAction select all action new SelectAllAction select all action mo putAction put action ArrangeAction arrange action VERTICAL_ID new ArrangeAction arrange action desktopPane desktop pane arrangeable arrangement VERTICAL mo putAction put action ArrangeAction arrange action HORIZONTAL_ID new ArrangeAction arrange action desktopPane desktop pane arrangeable arrangement HORIZONTAL z mo putAction put action ArrangeAction arrange action CASCADE_ID new ArrangeAction arrange action desktopPane desktop pane arrangeable arrangement CASCADE } initProjectActions init project actions project { putAction put action FocusAction focus action new FocusAction focus action } launch args { setProperty set property apple awt graphics UseQuartz use quartz super launch args } init { super init prefs = preferences userNodeForPackage user node for getModel get model == ? getClass get getModel get model getClass get initLookAndFeel init look and feel initLabels init labels parentFrame parent frame = new JFrame frame getName get parentFrame parent frame setDefaultCloseOperation set default close operation JFrame frame DO_NOTHING_ON_CLOSE desktopPane desktop pane = new MDIDesktopPane didesktop pane scrollPane scroll pane = new JScrollPane scroll pane scrollPane scroll pane setViewportView set viewport view desktopPane desktop pane toolBarActions tool bar actions = new LinkedList<Action> linked list< action> initApplicationActions init application actions parentFrame parent frame getContentPane get content pane add wrapDesktopPane wrap desktop pane scrollPane scroll pane toolBarActions tool bar actions parentFrame parent frame addWindowListener add window listener new WindowAdapter window adapter { windowClosing window closing WindowEvent window event evt { getModel get model getAction get action ExitAction exit action actionPerformed action performed new ActionEvent action event parentFrame parent frame ActionEvent action event ACTION_PERFORMED windowClosing window closing } } parentFrame parent frame setJMenuBar set menu bar createMenuBar create menu bar PreferencesUtil preferences util installFramePrefsHandler install frame prefs handler prefs parentFrame parent frame parentFrame parent frame parentFrame parent frame setVisible set visible } initLookAndFeel init look and feel { if setProperty set property apple laf useScreenMenuBar use screen menu bar setProperty set property com apple macos useScreenMenuBar use screen menu bar setProperty set property apple awt graphics UseQuartz use quartz try { lafName laf = UIManager manager getSystemLookAndFeelClassName get look and feel UIManager manager setLookAndFeel set look and feel lafName laf } catch { printStackTrace stack trace } if UIManager manager getString get OptionPane option pane css == { UIManager manager put OptionPane option pane css } } show project { if ! isShowing showing { setShowing set showing = getFile get JInternalFrame internal frame = new JInternalFrame internal frame title if == { title = labels getString get unnamedFile unnamed } else { title = getName get } setTitle set title labels getFormatted get formatted internalFrameTitle internal frame title title getName get getMultipleOpenId get multiple open setDefaultCloseOperation set default close operation JInternalFrame internal frame DO_NOTHING_ON_CLOSE setClosable set closable setMaximizable set maximizable setResizable set resizable setIconifiable set iconifiable PreferencesUtil preferences util installInternalFramePrefsHandler install internal frame prefs handler prefs project desktopPane desktop pane point = getLocation get location moved { moved = for iterator i=projects iterator hasNext has next { project aProject project = project next if aProject project != aProject project isShowing showing SwingUtilities swing utilities getRootPane get root pane aProject project getComponent get component getParent get parent getLocation get location equals { += 22 += 22 moved = break } } } while moved setLocation set location addInternalFrameListener add internal frame listener new InternalFrameAdapter internal frame adapter { @Override @ internalFrameClosing internal frame closing InternalFrameEvent internal frame event evt { setCurrentProject set current project getModel get model getAction get action CloseAction close action actionPerformed action performed new ActionEvent action event ActionEvent action event ACTION_PERFORMED windowClosing window closing } } addPropertyChangeListener add property change listener new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { = evt getPropertyName get property if equals hasUnsavedChanges has unsaved changes { JInternalFrame internal frame getRootPane get root pane getParent get parent putClientProperty put client property windowModified window modified new hasUnsavedChanges has unsaved changes } else if equals { setTitle set title getFile get == ? unnamed getFile get getName get } } } addPropertyChangeListener add property change listener new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { = evt getPropertyName get property if equals selected { if evt getNewValue get new value equals TRUE { setCurrentProject set current project } } } } getContentPane get content pane add getComponent get component setVisible set visible desktopPane desktop pane add toFront to front try { setSelected set selected } catch PropertyVetoException property veto { } getComponent get component requestFocusInWindow request focus window } } hide project { if isShowing showing { JInternalFrame internal frame = JInternalFrame internal frame SwingUtilities swing utilities getRootPane get root pane getComponent get component getParent get parent setVisible set visible remove getComponent get component desktopPane desktop pane remove dispose } } project getCurrentProject get current project { currentProject current project } setCurrentProject set current project project newValue new value { project oldValue old value = currentProject current project currentProject current project = newValue new value firePropertyChange fire property change currentProject current project oldValue old value newValue new value } isSharingToolsAmongProjects sharing tools among projects { } component getComponent get component { parentFrame parent frame } component wrapDesktopPane wrap desktop pane component LinkedList<Action> linked list< action> toolBarActions tool bar actions { if getModel get model != { id=0 for JToolBar tool bar tb new ReversedList<JToolBar> reversed list< tool bar> getModel get model createToolBars create tool bars this { id++ JPanel panel panel = new JPanel panel new BorderLayout border layout panel add tb BorderLayout border layout NORTH panel add BorderLayout border layout CENTER = panel PreferencesUtil preferences util installToolBarPrefsHandler install tool bar prefs handler prefs toolbar +id tb toolBarActions tool bar actions addFirst add first new ToggleToolBarAction toggle tool bar action tb tb getName get } JToolBar tool bar tb = new JToolBar tool bar tb setName set labels getString get standardToolBarTitle standard tool bar title addStandardActionsTo add standard actions to tb id++ JPanel panel panel = new JPanel panel new BorderLayout border layout panel add tb BorderLayout border layout NORTH panel add BorderLayout border layout CENTER = panel PreferencesUtil preferences util installToolBarPrefsHandler install tool bar prefs handler prefs toolbar +id tb toolBarActions tool bar actions addFirst add first new ToggleToolBarAction toggle tool bar action tb tb getName get panel putClientProperty put client property toolBarActions tool bar actions toolBarActions tool bar actions } } addStandardActionsTo add standard actions to JToolBar tool bar tb { JButton button ApplicationModel application model mo = getModel get model = tb add mo getAction get action NewAction new action setFocusable set focusable = tb add mo getAction get action OpenAction open action setFocusable set focusable = tb add mo getAction get action SaveAction save action tb addSeparator add separator = tb add mo getAction get action UndoAction undo action setFocusable set focusable = tb add mo getAction get action RedoAction redo action setFocusable set focusable tb addSeparator add separator = tb add mo getAction get action CutAction cut action setFocusable set focusable = tb add mo getAction get action CopyAction copy action setFocusable set focusable = tb add mo getAction get action PasteAction paste action setFocusable set focusable } JMenuBar menu bar createMenuBar create menu bar { ResourceBundleUtil resource bundle util labels = ResourceBundleUtil resource bundle util getLAFBundle get bundle org jhotdraw app labels ApplicationModel application model mo = getModel get model JMenuBar menu bar mb = new JMenuBar menu bar JMenu menu JMenuItem menu item mi JMenu menu openRecentMenu open recent menu = new JMenu menu labels configureMenu configure menu add mo getAction get action NewAction new action add mo getAction get action OpenAction open action openRecentMenu open recent menu = new JMenu menu labels configureMenu configure menu openRecentMenu open recent menu openRecent open recent openRecentMenu open recent menu add mo getAction get action ClearRecentFilesAction clear recent files action updateOpenRecentMenu update open recent menu openRecentMenu open recent menu add openRecentMenu open recent menu addSeparator add separator add mo getAction get action CloseAction close action add mo getAction get action SaveAction save action add mo getAction get action SaveAsAction save action if mo getAction get action ExportAction export action != { mi = add mo getAction get action ExportAction export action } addSeparator add separator add mo getAction get action ExitAction exit action mb add = new JMenu menu labels configureMenu configure menu edit add mo getAction get action UndoAction undo action add mo getAction get action RedoAction redo action addSeparator add separator add mo getAction get action CutAction cut action add mo getAction get action CopyAction copy action add mo getAction get action PasteAction paste action add mo getAction get action DuplicateAction duplicate action add mo getAction get action DeleteAction delete action addSeparator add separator add mo getAction get action SelectAllAction select all action mb add for JMenu menu mm mo createMenus create menus this { mb add mm } = new JMenu menu JMenu menu windowMenu window menu = labels configureMenu configure menu window add mo getAction get action ArrangeAction arrange action CASCADE_ID add mo getAction get action ArrangeAction arrange action VERTICAL_ID add mo getAction get action ArrangeAction arrange action HORIZONTAL_ID addSeparator add separator for project projects { if getAction get action FocusAction focus action != { windowMenu window menu add getAction get action FocusAction focus action } } if toolBarActions tool bar actions size > 0 { addSeparator add separator for action toolBarActions tool bar actions { JCheckBoxMenuItem check box menu item cbmi = new JCheckBoxMenuItem check box menu item actions configureJCheckBoxMenuItem configure check box menu item cbmi add cbmi } } mb add = new JMenu menu labels configureMenu configure menu labels getString get help add mo getAction get action AboutAction about action mb add addPropertyChangeListener add property change listener new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { = evt getPropertyName get property ApplicationModel application model mo = getModel get model if == projectCount project count { JMenu menu = windowMenu window menu removeAll remove all add mo getAction get action ArrangeAction arrange action CASCADE_ID add mo getAction get action ArrangeAction arrange action VERTICAL_ID add mo getAction get action ArrangeAction arrange action HORIZONTAL_ID addSeparator add separator for iterator i=projects iterator hasNext has next { project = project next if getAction get action FocusAction focus action != { add getAction get action FocusAction focus action } } if toolBarActions tool bar actions size > 0 { addSeparator add separator for action toolBarActions tool bar actions { JCheckBoxMenuItem check box menu item cbmi = new JCheckBoxMenuItem check box menu item actions configureJCheckBoxMenuItem configure check box menu item cbmi add cbmi } } } else if == recentFiles recent files { updateOpenRecentMenu update open recent menu openRecentMenu open recent menu } } } mb } private updateOpenRecentMenu update open recent menu JMenu menu openRecentMenu open recent menu { if openRecentMenu open recent menu getItemCount get item count > 0 { JMenuItem menu item clearRecentFilesItem clear recent files item = JMenuItem menu item openRecentMenu open recent menu getItem get item openRecentMenu open recent menu getItemCount get item count - 1 openRecentMenu open recent menu removeAll remove all for recentFiles recent files { openRecentMenu open recent menu add new OpenRecentAction open recent action DefaultMDIApplication default application this } if recentFiles recent files size > 0 { openRecentMenu open recent menu addSeparator add separator } openRecentMenu open recent menu add clearRecentFilesItem clear recent files item } } } 