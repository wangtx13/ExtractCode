org jhotdraw draw import util collection import javax swing event * import awt * import awt event * import javax swing undo * import util * AbstractHandle handle implements handle FigureListener figure listener { private figure owner DrawingView drawing view view EventListenerList event listener list listenerList listener list = new EventListenerList event listener list private rectangle bounds AbstractHandle handle figure owner { this owner = owner owner addFigureListener add figure listener this } getHandlesize get handlesize { 7 } addHandleListener add handle listener HandleListener handle listener { listenerList listener list add HandleListener handle listener } removeHandleListener remove handle listener HandleListener handle listener { listenerList listener list remove HandleListener handle listener } figure getOwner get owner { owner } setView set view DrawingView drawing view view { this view = view } fireAreaInvalidated fire area invalidated rectangle invalidatedArea invalidated area { HandleEvent handle event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == HandleListener handle listener { if event == event = new HandleEvent handle event this invalidatedArea invalidated area HandleListener handle listener listeners i+1 areaInvalidated area invalidated event } } } fireUndoableEditHappened fire undoable edit happened UndoableEdit undoable edit edit { view getDrawing get drawing fireUndoableEditHappened fire undoable edit happened edit } fireHandleRequestRemove fire handle request remove rectangle invalidatedArea invalidated area { HandleEvent handle event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == HandleListener handle listener { if event == event = new HandleEvent handle event this invalidatedArea invalidated area HandleListener handle listener listeners i+1 handleRequestRemove handle request remove event } } } fireHandleRequestSecondaryHandles fire handle request secondary handles { HandleEvent handle event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == HandleListener handle listener { if event == event = new HandleEvent handle event this HandleListener handle listener listeners i+1 handleRequestSecondaryHandles handle request secondary handles event } } } draw Graphics2D graphics2 { drawCircle draw circle color white color black } drawCircle draw circle Graphics2D graphics2 color fill color stroke { rectangle = getBounds get bounds setColor set color fill fillOval fill oval width height setStroke set stroke new BasicStroke basic stroke setColor set color stroke drawOval draw oval width height } drawRectangle draw rectangle Graphics2D graphics2 color fill color stroke { rectangle = getBounds get bounds setColor set color fill fill setStroke set stroke new BasicStroke basic stroke setColor set color stroke draw } drawDiamond draw diamond Graphics2D graphics2 color fill color stroke { rectangle = getBounds get bounds grow 1 1 polygon = new polygon addPoint add point + width / 2 addPoint add point + width + height / 2 addPoint add point + width / 2 + height addPoint add point + height / 2 addPoint add point + width / 2 setColor set color fill fill setStroke set stroke new BasicStroke basic stroke setColor set color stroke draw } contains point { getBounds get bounds contains } invalidate { fireAreaInvalidated fire area invalidated getDrawBounds get draw bounds } dispose { owner removeFigureListener remove figure listener this owner = } figureAreaInvalidated figure area invalidated FigureEvent figure event evt { updateBounds update bounds } figureAdded figure added FigureEvent figure event { } figureRemoved figure removed FigureEvent figure event { } figureRequestRemove figure request remove FigureEvent figure event { } figureChanged figure changed FigureEvent figure event evt { updateBounds update bounds } cursor getCursor get cursor { cursor getPredefinedCursor get predefined cursor cursor MOVE_CURSOR } isCombinableWith combinable with handle handle { getClass get isAssignableFrom assignable from handle getClass get } keyTyped key typed KeyEvent key event evt { } keyReleased key released KeyEvent key event evt { } keyPressed key pressed KeyEvent key event evt { } rectangle getBounds get bounds { if bounds == { bounds = basicGetBounds basic get bounds } rectangle bounds clone } rectangle getDrawBounds get draw bounds { rectangle = getBounds get bounds grow 2 2 } rectangle basicGetBounds basic get bounds updateBounds update bounds { rectangle newBounds new bounds = basicGetBounds basic get bounds if bounds == || ! newBounds new bounds equals bounds { if bounds != fireAreaInvalidated fire area invalidated getDrawBounds get draw bounds bounds = newBounds new bounds fireAreaInvalidated fire area invalidated getDrawBounds get draw bounds } } trackDoubleClick track click point modifiersEx modifiers { } figureAttributeChanged figure attribute changed FigureEvent figure event { } viewTransformChanged view transform changed { bounds = } Collection<Handle> collection< handle> createSecondaryHandles create secondary handles { collections emptyList empty list } } 