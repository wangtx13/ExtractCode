org jhotdraw draw import IOException import org jhotdraw util * import awt * import awt geom * import util * import javax swing undo * import javax swing event * import org jhotdraw draw AttributeKeys attribute keys * import org jhotdraw geom * import org jhotdraw xml DOMInput dom input import org jhotdraw xml DOMOutput dom output GraphicalCompositeFigure graphical composite figure AbstractCompositeFigure composite figure { HashMap<AttributeKey hash map< attribute key object> attributes = new HashMap<AttributeKey hash map< attribute key object> private HashSet<AttributeKey> hash set< attribute key> forbiddenAttributes forbidden attributes private figure presentationFigure presentation figure private PresentationFigureHandler presentation figure handler presentationFigureHandler presentation figure handler = new PresentationFigureHandler presentation figure handler this private PresentationFigureHandler presentation figure handler implements FigureListener figure listener UndoableEditListener undoable edit listener { private GraphicalCompositeFigure graphical composite figure owner private PresentationFigureHandler presentation figure handler GraphicalCompositeFigure graphical composite figure owner { this owner = owner } figureRequestRemove figure request remove FigureEvent figure event { owner remove getFigure get figure } figureRemoved figure removed FigureEvent figure event evt { } figureChanged figure changed FigureEvent figure event { if ! owner isChanging changing { owner willChange will change owner fireFigureChanged fire figure changed owner changed } } figureAdded figure added FigureEvent figure event { } figureAttributeChanged figure attribute changed FigureEvent figure event { } figureAreaInvalidated figure area invalidated FigureEvent figure event { if ! owner isChanging changing { owner fireAreaInvalidated fire area invalidated getInvalidatedArea get invalidated area } } undoableEditHappened undoable edit happened UndoableEditEvent undoable edit event { owner fireUndoableEditHappened fire undoable edit happened getEdit get edit } } GraphicalCompositeFigure graphical composite figure { this } GraphicalCompositeFigure graphical composite figure figure newPresentationFigure new presentation figure { super setPresentationFigure set presentation figure newPresentationFigure new presentation figure } Rectangle2D rectangle2 getBounds get bounds { if getPresentationFigure get presentation figure == super getBounds get bounds getPresentationFigure get presentation figure getBounds get bounds } contains Point2D point2 { if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure contains } else { super contains } } addNotify add notify drawing drawing { super addNotify add notify drawing if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure addNotify add notify drawing } } removeNotify remove notify drawing drawing { super removeNotify remove notify drawing if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure removeNotify remove notify drawing } } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds { Rectangle2D rectangle2 if getPresentationFigure get presentation figure != { Rectangle2D rectangle2 presentationBounds presentation bounds = getPresentationFigure get presentation figure getDrawBounds get draw bounds = super getFigureDrawBounds get figure draw bounds if isEmpty empty { = presentationBounds presentation bounds } else { add presentationBounds presentation bounds } } else { = super getFigureDrawBounds get figure draw bounds } } basicSetBounds basic set bounds Point2D point2 anchor Point2D point2 { if getLayouter get layouter == { super basicSetBounds basic set bounds anchor basicSetPresentationFigureBounds basic set presentation figure bounds anchor } else { Rectangle2D rectangle2 = getLayouter get layouter layout this anchor basicSetPresentationFigureBounds basic set presentation figure bounds new Point2D point2 getX get getY get new Point2D point2 math max getMaxX get max math max getMaxY get max invalidate } } superBasicSetBounds super basic set bounds Point2D point2 anchor Point2D point2 { super basicSetBounds basic set bounds anchor } basicSetPresentationFigureBounds basic set presentation figure bounds Point2D point2 anchor Point2D point2 { if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure basicSetBounds basic set bounds anchor } } basicTransform basic transform AffineTransform affine transform tx { super basicTransform basic transform tx if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure basicTransform basic transform tx } } drawFigure draw figure Graphics2D graphics2 { drawPresentationFigure draw presentation figure super drawFigure draw figure } drawPresentationFigure draw presentation figure Graphics2D graphics2 { if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure draw } } Collection<Handle> collection< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles = new LinkedList<Handle> linked list< handle> if detailLevel detail level == 0 { MoveHandle move handle addMoveHandles add move handles this handles } handles } setPresentationFigure set presentation figure figure newPresentationFigure new presentation figure { if this presentationFigure presentation figure != { this presentationFigure presentation figure removeFigureListener remove figure listener presentationFigureHandler presentation figure handler this presentationFigure presentation figure removeUndoableEditListener remove undoable edit listener presentationFigureHandler presentation figure handler if getDrawing get drawing != { this presentationFigure presentation figure removeNotify remove notify getDrawing get drawing } } this presentationFigure presentation figure = newPresentationFigure new presentation figure if this presentationFigure presentation figure != { this presentationFigure presentation figure addFigureListener add figure listener presentationFigureHandler presentation figure handler this presentationFigure presentation figure addUndoableEditListener add undoable edit listener presentationFigureHandler presentation figure handler if getDrawing get drawing != { this presentationFigure presentation figure addNotify add notify getDrawing get drawing } } } figure getPresentationFigure get presentation figure { presentationFigure presentation figure } GraphicalCompositeFigure graphical composite figure clone { GraphicalCompositeFigure graphical composite figure that = GraphicalCompositeFigure graphical composite figure super clone that presentationFigure presentation figure = this presentationFigure presentation figure == ? figure this presentationFigure presentation figure clone if that presentationFigure presentation figure != { that presentationFigure presentation figure addFigureListener add figure listener that presentationFigureHandler presentation figure handler that presentationFigure presentation figure addUndoableEditListener add undoable edit listener that presentationFigureHandler presentation figure handler } that } remap HashMap<Figure hash map< figure figure> oldToNew old to new { super remap oldToNew old to new if presentationFigure presentation figure != { presentationFigure presentation figure remap oldToNew old to new } } setAttribute set attribute AttributeKey attribute key key newValue new value { if forbiddenAttributes forbidden attributes == || ! forbiddenAttributes forbidden attributes contains key { willChange will change if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure setAttribute set attribute key newValue new value } super setAttribute set attribute key newValue new value oldValue old value = attributes put key newValue new value fireAttributeChanged fire attribute changed key oldValue old value newValue new value fireUndoableEditHappened fire undoable edit happened new AttributeChangeEdit attribute change edit this key oldValue old value newValue new value changed } } basicSetAttribute basic set attribute AttributeKey attribute key key newValue new value { if forbiddenAttributes forbidden attributes == || ! forbiddenAttributes forbidden attributes contains key { if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure basicSetAttribute basic set attribute key newValue new value } super basicSetAttribute basic set attribute key newValue new value oldValue old value = attributes put key newValue new value } } setAttributeEnabled set attribute enabled AttributeKey attribute key key { if forbiddenAttributes forbidden attributes == { forbiddenAttributes forbidden attributes = new HashSet<AttributeKey> hash set< attribute key> } if { forbiddenAttributes forbidden attributes remove key } else { forbiddenAttributes forbidden attributes add key } } getAttribute get attribute AttributeKey attribute key key { if getPresentationFigure get presentation figure != { getPresentationFigure get presentation figure getAttribute get attribute key } else { ! attributes containsKey contains key key ? key getDefaultValue get default value attributes get key } } applyAttributesTo apply attributes to figure that { for map Entry<AttributeKey entry< attribute key object> entry attributes entrySet entry set { that setAttribute set attribute entry getKey get key entry getValue get value } } writeAttributes write attributes DOMOutput dom output out IOException { figure prototype = figure out getPrototype get prototype isElementOpen element open = for map Entry<AttributeKey entry< attribute key object> entry attributes entrySet entry set { AttributeKey attribute key key = entry getKey get key if forbiddenAttributes forbidden attributes == || ! forbiddenAttributes forbidden attributes contains key { prototypeValue prototype value = key get prototype attributeValue attribute value = key get this if prototypeValue prototype value != attributeValue attribute value || prototypeValue prototype value != attributeValue attribute value != ! prototypeValue prototype value equals attributeValue attribute value { if ! isElementOpen element open { out openElement open element isElementOpen element open = } out openElement open element key getKey get key out writeObject write entry getValue get value out closeElement close element } } } if isElementOpen element open { out closeElement close element } } readAttributes read attributes DOMInput dom input IOException { if getElementCount get element count > 0 { openElement open element for i=in getElementCount get element count - 1 >= 0 i-- { openElement open element = getTagName get tag value = readObject read AttributeKey attribute key key = getAttributeKey get attribute key if key != key isAssignable assignable value { if forbiddenAttributes forbidden attributes == || ! forbiddenAttributes forbidden attributes contains key { setAttribute set attribute key value } } closeElement close element } closeElement close element } } AttributeKey attribute key getAttributeKey get attribute key { AttributeKeys attribute keys supportedAttributeMap supported attribute map get } Map<AttributeKey map< attribute key object> getAttributes get attributes { new HashMap<AttributeKey hash map< attribute key object> attributes } Point2D point2 chop Point2D point2 from { Rectangle2D rectangle2 = getBounds get bounds if STROKE_COLOR get this != { grow switch STROKE_PLACEMENT get this { case CENTER default grow = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this break case OUTSIDE sid grow = AttributeKeys attribute keys getStrokeTotalWidth get stroke total width this break case INSIDE sid grow = 0d break } geom grow grow grow } geom angleToPoint angle to point geom pointToAngle point to angle from } } 