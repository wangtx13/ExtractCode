org jhotdraw draw import org jhotdraw util * import javax swing event * import awt * import awt event * import awt font * import awt geom * import util * import javax swing * import javax swing undo * import * import org jhotdraw geom * AbstractFigure figure implements figure { EventListenerList event listener list listenerList listener list = new EventListenerList event listener list private isConnectorsVisible connectors visible private ConnectionFigure connection figure courtingConnection courting connection private drawing drawing private isInteractive interactive private isVisible visible = figure decorator private isDrawDecoratorFirst draw decorator first = changingDepth changing depth = 0 AbstractFigure figure { } addFigureListener add figure listener FigureListener figure listener { listenerList listener list add FigureListener figure listener } removeFigureListener remove figure listener FigureListener figure listener { listenerList listener list remove FigureListener figure listener } addUndoableEditListener add undoable edit listener UndoableEditListener undoable edit listener { listenerList listener list add UndoableEditListener undoable edit listener } removeUndoableEditListener remove undoable edit listener UndoableEditListener undoable edit listener { listenerList listener list remove UndoableEditListener undoable edit listener } addNotify add notify drawing { this drawing = fireFigureAdded fire figure added } removeNotify remove notify drawing { fireFigureRemoved fire figure removed this drawing = } drawing getDrawing get drawing { drawing } getLock get lock { getDrawing get drawing == ? this getDrawing get drawing getLock get lock } setDrawDecoratorFirst set draw decorator first newValue new value { isDrawDecoratorFirst draw decorator first = newValue new value } isDrawDecoratorFirst draw decorator first { isDrawDecoratorFirst draw decorator first } fireAreaInvalidated fire area invalidated { fireAreaInvalidated fire area invalidated getDrawBounds get draw bounds } fireAreaInvalidated fire area invalidated Rectangle2D rectangle2 invalidatedArea invalidated area { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this invalidatedArea invalidated area FigureListener figure listener listeners i+1 figureAreaInvalidated figure area invalidated event } } } } fireFigureRequestRemove fire figure request remove { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this getBounds get bounds FigureListener figure listener listeners i+1 figureRequestRemove figure request remove event } } } } fireFigureAdded fire figure added { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this getBounds get bounds FigureListener figure listener listeners i+1 figureAdded figure added event } } } } fireFigureRemoved fire figure removed { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this getBounds get bounds FigureListener figure listener listeners i+1 figureRemoved figure removed event } } } } fireFigureChanged fire figure changed { fireFigureChanged fire figure changed getBounds get bounds } fireFigureChanged fire figure changed Rectangle2D rectangle2 changedArea changed area { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this changedArea changed area FigureListener figure listener listeners i+1 figureChanged figure changed event } } } } fireFigureChanged fire figure changed FigureEvent figure event event { if listenerList listener list getListenerCount get listener count > 0 { listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { FigureListener figure listener listeners i+1 figureChanged figure changed event } } } } fireAttributeChanged fire attribute changed AttributeKey attribute key attribute oldValue old value newValue new value { if listenerList listener list getListenerCount get listener count > 0 { FigureEvent figure event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureListener figure listener { if event == event = new FigureEvent figure event this attribute oldValue old value newValue new value FigureListener figure listener listeners i+1 figureAttributeChanged figure attribute changed event } } } } fireUndoableEditHappened fire undoable edit happened UndoableEdit undoable edit edit { UndoableEditEvent undoable edit event event = if listenerList listener list getListenerCount get listener count > 0 { listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if event == event = new UndoableEditEvent undoable edit event this edit if listeners == UndoableEditListener undoable edit listener { UndoableEditListener undoable edit listener listeners i+1 undoableEditHappened undoable edit happened event } } } } AbstractFigure figure clone { try { AbstractFigure figure that = AbstractFigure figure super clone that listenerList listener list = new EventListenerList event listener list that isConnectorsVisible connectors visible = that courtingConnection courting connection = if this decorator != { that decorator = figure this decorator clone } that } catch CloneNotSupportedException clone not supported { InternalError internal = new InternalError internal getMessage get message initCause init cause } } AbstractFigure figure basicClone basic clone HashMap<Figure hash map< figure figure> oldToNew old to new { } remap HashMap<Figure hash map< figure figure> oldToNew old to new { } Collection<Handle> collection< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles = new LinkedList<Handle> linked list< handle> if detailLevel detail level == 0 { BoxHandleKit box handle kit addBoxHandles add box handles this handles } handles } cursor getCursor get cursor Point2D point2 { if contains { cursor getPredefinedCursor get predefined cursor cursor HAND_CURSOR } else { cursor getDefaultCursor get default cursor } } setBounds set bounds Rectangle2D rectangle2 bounds { setBounds set bounds new Point2D point2 bounds bounds new Point2D point2 bounds + bounds width bounds + bounds height } setBounds set bounds Point2D point2 anchor Point2D point2 { Point2D point2 oldAnchor old anchor = getStartPoint get start point Point2D point2 oldLead old = getEndPoint get point if ! oldAnchor old anchor equals anchor || ! oldLead old equals { willChange will change basicSetBounds basic set bounds anchor changed fireUndoableEditHappened fire undoable edit happened new SetBoundsEdit set bounds edit this oldAnchor old anchor oldLead old anchor } } canConnect can connect { } invalidate { fireAreaInvalidated fire area invalidated getDrawBounds get draw bounds } isChanging changing { changingDepth changing depth != 0 } getChangingDepth get changing depth { changingDepth changing depth } willChange will change { changingDepth++ changing depth++ invalidate } validate { } changed { if changingDepth changing depth <= 1 { validate fireFigureChanged fire figure changed getDrawBounds get draw bounds changingDepth changing depth = 0 } else { changingDepth-- changing depth-- } } transform AffineTransform affine transform tx { willChange will change basicTransform basic transform tx fireUndoableEditHappened fire undoable edit happened new TransformEdit transform edit this tx changed } basicTransform basic transform AffineTransform affine transform ty connector findConnector find connector Point2D point2 ConnectionFigure connection figure prototype { new ChopBoxConnector chop box connector this } includes figure figure { figure == this } figure findFigureInside find figure inside Point2D point2 { contains ? this } connector findCompatibleConnector find compatible connector connector isStart start { new ChopBoxConnector chop box connector this } Collection<Action> collection< action> getActions get actions Point2D point2 { collections emptyList empty list } tool getTool get tool Point2D point2 { } handleMouseClick handle mouse click Point2D point2 MouseEvent mouse event evt DrawingView drawing view view { } handleDrop handle drop Point2D point2 Collection<Figure> collection< figure> droppedFigures dropped figures DrawingView drawing view view { } Point2D point2 getEndPoint get point { Rectangle2D rectangle2 = getBounds get bounds new Point2D point2 + width + height } Point2D point2 getStartPoint get start point { Rectangle2D rectangle2 = getBounds get bounds new Point2D point2 } Dimension2DDouble dimension2 getPreferredSize get preferred size { Rectangle2D rectangle2 = getBounds get bounds new Dimension2DDouble dimension2 width height } remap map oldToNew old to new { } isInteractive interactive { isInteractive interactive } setInteractive set interactive { isInteractive interactive = } isVisible visible { isVisible visible } setVisible set visible newValue new value { if newValue new value != isVisible visible { willChange will change isVisible visible = newValue new value changed } } setConnectorsVisible set connectors visible isVisible visible ConnectionFigure connection figure connection { willChange will change isConnectorsVisible connectors visible = isVisible visible courtingConnection courting connection = connection changed } isConnectorsVisible connectors visible { isConnectorsVisible connectors visible } ConnectionFigure connection figure getCourtingConnection get courting connection { courtingConnection courting connection } Collection<Figure> collection< figure> getDecomposition get decomposition { LinkedList<Figure> linked list< figure> list = new LinkedList<Figure> linked list< figure> list add this list } FontRenderContext font render context getFontRenderContext get font render context { FontRenderContext font render context frc = if frc == { frc = new FontRenderContext font render context new AffineTransform affine transform options isTextAntialiased text antialiased options isFractionalMetrics fractional metrics } frc } requestRemove request remove { fireFigureRequestRemove fire figure request remove } getLayer get layer { 0 } getTooltip get tooltip Point2D point2 { } setDecorator set decorator figure newValue new value { willChange will change decorator = newValue new value if decorator != { decorator basicSetBounds basic set bounds getStartPoint get start point getEndPoint get point } changed } figure getDecorator get decorator { decorator } draw Graphics2D graphics2 { if isDrawDecoratorFirst draw decorator first { drawDecorator draw decorator drawFigure draw figure } else { drawFigure draw figure drawDecorator draw decorator } } drawFigure draw figure Graphics2D graphics2 drawDecorator draw decorator Graphics2D graphics2 { if decorator != { updateDecoratorBounds update decorator bounds decorator draw } } updateDecoratorBounds update decorator bounds { if decorator != { Point2D point2 = getStartPoint get start point Point2D point2 = getEndPoint get point Insets2DDouble insets2 decoratorInsets decorator insets = AttributeKeys attribute keys DECORATOR_INSETS get this -= decoratorInsets decorator insets left -= decoratorInsets decorator insets top += decoratorInsets decorator insets right += decoratorInsets decorator insets bottom decorator basicSetBounds basic set bounds } } Rectangle2D rectangle2 getDrawBounds get draw bounds { Rectangle2D rectangle2 figureDrawBounds figure draw bounds = getFigureDrawBounds get figure draw bounds if decorator != { updateDecoratorBounds update decorator bounds figureDrawBounds figure draw bounds add decorator getDrawBounds get draw bounds } figureDrawBounds figure draw bounds } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds toString to { StringBuilder builder buf = new StringBuilder builder buf append getClass get getName get substring getClass get getName get lastIndexOf last index of ' ' +1 buf append '@' buf append hashCode hash buf toString to } } 