org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt geom * import awt event * import util * import org jhotdraw geom * BezierTool bezier tool AbstractTool tool { private finishWhenMouseReleased finish when mouse released Map<AttributeKey map< attribute key object> attributes private BezierFigure bezier figure prototype BezierFigure bezier figure createdFigure created figure private CompositeEdit composite edit creationEdit creation edit private nodeCountBeforeDrag node count before drag BezierTool bezier tool BezierFigure bezier figure prototype { this prototype } BezierTool bezier tool BezierFigure bezier figure prototype map attributes { this prototype = prototype this attributes = attributes } activate DrawingEditor drawing editor editor { super activate editor getView get view clearSelection clear selection getView get view setCursor set cursor cursor getPredefinedCursor get predefined cursor cursor CROSSHAIR_CURSOR } deactivate DrawingEditor drawing editor editor { super deactivate editor getView get view setCursor set cursor cursor getDefaultCursor get default cursor if createdFigure created figure != { finishCreation finish creation createdFigure created figure createdFigure created figure = getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit } } mousePressed mouse pressed MouseEvent mouse event evt { super mousePressed mouse pressed evt if createdFigure created figure == { finishWhenMouseReleased finish when mouse released = creationEdit creation edit = new CompositeEdit composite edit figur erstellen getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit createdFigure created figure = createFigure create figure createdFigure created figure addNode add node new BezierPath bezier path node getView get view getConstrainer get constrainer constrainPoint constrain point getView get view viewToDrawing view to drawing anchor getDrawing get drawing add createdFigure created figure nodeCountBeforeDrag node count before drag = createdFigure created figure getNodeCount get node count } else { if evt getClickCount get click count == 1 { addPointToFigure add point to figure getView get view getConstrainer get constrainer constrainPoint constrain point getView get view viewToDrawing view to drawing anchor } nodeCountBeforeDrag node count before drag = createdFigure created figure getNodeCount get node count } } BezierFigure bezier figure createFigure create figure { BezierFigure bezier figure = BezierFigure bezier figure prototype clone getEditor get editor applyDefaultAttributesTo apply default attributes to if attributes != { for map Entry<AttributeKey entry< attribute key object> entry attributes entrySet entry set { setAttribute set attribute entry getKey get key entry getValue get value } } } figure getCreatedFigure get created figure { createdFigure created figure } figure getAddedFigure get added figure { createdFigure created figure } addPointToFigure add point to figure Point2D point2 newPoint new point { pointCount point count = createdFigure created figure getNodeCount get node count createdFigure created figure willChange will change if pointCount point count < 2 { createdFigure created figure basicAddNode basic add node new BezierPath bezier path node newPoint new point } else { Point2D point2 endPoint point = createdFigure created figure getEndPoint get point Point2D point2 secondLastPoint second last point = pointCount point count <= 1 ? endPoint point createdFigure created figure getPoint get point pointCount point count - 2 0 if newPoint new point equals endPoint point { } else if pointCount point count > 1 geom lineContainsPoint line contains point newPoint new point newPoint new point secondLastPoint second last point secondLastPoint second last point endPoint point endPoint point 0 9f / getView get view getScaleFactor get scale factor { createdFigure created figure basicSetPoint basic set point pointCount point count - 1 0 newPoint new point } else { createdFigure created figure basicAddNode basic add node new BezierPath bezier path node newPoint new point } } createdFigure created figure changed } mouseClicked mouse clicked MouseEvent mouse event evt { if createdFigure created figure != { switch evt getClickCount get click count { case 1 if createdFigure created figure getNodeCount get node count > 2 { rectangle = new rectangle getView get view drawingToView drawing to view createdFigure created figure getStartPoint get start point grow 2 2 if contains evt getX get evt getY get { createdFigure created figure setClosed set closed finishCreation finish creation createdFigure created figure getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit createdFigure created figure = fireToolDone fire tool done } } break case 2 finishWhenMouseReleased finish when mouse released = finishCreation finish creation createdFigure created figure getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit createdFigure created figure = fireToolDone fire tool done break } } } mouseReleased mouse released MouseEvent mouse event evt { if finishWhenMouseReleased finish when mouse released == TRUE { if createdFigure created figure getNodeCount get node count > 2 { BezierPath bezier path fittedPath fitted path = bezier fitBezierCurve fit bezier curve createdFigure created figure getBezierPath get bezier path 1 createdFigure created figure willChange will change createdFigure created figure basicSetBezierPath basic set bezier path fittedPath fitted path createdFigure created figure changed finishCreation finish creation createdFigure created figure createdFigure created figure = getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit finishWhenMouseReleased finish when mouse released = fireToolDone fire tool done } } else if finishWhenMouseReleased finish when mouse released == { finishWhenMouseReleased finish when mouse released = FALSE } if createdFigure created figure getNodeCount get node count > nodeCountBeforeDrag node count before drag + 1 { createdFigure created figure willChange will change BezierPath bezier path fittedPath fitted path = new BezierPath bezier path for i=nodeCountBeforeDrag i=node count before drag = createdFigure created figure getNodeCount get node count < i++ { fittedPath fitted path add createdFigure created figure getNode get node nodeCountBeforeDrag node count before drag createdFigure created figure basicRemoveNode basic remove node nodeCountBeforeDrag node count before drag } fittedPath fitted path = bezier fitBezierCurve fit bezier curve fittedPath fitted path 1 for BezierPath bezier path node node fittedPath fitted path { createdFigure created figure basicAddNode basic add node node } nodeCountBeforeDrag node count before drag = createdFigure created figure getNodeCount get node count createdFigure created figure changed } } finishCreation finish creation BezierFigure bezier figure createdFigure created figure { getView get view addToSelection add to selection createdFigure created figure } mouseDragged mouse dragged MouseEvent mouse event evt { if createdFigure created figure != { if finishWhenMouseReleased finish when mouse released == { finishWhenMouseReleased finish when mouse released = TRUE } = evt getX get = evt getY get addPointToFigure add point to figure getView get view viewToDrawing view to drawing new point } } mouseMoved mouse moved MouseEvent mouse event evt { } } 