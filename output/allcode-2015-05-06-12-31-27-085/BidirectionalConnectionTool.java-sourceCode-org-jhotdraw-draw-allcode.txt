org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt geom * import awt event * import util * import awt dnd * BidirectionalConnectionTool bidirectional connection tool AbstractTool tool implements FigureListener figure listener { private Map<AttributeKey map< attribute key object> attributes private connector startConnector start connector private connector endConnector connector private connector targetConnector target connector private figure target private ConnectionFigure connection figure connection private splitPoint split point private ConnectionFigure connection figure editedConnection edited connection private figure createdFigure created figure private ConnectionFigure connection figure prototype BidirectionalConnectionTool bidirectional connection tool ConnectionFigure connection figure prototype { this prototype = prototype } BidirectionalConnectionTool bidirectional connection tool ConnectionFigure connection figure prototype Map<AttributeKey map< attribute key object> attributes { this prototype = prototype this attributes = attributes } mouseMoved mouse moved MouseEvent mouse event evt { trackConnectors track connectors evt } mousePressed mouse pressed MouseEvent mouse event evt { super mousePressed mouse pressed evt Point2D point2 ap = viewToDrawing view to drawing anchor setTargetFigure set target figure findConnectionStart find connection start ap getDrawing get drawing if getTargetFigure get target figure != { setStartConnector set start connector findConnector find connector ap target prototype if getStartConnector get start connector != prototype canConnect can connect getTargetFigure get target figure { Point2D point2 = getStartConnector get start connector getAnchor get anchor setConnection set connection createFigure create figure ConnectionFigure connection figure cf = getConnection get connection cf basicSetBounds basic set bounds cf addFigureListener add figure listener this setCreatedFigure set created figure cf } } } mouseDragged mouse dragged awt event MouseEvent mouse event { Point2D point2 = viewToDrawing view to drawing new point getX get getY get if getConnection get connection != { trackConnectors track connectors if getTargetConnector get target connector != { = getTargetConnector get target connector getAnchor get anchor } getConnection get connection setEndPoint set point } else if editedConnection edited connection != { editedConnection edited connection setPoint set point splitPoint split point } } mouseReleased mouse released MouseEvent mouse event { figure = Point2D point2 = viewToDrawing view to drawing new point getX get getY get if getStartConnector get start connector != { = findTarget find target getDrawing get drawing } if != { setEndConnector set connector findConnector find connector prototype if getEndConnector get connector != { CompositeEdit composite edit creationEdit creation edit = new CompositeEdit composite edit verbindung erstellen getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit getDrawing get drawing add getConnection get connection if getConnection get connection canConnect can connect getStartConnector get start connector getOwner get owner getEndConnector get connector getOwner get owner { getConnection get connection setStartConnector set start connector getStartConnector get start connector getConnection get connection setEndConnector set connector getEndConnector get connector } else { getConnection get connection setStartConnector set start connector getEndConnector get connector getConnection get connection setEndConnector set connector getStartConnector get start connector } getConnection get connection updateConnection update connection getConnection get connection removeFigureListener remove figure listener this getDrawing get drawing fireUndoableEditHappened fire undoable edit happened creationEdit creation edit } } else if getConnection get connection != { getDrawing get drawing remove getConnection get connection } setConnection set connection setStartConnector set start connector setEndConnector set connector setCreatedFigure set created figure fireToolDone fire tool done } activate DrawingEditor drawing editor editor { super activate editor getView get view clearSelection clear selection } deactivate DrawingEditor drawing editor editor { super deactivate editor if getTargetFigure get target figure != { getTargetFigure get target figure setConnectorsVisible set connectors visible } } ConnectionFigure connection figure createFigure create figure { ConnectionFigure connection figure = ConnectionFigure connection figure prototype clone getEditor get editor applyDefaultAttributesTo apply default attributes to if attributes != { for map Entry<AttributeKey entry< attribute key object> entry attributes entrySet entry set { setAttribute set attribute entry getKey get key entry getValue get value } } } figure findSource find source Point2D point2 drawing drawing { findConnectableFigure find connectable figure drawing } figure findTarget find target Point2D point2 drawing drawing { figure target = findConnectableFigure find connectable figure drawing figure start = getStartConnector get start connector getOwner get owner if target != getConnection get connection != target canConnect can connect getConnection get connection canConnect can connect start target || getConnection get connection canConnect can connect target start { target } } ConnectionFigure connection figure findConnection find connection Point2D point2 drawing drawing { for figure drawing getFiguresFrontToBack get figures front to back { figure fInside inside = findFigureInside find figure inside if fInside inside != fInside inside instanceof ConnectionFigure connection figure { ConnectionFigure connection figure fInside inside } } } private setConnection set connection ConnectionFigure connection figure newConnection new connection { connection = newConnection new connection } ConnectionFigure connection figure getConnection get connection { connection } trackConnectors track connectors MouseEvent mouse event { Point2D point2 = viewToDrawing view to drawing new point getX get getY get figure = if getStartConnector get start connector == { = findSource find source getDrawing get drawing } else { = findTarget find target getDrawing get drawing } if != getTargetFigure get target figure { if getTargetFigure get target figure != { getTargetFigure get target figure setConnectorsVisible set connectors visible } setTargetFigure set target figure if getStartConnector get start connector != { if getTargetFigure get target figure != prototype canConnect can connect getStartConnector get start connector getOwner get owner getTargetFigure get target figure || prototype canConnect can connect getTargetFigure get target figure getStartConnector get start connector getOwner get owner { getTargetFigure get target figure setConnectorsVisible set connectors visible getConnection get connection } } else { if getTargetFigure get target figure != prototype canConnect can connect getTargetFigure get target figure { getTargetFigure get target figure setConnectorsVisible set connectors visible getConnection get connection } } } connector cc = if != { cc = findConnector find connector prototype } if cc != getTargetConnector get target connector { setTargetConnector set target connector cc } } draw Graphics2D graphics2 { if createdFigure created figure != { createdFigure created figure draw } } private connector findConnector find connector Point2D point2 figure target ConnectionFigure connection figure { target findConnector find connector } figure findConnectionStart find connection start Point2D point2 drawing drawing { figure target = findConnectableFigure find connectable figure drawing if target != target canConnect can connect { target } } private figure findConnectableFigure find connectable figure Point2D point2 drawing drawing { drawing findFigureExcept find figure createdFigure created figure } private setStartConnector set start connector connector newStartConnector new start connector { startConnector start connector = newStartConnector new start connector } connector getStartConnector get start connector { startConnector start connector } private setEndConnector set connector connector newEndConnector new connector { endConnector connector = newEndConnector new connector } connector getEndConnector get connector { endConnector connector } private setTargetConnector set target connector connector newTargetConnector new target connector { targetConnector target connector = newTargetConnector new target connector } connector getTargetConnector get target connector { targetConnector target connector } private setTargetFigure set target figure figure newTarget new target { target = newTarget new target } figure getTargetFigure get target figure { target } figure getCreatedFigure get created figure { createdFigure created figure } private setCreatedFigure set created figure figure newCreatedFigure new created figure { createdFigure created figure = newCreatedFigure new created figure } figureAreaInvalidated figure area invalidated FigureEvent figure event evt { fireAreaInvalidated fire area invalidated evt getInvalidatedArea get invalidated area } figureAdded figure added FigureEvent figure event { } figureChanged figure changed FigureEvent figure event { } figureRemoved figure removed FigureEvent figure event { } figureRequestRemove figure request remove FigureEvent figure event { } figureAttributeChanged figure attribute changed FigureEvent figure event { } } 