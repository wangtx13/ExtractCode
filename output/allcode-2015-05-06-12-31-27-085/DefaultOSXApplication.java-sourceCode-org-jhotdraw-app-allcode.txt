org jhotdraw app import org jhotdraw app action OSXDropOnDockAction drop dock action import ch randelshofer quaqua * import org jhotdraw util * import org jhotdraw util prefs * import util * import util prefs * import awt event * import beans * import awt * import javax swing * import * import org jhotdraw app action AboutAction about action import org jhotdraw app action actions import org jhotdraw app action ClearRecentFilesAction clear recent files action import org jhotdraw app action CloseAction close action import org jhotdraw app action CopyAction copy action import org jhotdraw app action CutAction cut action import org jhotdraw app action DeleteAction delete action import org jhotdraw app action DuplicateAction duplicate action import org jhotdraw app action ExitAction exit action import org jhotdraw app action ExportAction export action import org jhotdraw app action FocusAction focus action import org jhotdraw app action MaximizeAction maximize action import org jhotdraw app action MinimizeAction minimize action import org jhotdraw app action NewAction new action import org jhotdraw app action OSXTogglePaletteAction toggle palette action import org jhotdraw app action OpenAction open action import org jhotdraw app action OpenRecentAction open recent action import org jhotdraw app action PasteAction paste action import org jhotdraw app action RedoAction redo action import org jhotdraw app action SaveAction save action import org jhotdraw app action SaveAsAction save action import org jhotdraw app action SelectAllAction select all action import org jhotdraw app action UndoAction undo action DefaultOSXApplication default application AbstractApplication application { private OSXPaletteHandler palette handler paletteHandler palette handler private project currentProject current project private preferences prefs private LinkedList<Action> linked list< action> paletteActions palette actions DefaultOSXApplication default application { } init { super init prefs = preferences userNodeForPackage user node for getModel get model == ? getClass get getModel get model getClass get initLookAndFeel init look and feel paletteHandler palette handler = new OSXPaletteHandler palette handler this initLabels init labels initApplicationActions init application actions paletteActions palette actions = new LinkedList<Action> linked list< action> initPalettes init palettes paletteActions palette actions initScreenMenuBar init screen menu bar } launch args { setProperty set property apple awt graphics UseQuartz use quartz super launch args } initLookAndFeel init look and feel { setProperty set property apple laf useScreenMenuBar use screen menu bar setProperty set property com apple macos useScreenMenuBar use screen menu bar try { UIManager manager setLookAndFeel set look and feel QuaquaManager quaqua manager getLookAndFeelClassName get look and feel } catch { printStackTrace stack trace } } initApplicationActions init application actions { ApplicationModel application model mo = getModel get model mo putAction put action AboutAction about action new AboutAction about action this mo putAction put action ExitAction exit action new ExitAction exit action this mo putAction put action OSXDropOnDockAction drop dock action new OSXDropOnDockAction drop dock action this mo putAction put action NewAction new action new NewAction new action this mo putAction put action OpenAction open action new OpenAction open action this mo putAction put action ClearRecentFilesAction clear recent files action new ClearRecentFilesAction clear recent files action this mo putAction put action SaveAction save action new SaveAction save action this mo putAction put action SaveAsAction save action new SaveAsAction save action this mo putAction put action CloseAction close action new CloseAction close action this mo putAction put action UndoAction undo action new UndoAction undo action this mo putAction put action RedoAction redo action new RedoAction redo action this mo putAction put action CutAction cut action new CutAction cut action mo putAction put action CopyAction copy action new CopyAction copy action mo putAction put action PasteAction paste action new PasteAction paste action mo putAction put action DeleteAction delete action new DeleteAction delete action mo putAction put action DuplicateAction duplicate action new DuplicateAction duplicate action mo putAction put action SelectAllAction select all action new SelectAllAction select all action mo putAction put action MaximizeAction maximize action new MaximizeAction maximize action this mo putAction put action MinimizeAction minimize action new MinimizeAction minimize action this } initProjectActions init project actions project { putAction put action FocusAction focus action new FocusAction focus action } addPalette add palette window palette { paletteHandler palette handler addPalette add palette palette } removePalette remove palette window palette { paletteHandler palette handler removePalette remove palette palette } show project { if ! isShowing showing { setShowing set showing = getFile get JFrame frame = new JFrame frame title if == { title = labels getString get unnamedFile unnamed } else { title = getName get } setTitle set title labels getFormatted get formatted frameTitle frame title title getName get getMultipleOpenId get multiple open setDefaultCloseOperation set default close operation JFrame frame DO_NOTHING_ON_CLOSE setPreferredSize set preferred size new dimension 400 400 PreferencesUtil preferences util installFramePrefsHandler install frame prefs handler prefs project point = getLocation get location moved { moved = for iterator i=projects iterator hasNext has next { project aProject project = project next if aProject project != aProject project isShowing showing SwingUtilities swing utilities getWindowAncestor get window ancestor aProject project getComponent get component getLocation get location equals { += 22 += 22 moved = break } } } while moved setLocation set location paletteHandler palette handler add addWindowListener add window listener new WindowAdapter window adapter { windowClosing window closing WindowEvent window event evt { setCurrentProject set current project getModel get model getAction get action CloseAction close action actionPerformed action performed new ActionEvent action event ActionEvent action event ACTION_PERFORMED windowClosing window closing } } addPropertyChangeListener add property change listener new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { = evt getPropertyName get property if equals hasUnsavedChanges has unsaved changes { getRootPane get root pane putClientProperty put client property windowModified window modified new hasUnsavedChanges has unsaved changes } else if equals { setTitle set title getFile get == ? unnamed getFile get getName get } } } setJMenuBar set menu bar createMenuBar create menu bar getContentPane get content pane add getComponent get component setVisible set visible } } hide project { if isShowing showing { JFrame frame = JFrame frame SwingUtilities swing utilities getWindowAncestor get window ancestor getComponent get component setVisible set visible remove getComponent get component paletteHandler palette handler remove dispose } } JMenuBar menu bar createMenuBar create menu bar project { ResourceBundleUtil resource bundle util labels = ResourceBundleUtil resource bundle util getLAFBundle get bundle org jhotdraw app labels ApplicationModel application model model = getModel get model JMenuBar menu bar mb = new JMenuBar menu bar JMenu menu JMenuItem menu item mi JMenu menu openRecentMenu open recent menu = new JMenu menu labels configureMenu configure menu mi = add model getAction get action NewAction new action mi setIcon set icon mi = add model getAction get action OpenAction open action mi setIcon set icon openRecentMenu open recent menu = new JMenu menu labels configureMenu configure menu openRecentMenu open recent menu openRecent open recent openRecentMenu open recent menu add model getAction get action ClearRecentFilesAction clear recent files action updateOpenRecentMenu update open recent menu openRecentMenu open recent menu add openRecentMenu open recent menu addSeparator add separator mi = add model getAction get action CloseAction close action mi setIcon set icon mi = add model getAction get action SaveAction save action mi setIcon set icon mi = add model getAction get action SaveAsAction save action mi setIcon set icon if model getAction get action ExportAction export action != { mi = add model getAction get action ExportAction export action mi setIcon set icon } mb add = new JMenu menu labels configureMenu configure menu edit mi = add model getAction get action UndoAction undo action mi setIcon set icon mi = add model getAction get action RedoAction redo action mi setIcon set icon addSeparator add separator mi = add model getAction get action CutAction cut action mi setIcon set icon mi = add model getAction get action CopyAction copy action mi setIcon set icon mi = add model getAction get action PasteAction paste action mi setIcon set icon mi = add model getAction get action DuplicateAction duplicate action mi setIcon set icon mi = add model getAction get action DeleteAction delete action mi setIcon set icon addSeparator add separator mi = add model getAction get action SelectAllAction select all action mi setIcon set icon mb add for JMenu menu mm model createMenus create menus this { mb add mm } = new JMenu menu JMenu menu windowMenu window menu = labels configureMenu configure menu window mi = add model getAction get action MinimizeAction minimize action mi setIcon set icon mi = add model getAction get action MaximizeAction maximize action mi setIcon set icon addSeparator add separator for project projects { if getAction get action FocusAction focus action != { windowMenu window menu add getAction get action FocusAction focus action } } if paletteActions palette actions size > 0 { addSeparator add separator for action paletteActions palette actions { JCheckBoxMenuItem check box menu item cbmi = new JCheckBoxMenuItem check box menu item actions configureJCheckBoxMenuItem configure check box menu item cbmi cbmi setIcon set icon add cbmi } } mb add addPropertyChangeListener add property change listener new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { = evt getPropertyName get property if == projectCount project count { if == || projects contains { JMenu menu = windowMenu window menu removeAll remove all add getModel get model getAction get action MinimizeAction minimize action add getModel get model getAction get action MaximizeAction maximize action addSeparator add separator for iterator i=projects iterator hasNext has next { project = project next if getAction get action FocusAction focus action != { add getAction get action FocusAction focus action } } if paletteActions palette actions size > 0 { addSeparator add separator for action paletteActions palette actions { JCheckBoxMenuItem check box menu item cbmi = new JCheckBoxMenuItem check box menu item actions configureJCheckBoxMenuItem configure check box menu item cbmi cbmi setIcon set icon add cbmi } } } else { removePropertyChangeListener remove property change listener this } } else if == recentFiles recent files { updateOpenRecentMenu update open recent menu openRecentMenu open recent menu } } } mb } private updateOpenRecentMenu update open recent menu JMenu menu openRecentMenu open recent menu { if openRecentMenu open recent menu getItemCount get item count > 0 { JMenuItem menu item clearRecentFilesItem clear recent files item = JMenuItem menu item openRecentMenu open recent menu getItem get item openRecentMenu open recent menu getItemCount get item count - 1 openRecentMenu open recent menu removeAll remove all for recentFiles recent files { openRecentMenu open recent menu add new OpenRecentAction open recent action DefaultOSXApplication default application this } if recentFiles recent files size > 0 { openRecentMenu open recent menu addSeparator add separator } openRecentMenu open recent menu add clearRecentFilesItem clear recent files item } } project getCurrentProject get current project { currentProject current project } setCurrentProject set current project project newValue new value { project oldValue old value = currentProject current project currentProject current project = newValue new value firePropertyChange fire property change currentProject current project oldValue old value newValue new value } initScreenMenuBar init screen menu bar { ApplicationModel application model model = getModel get model net roydesign app application mrjapp = net roydesign app application getInstance get instance mrjapp setFramelessJMenuBar set frameless menu bar createMenuBar create menu bar mrjapp getAboutJMenuItem get about menu item setAction set action model getAction get action AboutAction about action mrjapp getQuitJMenuItem get quit menu item setAction set action model getAction get action ExitAction exit action mrjapp addOpenDocumentListener add open document listener model getAction get action OSXDropOnDockAction drop dock action } initPalettes init palettes LinkedList<Action> linked list< action> paletteActions palette actions { LinkedList<JToolBar> linked list< tool bar> toolBars tool bars = new LinkedList<JToolBar> linked list< tool bar> getModel get model createToolBars create tool bars this JToolBar tool bar stb = new JToolBar tool bar stb setName set labels getString get standardToolBarTitle standard tool bar title addStandardActionsTo add standard actions to stb toolBars tool bars addFirst add first stb i=0 x=0 for JToolBar tool bar tb toolBars tool bars { i++ tb setFloatable set floatable tb setOrientation set orientation JToolBar tool bar VERTICAL tb setFocusable set focusable JFrame frame = new JFrame frame setFocusable set focusable setResizable set resizable getContentPane get content pane setLayout set layout new BorderLayout border layout getContentPane get content pane add tb BorderLayout border layout CENTER setAlwaysOnTop set always top setUndecorated set undecorated getRootPane get root pane setWindowDecorationStyle set window decoration style JRootPane root pane FRAME getRootPane get root pane setFont set font new font lucida grande font PLAIN 11 getRootPane get root pane putClientProperty put client property quaqua RootPane root pane isVertical vertical FALSE getRootPane get root pane putClientProperty put client property quaqua RootPane root pane isPalette palette TRUE setJMenuBar set menu bar createMenuBar create menu bar setFocusableWindowState set focusable window state PreferencesUtil preferences util installPalettePrefsHandler install palette prefs handler prefs toolbar +i += getWidth get width paletteActions palette actions add new OSXTogglePaletteAction toggle palette action this tb getName get addPalette add palette } } addStandardActionsTo add standard actions to JToolBar tool bar tb { JButton button ApplicationModel application model mo = getModel get model = tb add mo getAction get action NewAction new action setFocusable set focusable = tb add mo getAction get action OpenAction open action setFocusable set focusable = tb add mo getAction get action SaveAction save action tb addSeparator add separator = tb add mo getAction get action UndoAction undo action setFocusable set focusable = tb add mo getAction get action RedoAction redo action setFocusable set focusable tb addSeparator add separator = tb add mo getAction get action CutAction cut action setFocusable set focusable = tb add mo getAction get action CopyAction copy action setFocusable set focusable = tb add mo getAction get action PasteAction paste action setFocusable set focusable } isSharingToolsAmongProjects sharing tools among projects { } component getComponent get component { } } 