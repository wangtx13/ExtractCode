org jhotdraw app action import awt event * import beans * import org jhotdraw app application import org jhotdraw app project ToggleProjectPropertyAction toggle project property action AbstractProjectAction project action { private propertyName property private parameterClass private selectedPropertyValue selected property value private deselectedPropertyValue deselected property value private setterName setter private getterName getter private PropertyChangeListener property change listener projectListener project listener = new PropertyChangeListener property change listener { propertyChange property change PropertyChangeEvent property change event evt { if evt getPropertyName get property == propertyName property { updateSelectedState update selected state } } } ToggleProjectPropertyAction toggle project property action application app propertyName property { this app propertyName property TYPE } ToggleProjectPropertyAction toggle project property action application app propertyName property propertyClass property selectedPropertyValue selected property value deselectedPropertyValue deselected property value { super app this propertyName property = propertyName property this parameterClass = new { propertyClass property } this selectedPropertyValue selected property value = selectedPropertyValue selected property value this deselectedPropertyValue deselected property value = deselectedPropertyValue deselected property value setterName setter = set +Character + character toUpperCase to upper case propertyName property charAt char 0 + propertyName property substring 1 getterName getter = propertyClass property == TYPE || propertyClass property == ? get + character toUpperCase to upper case propertyName property charAt char 0 + propertyName property substring 1 updateSelectedState update selected state } actionPerformed action performed ActionEvent action event evt { project = getCurrentProject get current project value = getCurrentValue get current value newValue new value = value == selectedPropertyValue selected property value || value != selectedPropertyValue selected property value != value equals selectedPropertyValue selected property value ? deselectedPropertyValue deselected property value selectedPropertyValue selected property value try { getClass get getMethod get setterName setter parameterClass new {newValue} {new value} } catch throwable { InternalError internal = new InternalError internal no +setterName+ +setter name+ +p initCause init cause } } private getCurrentValue get current value { project = getCurrentProject get current project if != { try { getClass get getMethod get getterName getter } catch throwable { InternalError internal = new InternalError internal no +getterName+ +getter name+ +p initCause init cause } } } installProjectListeners install project listeners project { super installProjectListeners install project listeners addPropertyChangeListener add property change listener projectListener project listener updateSelectedState update selected state } uninstallProjectListeners uninstall project listeners project { super uninstallProjectListeners uninstall project listeners removePropertyChangeListener remove property change listener projectListener project listener } private updateSelectedState update selected state { isSelected selected = project = getCurrentProject get current project if != { try { value = getClass get getMethod get getterName getter isSelected selected = value == selectedPropertyValue selected property value || value != selectedPropertyValue selected property value != value equals selectedPropertyValue selected property value } catch throwable { InternalError internal = new InternalError internal no +getterName+ +getter name+ +p initCause init cause } } putValue put value actions SELECTED_KEY isSelected selected } } 