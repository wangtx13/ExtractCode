org jhotdraw samples svg figures import awt geom * import * import util * import org jhotdraw draw * import org jhotdraw samples svg * import org jhotdraw xml * SVGGroup group GroupFigure group figure implements SVGFigure figure { SVGGroup group { SVGUtil util setDefaults set defaults this } @Override @ LinkedList<Handle> linked list< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles if detailLevel detail level == 0 { handles = LinkedList<Handle> linked list< handle> super createHandles create handles detailLevel detail level handles add new RotateHandle rotate handle this } else { handles = new LinkedList<Handle> linked list< handle> } handles } @Override @ read DOMInput dom input IOException { readAttributes read attributes for i=0 = getElementCount get element count < i++ { openElement open element = getTagName get tag if equals pattern { closeElement close element } else if equals color-profile { closeElement close element } else if equals defs { closeElement close element } else if equals use { closeElement close element } else if equals script { closeElement close element } else if equals filter { closeElement close element } else if equals title { closeElement close element } else if equals desc { closeElement close element } else if equals switch { closeElement close element } else if equals radialGradient radial gradient { closeElement close element } else if equals linearGradient linear gradient { closeElement close element } else { closeElement close element = readObject read if instanceof SVGDrawing drawing { SVGGroup group = new SVGGroup group willChange will change for figure child SVGDrawing drawing getFigures get figures { basicAdd basic add child } changed if ! isEmpty empty { add } } else if instanceof SVGFigure figure { if ! SVGFigure figure isEmpty empty { add SVGFigure figure } } else { new IOException unexpected child +f } } } AffineTransform affine transform tx = SVGUtil util getTransform get transform transform for figure child getChildren get children { child basicTransform basic transform tx } invalidateBounds invalidate bounds } readAttributes read attributes DOMInput dom input IOException { SVGUtil util readAttributes read attributes this } @Override @ write DOMOutput dom output out IOException { for figure child getChildren get children { out writeObject write child } writeAttributes write attributes out } writeAttributes write attributes DOMOutput dom output out IOException { SVGUtil util writeAttributes write attributes this out } isEmpty empty { getChildCount get child count == 0 } toString to { StringBuilder builder buf = new StringBuilder builder buf append getClass get getName get substring getClass get getName get lastIndexOf last index of ' ' +1 buf append '@' buf append hashCode hash if getChildCount get child count > 0 { buf append ' ' for Iterator<Figure> iterator< figure> = getChildren get children iterator hasNext has next { figure child = next buf append child if hasNext has next { buf append ' ' } } buf append ' ' } buf toString to } } 