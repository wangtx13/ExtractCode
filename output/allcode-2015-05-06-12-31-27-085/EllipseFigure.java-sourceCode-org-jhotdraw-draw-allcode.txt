org jhotdraw draw import org jhotdraw geom geom import org jhotdraw util * import awt * import awt geom * import org jhotdraw draw AttributeKeys attribute keys * EllipseFigure ellipse figure AttributedFigure attributed figure { private Ellipse2D ellipse2 ellipse EllipseFigure ellipse figure { this 0 0 0 0 } EllipseFigure ellipse figure width height { ellipse = new Ellipse2D ellipse2 width height setAttributeEnabled set attribute enabled TEXT_COLOR } connector findConnector find connector Point2D point2 ConnectionFigure connection figure prototype { new ChopEllipseConnector chop ellipse connector this } connector findCompatibleConnector find compatible connector connector isStartConnector start connector { new ChopEllipseConnector chop ellipse connector this } Rectangle2D rectangle2 getBounds get bounds { Rectangle2D rectangle2 ellipse getBounds2D get bounds2 } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds { Rectangle2D rectangle2 = Rectangle2D rectangle2 ellipse getBounds2D get bounds2 grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this geom grow grow grow } drawFill draw fill Graphics2D graphics2 { Ellipse2D ellipse2 = Ellipse2D ellipse2 ellipse clone grow = AttributeKeys attribute keys getPerpendicularFillGrowth get perpendicular fill growth this -= grow -= grow width += grow * 2 height += grow * 2 if width > 0 height > 0 { fill } } drawStroke draw stroke Graphics2D graphics2 { Ellipse2D ellipse2 = Ellipse2D ellipse2 ellipse clone grow = AttributeKeys attribute keys getPerpendicularDrawGrowth get perpendicular draw growth this -= grow -= grow width += grow * 2 height += grow * 2 if width > 0 height > 0 { draw } } contains Point2D point2 { Ellipse2D ellipse2 = Ellipse2D ellipse2 ellipse clone grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this -= grow -= grow width += grow * 2 height += grow * 2 contains } basicSetBounds basic set bounds Point2D point2 anchor Point2D point2 { ellipse = math min anchor ellipse = math min anchor ellipse width = math max 0 1 math - anchor ellipse height = math max 0 1 math - anchor } basicTransform basic transform AffineTransform affine transform tx { Point2D point2 anchor = getStartPoint get start point Point2D point2 = getEndPoint get point basicSetBounds basic set bounds Point2D point2 tx transform anchor anchor Point2D point2 tx transform } EllipseFigure ellipse figure clone { EllipseFigure ellipse figure that = EllipseFigure ellipse figure super clone that ellipse = Ellipse2D ellipse2 this ellipse clone that } restoreTo restore to geometry { Ellipse2D ellipse2 = Ellipse2D ellipse2 geometry ellipse = ellipse = ellipse width = width ellipse height = height } getRestoreData get restore data { ellipse clone } } 