net n3 nanoxml import IOException import CharArrayReader char reader import reader import util enumeration import util properties import util vector StdXMLParser std xml parser implements IXMLParser xml parser { private IXMLBuilder xml builder builder private IXMLReader xml reader reader private IXMLEntityResolver xml entity resolver entityResolver entity resolver private IXMLValidator xml validator validator StdXMLParser std xml parser { this builder = this validator = this reader = this entityResolver entity resolver = new XMLEntityResolver xml entity resolver } finalize throwable { this builder = this reader = this entityResolver entity resolver = this validator = super finalize } setBuilder set builder IXMLBuilder xml builder builder { this builder = builder } IXMLBuilder xml builder getBuilder get builder { this builder } setValidator set validator IXMLValidator xml validator validator { this validator = validator } IXMLValidator xml validator getValidator get validator { this validator } setResolver set resolver IXMLEntityResolver xml entity resolver resolver { this entityResolver entity resolver = resolver } IXMLEntityResolver xml entity resolver getResolver get resolver { this entityResolver entity resolver } setReader set reader IXMLReader xml reader reader { this reader = reader } IXMLReader xml reader getReader get reader { this reader } parse XMLException xml { try { this builder startBuilding start building this reader getSystemID get systemid this reader getLineNr get line nr this scanData scan data this builder getResult get result } catch XMLException xml { } catch { XMLException xml = new XMLException xml initCause init cause } } scanData scan data { while ! this reader atEOF this builder getResult get result == { = XMLUtil xml util read this reader ' ' char ch = charAt char 0 if ch == ' ' { XMLUtil xml util processEntity process entity this reader this entityResolver entity resolver continue } switch ch { case '<' this scanSomeTag scan some tag new properties break case ' ' case '\t' case '\r' case '\n' break default XMLUtil xml util errorInvalidInput invalid input reader getSystemID get systemid reader getLineNr get line nr ` + ch + ' 0x + integer toHexString to hex ch + ' ' } } } scanSomeTag scan some tag allowCDATA allow defaultNamespace default namespace properties namespaces { = XMLUtil xml util read this reader ' ' char ch = charAt char 0 if ch == ' ' { XMLUtil xml util errorUnexpectedEntity unexpected entity reader getSystemID get systemid reader getLineNr get line nr } switch ch { case '?' this processPI process break case '!' this processSpecialTag process special tag allowCDATA allow break default this reader unread ch this processElement process element defaultNamespace default namespace namespaces } } processPI process { XMLUtil xml util skipWhitespace skip whitespace this reader target = XMLUtil xml util scanIdentifier scan identifier this reader XMLUtil xml util skipWhitespace skip whitespace this reader reader reader = new PIReader reader this reader if ! target equalsIgnoreCase equals ignore case xml { this builder newProcessingInstruction new processing instruction target reader } reader close } processSpecialTag process special tag allowCDATA allow { = XMLUtil xml util read this reader ' ' char ch = charAt char 0 if ch == ' ' { XMLUtil xml util errorUnexpectedEntity unexpected entity reader getSystemID get systemid reader getLineNr get line nr } switch ch { case ' ' if allowCDATA allow { this processCDATA process } else { XMLUtil xml util errorUnexpectedCDATA unexpected reader getSystemID get systemid reader getLineNr get line nr } case 'D' ' d' this processDocType process doc type case '-' XMLUtil xml util skipComment skip comment this reader } } processCDATA process { if ! XMLUtil xml util checkLiteral check literal this reader CDATA { XMLUtil xml util errorExpectedInput expected input reader getSystemID get systemid reader getLineNr get line nr <! CDATA } this validator PCDataAdded data added this reader getSystemID get systemid this reader getLineNr get line nr reader reader = new CDATAReader reader this reader this builder addPCData add data reader this reader getSystemID get systemid this reader getLineNr get line nr reader close } processDocType process doc type { if ! XMLUtil xml util checkLiteral check literal this reader OCTYPE { XMLUtil xml util errorExpectedInput expected input reader getSystemID get systemid reader getLineNr get line nr <!DOCTYPE <! } XMLUtil xml util skipWhitespace skip whitespace this reader systemid = StringBuffer buffer publicid = new StringBuffer buffer rootElement root element = XMLUtil xml util scanIdentifier scan identifier this reader XMLUtil xml util skipWhitespace skip whitespace this reader char ch = this reader read if ch == 'P' ' p' { systemid = XMLUtil xml util scanPublicID scan publicid publicid reader XMLUtil xml util skipWhitespace skip whitespace this reader ch = this reader read } else if ch == 'S' ' s' { systemid = XMLUtil xml util scanSystemID scan systemid reader XMLUtil xml util skipWhitespace skip whitespace this reader ch = this reader read } if ch == ' ' { this validator parseDTD parse publicid toString to this reader this entityResolver entity resolver XMLUtil xml util skipWhitespace skip whitespace this reader ch = this reader read } if ch != '>' { XMLUtil xml util errorExpectedInput expected input reader getSystemID get systemid reader getLineNr get line nr `>' } if { if systemid != { reader reader = this reader openStream open stream publicid toString to systemid this reader startNewStream start new stream reader this reader setSystemID set systemid systemid this reader setPublicID set publicid publicid toString to this validator parseDTD parse publicid toString to this reader this entityResolver entity resolver } } } processElement process element defaultNamespace default namespace properties namespaces { fullName full = XMLUtil xml util scanIdentifier scan identifier this reader = fullName full XMLUtil xml util skipWhitespace skip whitespace this reader prefix = colonIndex colon index = indexOf index of ' ' if colonIndex colon index > 0 { prefix = substring 0 colonIndex colon index = substring colonIndex colon index + 1 } vector attrNames attr names = new vector vector attrValues attr values = new vector vector attrTypes attr types = new vector this validator elementStarted element started fullName full this reader getSystemID get systemid this reader getLineNr get line nr char ch for { ch = this reader read if ch == '/' || ch == '>' { break } this reader unread ch this processAttribute process attribute attrNames attr names attrValues attr values attrTypes attr types XMLUtil xml util skipWhitespace skip whitespace this reader } properties extraAttributes extra attributes = new properties this validator elementAttributesProcessed element attributes processed fullName full extraAttributes extra attributes this reader getSystemID get systemid this reader getLineNr get line nr enumeration enm = extraAttributes extra attributes keys while enm hasMoreElements has more elements { key = enm nextElement next element value = extraAttributes extra attributes getProperty get property key attrNames attr names addElement add element key attrValues attr values addElement add element value attrTypes attr types addElement add element CDATA } for = 0 < attrNames attr names size i++ { key = attrNames attr names elementAt element value = attrValues attr values elementAt element type = attrTypes attr types elementAt element if key equals xmlns { defaultNamespace default namespace = value } else if key startsWith starts with xmlns { namespaces put key substring 6 value } } if prefix == { this builder startElement start element prefix defaultNamespace default namespace this reader getSystemID get systemid this reader getLineNr get line nr } else { this builder startElement start element prefix namespaces getProperty get property prefix this reader getSystemID get systemid this reader getLineNr get line nr } for = 0 < attrNames attr names size i++ { key = attrNames attr names elementAt element if key startsWith starts with xmlns { continue } value = attrValues attr values elementAt element type = attrTypes attr types elementAt element colonIndex colon index = key indexOf index of ' ' if colonIndex colon index > 0 { attPrefix att prefix = key substring 0 colonIndex colon index key = key substring colonIndex colon index + 1 this builder addAttribute add attribute key attPrefix att prefix namespaces getProperty get property attPrefix att prefix value type } else { this builder addAttribute add attribute key value type } } if prefix == { this builder elementAttributesProcessed element attributes processed prefix defaultNamespace default namespace } else { this builder elementAttributesProcessed element attributes processed prefix namespaces getProperty get property prefix } if ch == '/' { if this reader read != '>' { XMLUtil xml util errorExpectedInput expected input reader getSystemID get systemid reader getLineNr get line nr `>' } this validator elementEnded element ended this reader getSystemID get systemid this reader getLineNr get line nr if prefix == { this builder endElement element prefix defaultNamespace default namespace } else { this builder endElement element prefix namespaces getProperty get property prefix } } StringBuffer buffer buffer = new StringBuffer buffer 16 for { buffer setLength set length 0 for { XMLUtil xml util skipWhitespace skip whitespace this reader buffer = XMLUtil xml util read this reader ' ' if charAt char 0 == ' ' charAt char 1 != '#' { XMLUtil xml util processEntity process entity this reader this entityResolver entity resolver } else { break } } if charAt char 0 == '<' { = XMLUtil xml util read this reader '\0' if charAt char 0 == '/' { XMLUtil xml util skipWhitespace skip whitespace this reader = XMLUtil xml util scanIdentifier scan identifier this reader if ! equals fullName full { XMLUtil xml util errorWrongClosingTag wrong closing tag reader getSystemID get systemid reader getLineNr get line nr } XMLUtil xml util skipWhitespace skip whitespace this reader if this reader read != '>' { XMLUtil xml util errorClosingTagNotEmpty closing tag not empty reader getSystemID get systemid reader getLineNr get line nr } this validator elementEnded element ended fullName full this reader getSystemID get systemid this reader getLineNr get line nr if prefix == { this builder endElement element prefix defaultNamespace default namespace } else { this builder endElement element prefix namespaces getProperty get property prefix } break } else { this reader unread charAt char 0 this scanSomeTag scan some tag defaultNamespace default namespace properties namespaces clone } } else { if charAt char 0 == ' ' { ch = XMLUtil xml util processCharLiteral process char literal buffer append ch } else { reader unread charAt char 0 } this validator PCDataAdded data added this reader getSystemID get systemid this reader getLineNr get line nr reader = new ContentReader content reader this reader this entityResolver entity resolver buffer toString to this builder addPCData add data this reader getSystemID get systemid this reader getLineNr get line nr close } } } processAttribute process attribute vector attrNames attr names vector attrValues attr values vector attrTypes attr types { key = XMLUtil xml util scanIdentifier scan identifier this reader XMLUtil xml util skipWhitespace skip whitespace this reader if ! XMLUtil xml util read this reader ' ' equals = { XMLUtil xml util errorExpectedInput expected input reader getSystemID get systemid reader getLineNr get line nr `=' } XMLUtil xml util skipWhitespace skip whitespace this reader value = XMLUtil xml util scanString scan this reader ' ' this entityResolver entity resolver attrNames attr names addElement add element key attrValues attr values addElement add element value attrTypes attr types addElement add element CDATA this validator attributeAdded attribute added key value this reader getSystemID get systemid this reader getLineNr get line nr } } 