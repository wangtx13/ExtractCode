org jhotdraw draw import org jhotdraw xml DOMInput dom input import org jhotdraw xml DOMOutput dom output import org jhotdraw xml DOMStorable dom storable import util * import awt * import awt geom * import org jhotdraw geom * SlantedLiner slanted liner implements liner DOMStorable dom storable { private slantSize slant size SlantedLiner slanted liner { this 20 } SlantedLiner slanted liner slantSize slant size { this slantSize slant size = slantSize slant size } Collection<Handle> collection< handle> createHandles create handles BezierPath bezier path path { } lineout ConnectionFigure connection figure figure { BezierPath bezier path path = LineConnectionFigure line connection figure figure getBezierPath get bezier path connector start = figure getStartConnector get start connector connector = figure getEndConnector get connector if start == || == || path == { } while path size < 4 { path add 1 new BezierPath bezier path node 0 0 } while path size < 4 { path remove 1 } Point2D point2 = start findStart find start figure Point2D point2 = findEnd find figure = figure getStartPoint get start point = figure getEndPoint get point Rectangle2D rectangle2 sb = start getBounds get bounds Rectangle2D rectangle2 eb = getBounds get bounds path get 0 moveTo move to path get path size - 1 moveTo move to outcode = sb outcode if outcode == 0 { outcode = geom outcode sb eb } if outcode geom OUT_RIGHT != 0 { path get 1 moveTo move to + slantSize slant size } else if outcode geom OUT_LEFT != 0 { path get 1 moveTo move to - slantSize slant size } else if outcode geom OUT_BOTTOM != 0 { path get 1 moveTo move to + slantSize slant size } else { path get 1 moveTo move to - slantSize slant size } outcode = eb outcode if outcode == 0 { outcode = geom outcode eb sb } if outcode geom OUT_RIGHT != 0 { path get 2 moveTo move to + slantSize slant size } else if outcode geom OUT_LEFT != 0 { path get 2 moveTo move to - slantSize slant size } else if outcode geom OUT_BOTTOM != 0 { path get 2 moveTo move to + slantSize slant size } else { path get 2 moveTo move to - slantSize slant size } path invalidatePath invalidate path } read DOMInput dom input { slantSize slant size = getAttribute get attribute slant 20d } write DOMOutput dom output out { out addAttribute add attribute slant slantSize slant size } liner clone { try { liner super clone } catch CloneNotSupportedException clone not supported { InternalError internal = new InternalError internal getMessage get message initCause init cause } } } 