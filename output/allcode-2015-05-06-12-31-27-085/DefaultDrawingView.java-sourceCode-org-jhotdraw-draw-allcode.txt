org jhotdraw draw import org jhotdraw gui datatransfer CompositeTransferable composite transferable import org jhotdraw util * import org jhotdraw undo * import awt * import awt datatransfer * import awt geom * import awt color * import awt event * import * import util * import javax swing * import org jhotdraw app EditableComponent editable component import org jhotdraw geom * import org jhotdraw xml * import org jhotdraw xml XMLTransferable xml transferable DefaultDrawingView default drawing view JComponent component implements DrawingView drawing view DrawingListener drawing listener HandleListener handle listener EditableComponent editable component { private drawing drawing private Set<Figure> set< figure> dirtyFigures dirty figures = new HashSet<Figure> hash set< figure> private Set<Figure> set< figure> selectedFigures selected figures = new HashSet<Figure> hash set< figure> private rainbow = 0 private LinkedList<Handle> linked list< handle> selectionHandles selection handles = new LinkedList<Handle> linked list< handle> private handle secondaryHandleOwner secondary handle owner private LinkedList<Handle> linked list< handle> secondaryHandles secondary handles = new LinkedList<Handle> linked list< handle> private handlesAreValid handles are valid = private dimension preferredSize preferred size private scaleFactor scale factor = 1 private Point2D point2 translate = new Point2D point2 0 0 private detailLevel detail level private DOMFactory dom factory domFactory dom factory private DrawingEditor drawing editor editor private constrainer constrainer = new GridConstrainer grid constrainer 1 1 private JLabel label emptyDrawingLabel empty drawing label DefaultDrawingView default drawing view { initComponents init components setFocusable set focusable addFocusListener add focus listener new FocusListener focus listener { focusGained focus gained FocusEvent focus event { repaint } focusLost focus lost FocusEvent focus event { repaint } } } private initComponents init components { buttonGroup1 button group1 = new javax swing ButtonGroup button group setLayout set layout setBackground set background new awt color 255 255 255 } drawing getDrawing get drawing { drawing } util set getTools get tools { } setEmptyDrawingMessage set empty drawing message newValue new value { oldValue old value = emptyDrawingLabel empty drawing label == ? emptyDrawingLabel empty drawing label getText get text if newValue new value == { emptyDrawingLabel empty drawing label = } else { emptyDrawingLabel empty drawing label = new JLabel label newValue new value emptyDrawingLabel empty drawing label setHorizontalAlignment set horizontal alignment JLabel label CENTER } firePropertyChange fire property change emptyDrawingMessage empty drawing message oldValue old value newValue new value repaint } getEmptyDrawingMessage get empty drawing message { emptyDrawingLabel empty drawing label == ? emptyDrawingLabel empty drawing label getText get text } paintComponent paint component graphics gr { Graphics2D graphics2 = Graphics2D graphics2 gr setRenderingHint set rendering hint RenderingHints rendering hints KEY_ALPHA_INTERPOLATION RenderingHints rendering hints VALUE_ALPHA_INTERPOLATION_QUALITY setRenderingHint set rendering hint RenderingHints rendering hints KEY_ANTIALIASING RenderingHints rendering hints VALUE_ANTIALIAS_ON setRenderingHint set rendering hint RenderingHints rendering hints KEY_STROKE_CONTROL RenderingHints rendering hints VALUE_STROKE_NORMALIZE setRenderingHint set rendering hint RenderingHints rendering hints KEY_FRACTIONALMETRICS options isFractionalMetrics fractional metrics ? RenderingHints rendering hints VALUE_FRACTIONALMETRICS_ON RenderingHints rendering hints VALUE_FRACTIONALMETRICS_OFF setRenderingHint set rendering hint RenderingHints rendering hints KEY_FRACTIONALMETRICS RenderingHints rendering hints VALUE_FRACTIONALMETRICS_OFF setRenderingHint set rendering hint RenderingHints rendering hints KEY_INTERPOLATION RenderingHints rendering hints VALUE_INTERPOLATION_BICUBIC setRenderingHint set rendering hint RenderingHints rendering hints KEY_RENDERING RenderingHints rendering hints VALUE_RENDER_QUALITY setRenderingHint set rendering hint RenderingHints rendering hints KEY_TEXT_ANTIALIASING options isTextAntialiased text antialiased ? RenderingHints rendering hints VALUE_TEXT_ANTIALIAS_ON RenderingHints rendering hints VALUE_TEXT_ANTIALIAS_OFF drawBackground draw background drawGrid draw grid drawDrawing draw drawing drawHandles draw handles drawTool draw tool } drawBackground draw background Graphics2D graphics2 { = -translate * scaleFactor scale factor = -translate * scaleFactor scale factor = getWidth get width = getHeight get height setColor set color getBackground get background fillRect fill rect - - if > 0 { setColor set color new color 0xf0f0f0 fillRect fill rect 0 0 } if > 0 { setColor set color new color 0xf0f0f0 fillRect fill rect 0 0 } } drawGrid draw grid Graphics2D graphics2 { constrainer draw this } drawDrawing draw drawing Graphics2D graphics2 gr { if drawing != { if drawing getFigureCount get figure count == 0 emptyDrawingLabel empty drawing label != { emptyDrawingLabel empty drawing label setBounds set bounds 0 0 getWidth get width getHeight get height emptyDrawingLabel empty drawing label paint gr } else { Graphics2D graphics2 = Graphics2D graphics2 gr create AffineTransform affine transform tx = getTransform get transform tx translate -translate * scaleFactor scale factor -translate * scaleFactor scale factor tx scale scaleFactor scale factor scaleFactor scale factor setTransform set transform tx drawing setFontRenderContext set font render context getFontRenderContext get font render context drawing draw dispose } } } drawHandles draw handles awt Graphics2D graphics2 { if editor != editor getFocusedView get focused view == this { validateHandles validate handles for handle getSelectionHandles get selection handles { draw } for handle getSecondaryHandles get secondary handles { draw } } } drawTool draw tool Graphics2D graphics2 { if editor != editor getView get view == this editor getTool get tool != { editor getTool get tool draw } } setDrawing set drawing drawing { if this drawing != { this drawing removeDrawingListener remove drawing listener this clearSelection clear selection } this drawing = if this drawing != { this drawing addDrawingListener add drawing listener this } invalidateDimension invalidate dimension invalidate if getParent get parent != getParent get parent validate repaint } repaint Rectangle2D rectangle2 { rectangle vr = drawingToView drawing to view vr grow 1 1 repaint vr } areaInvalidated area invalidated DrawingEvent drawing event evt { repaint evt getInvalidatedArea get invalidated area invalidateDimension invalidate dimension } areaInvalidated area invalidated HandleEvent handle event evt { repaint evt getInvalidatedArea get invalidated area invalidateDimension invalidate dimension } figureAdded figure added DrawingEvent drawing event evt { if evt getDrawing get drawing getFigureCount get figure count == 1 { repaint } else { repaint evt getInvalidatedArea get invalidated area } invalidateDimension invalidate dimension } figureRemoved figure removed DrawingEvent drawing event evt { if evt getDrawing get drawing getFigureCount get figure count == 0 { repaint } else { repaint evt getInvalidatedArea get invalidated area } removeFromSelection remove from selection evt getFigure get figure invalidateDimension invalidate dimension } invalidate { invalidateDimension invalidate dimension super invalidate } addToSelection add to selection figure figure { selectedFigures selected figures add figure invalidateHandles invalidate handles fireSelectionChanged fire selection changed repaint } addToSelection add to selection Collection<Figure> collection< figure> figures { selectedFigures selected figures addAll add all figures invalidateHandles invalidate handles fireSelectionChanged fire selection changed repaint } removeFromSelection remove from selection figure figure { if selectedFigures selected figures remove figure { invalidateHandles invalidate handles fireSelectionChanged fire selection changed } repaint } toggleSelection toggle selection figure figure { if selectedFigures selected figures contains figure { selectedFigures selected figures remove figure } else { selectedFigures selected figures add figure } fireSelectionChanged fire selection changed invalidateHandles invalidate handles repaint } selectAll select all { selectedFigures selected figures clear selectedFigures selected figures addAll add all drawing getFigures get figures invalidateHandles invalidate handles fireSelectionChanged fire selection changed repaint } clearSelection clear selection { if getSelectionCount get selection count > 0 { selectedFigures selected figures clear invalidateHandles invalidate handles fireSelectionChanged fire selection changed } repaint } isFigureSelected figure selected figure checkFigure check figure { selectedFigures selected figures contains checkFigure check figure } Collection<Figure> collection< figure> getSelectedFigures get selected figures { collections unmodifiableSet unmodifiable set selectedFigures selected figures } getSelectionCount get selection count { selectedFigures selected figures size } private util List<Handle> list< handle> getSelectionHandles get selection handles { validateHandles validate handles collections unmodifiableList unmodifiable list selectionHandles selection handles } private util List<Handle> list< handle> getSecondaryHandles get secondary handles { validateHandles validate handles collections unmodifiableList unmodifiable list secondaryHandles secondary handles } private invalidateHandles invalidate handles { if handlesAreValid handles are valid { handlesAreValid handles are valid = rectangle invalidatedArea invalidated area = for handle handle selectionHandles selection handles { handle removeHandleListener remove handle listener this if invalidatedArea invalidated area == { invalidatedArea invalidated area = handle getDrawBounds get draw bounds } else { invalidatedArea invalidated area add handle getDrawBounds get draw bounds } handle dispose } selectionHandles selection handles clear secondaryHandles secondary handles clear switch selectedFigures selected figures size { case 0 if invalidatedArea invalidated area != { repaint invalidatedArea invalidated area } break case 1 if invalidatedArea invalidated area != { repaint invalidatedArea invalidated area } break default repaint break } } } private validateHandles validate handles { if ! handlesAreValid handles are valid { handlesAreValid handles are valid = rectangle invalidatedArea invalidated area = level = detailLevel detail level { for figure figure getSelectedFigures get selected figures { for handle handle figure createHandles create handles level { handle setView set view this selectionHandles selection handles add handle handle addHandleListener add handle listener this if invalidatedArea invalidated area == { invalidatedArea invalidated area = handle getBounds get bounds } else { invalidatedArea invalidated area add handle getBounds get bounds } } } } while level-- > 0 selectionHandles selection handles size == 0 detailLevel detail level = level + 1 if invalidatedArea invalidated area != { repaint invalidatedArea invalidated area } } } handle findHandle find handle point { validateHandles validate handles for handle handle new ReversedList<Handle> reversed list< handle> getSecondaryHandles get secondary handles { if handle contains { handle } } for handle handle new ReversedList<Handle> reversed list< handle> getSelectionHandles get selection handles { if handle contains { handle } } } Collection<Handle> collection< handle> getCompatibleHandles get compatible handles handle master { validateHandles validate handles HashSet<Figure> hash set< figure> owners = new HashSet<Figure> hash set< figure> LinkedList<Handle> linked list< handle> compatibleHandles compatible handles = new LinkedList<Handle> linked list< handle> owners add master getOwner get owner compatibleHandles compatible handles add master for handle handle getSelectionHandles get selection handles { if ! owners contains handle getOwner get owner handle isCombinableWith combinable with master { owners add handle getOwner get owner compatibleHandles compatible handles add handle } } compatibleHandles compatible handles } figure findFigure find figure point { getDrawing get drawing findFigure find figure viewToDrawing view to drawing } Collection<Figure> collection< figure> findFigures find figures rectangle { getDrawing get drawing findFigures find figures viewToDrawing view to drawing } Collection<Figure> collection< figure> findFiguresWithin find figures within rectangle { getDrawing get drawing findFiguresWithin find figures within viewToDrawing view to drawing } addFigureSelectionListener add figure selection listener FigureSelectionListener figure selection listener fsl { listenerList listener list add FigureSelectionListener figure selection listener fsl } removeFigureSelectionListener remove figure selection listener FigureSelectionListener figure selection listener fsl { listenerList listener list remove FigureSelectionListener figure selection listener fsl } fireSelectionChanged fire selection changed { if listenerList listener list getListenerCount get listener count > 0 { FigureSelectionEvent figure selection event event = listeners = listenerList listener list getListenerList get listener list for = listeners length-2 i>=0 i-=2 { if listeners == FigureSelectionListener figure selection listener { if event == event = new FigureSelectionEvent figure selection event this FigureSelectionListener figure selection listener listeners i+1 selectionChanged selection changed event } } } } handleRequestRemove handle request remove HandleEvent handle event { selectionHandles selection handles remove getHandle get handle getHandle get handle dispose invalidateHandles invalidate handles repaint getInvalidatedArea get invalidated area } invalidateDimension invalidate dimension { preferredSize preferred size = } constrainer getConstrainer get constrainer { constrainer } setConstrainer set constrainer constrainer newValue new value { constrainer oldValue old value = constrainer constrainer = newValue new value repaint firePropertyChange fire property change constrainer oldValue old value newValue new value } dimension getPreferredSize get preferred size { if preferredSize preferred size == { Dimension2DDouble dimension2 = new Dimension2DDouble dimension2 if drawing != { translate = 0 translate = 0 for figure drawing getFigures get figures { Rectangle2D rectangle2 = getDrawBounds get draw bounds width = math max width + width height = math max height + height translate = math min translate translate = math min translate } } preferredSize preferred size = new dimension width + 10 - translate * scaleFactor scale factor height + 10 - translate * scaleFactor scale factor fireViewTransformChanged fire view transform changed repaint } preferredSize preferred size } point drawingToView drawing to view Point2D point2 { new point - translate * scaleFactor scale factor - translate * scaleFactor scale factor } Point2D point2 viewToDrawing view to drawing point { new Point2D point2 / scaleFactor scale factor + translate / scaleFactor scale factor + translate } rectangle drawingToView drawing to view Rectangle2D rectangle2 { new rectangle - translate * scaleFactor scale factor - translate * scaleFactor scale factor width * scaleFactor scale factor height * scaleFactor scale factor } Rectangle2D rectangle2 viewToDrawing view to drawing rectangle { new Rectangle2D rectangle2 / scaleFactor scale factor + translate / scaleFactor scale factor + translate width / scaleFactor scale factor height / scaleFactor scale factor } container getContainer get container { this } getScaleFactor get scale factor { scaleFactor scale factor } setScaleFactor set scale factor newValue new value { oldValue old value = scaleFactor scale factor scaleFactor scale factor = newValue new value fireViewTransformChanged fire view transform changed firePropertyChange fire property change scaleFactor scale factor oldValue old value newValue new value invalidateDimension invalidate dimension invalidate if getParent get parent != getParent get parent validate repaint } fireViewTransformChanged fire view transform changed { for handle handle selectionHandles selection handles { handle viewTransformChanged view transform changed } for handle handle secondaryHandles secondary handles { handle viewTransformChanged view transform changed } } setHandleDetailLevel set handle detail level newValue new value { detailLevel detail level = newValue new value invalidateHandles invalidate handles repaint } getHandleDetailLevel get handle detail level { detailLevel detail level } handleRequestSecondaryHandles handle request secondary handles HandleEvent handle event { secondaryHandleOwner secondary handle owner = getHandle get handle secondaryHandles secondary handles clear secondaryHandles secondary handles addAll add all secondaryHandleOwner secondary handle owner createSecondaryHandles create secondary handles for handle secondaryHandles secondary handles { setView set view this addHandleListener add handle listener this } repaint } AffineTransform affine transform getDrawingToViewTransform get drawing to view transform { AffineTransform affine transform = new AffineTransform affine transform scale scaleFactor scale factor scaleFactor scale factor translate - translate - translate } setDOMFactory set dom factory DOMFactory dom factory newValue new value { DOMFactory dom factory oldValue old value = domFactory dom factory this domFactory dom factory = newValue new value firePropertyChange fire property change DOMFactory dom factory oldValue old value newValue new value } DOMFactory dom factory getDOMFactory get dom factory { domFactory dom factory } copy { if domFactory dom factory == { getToolkit get toolkit beep } HashSet<Figure> hash set< figure> toBeCopied to be copied = new HashSet<Figure> hash set< figure> getSelectedFigures get selected figures if toBeCopied to be copied size == 0 ByteArrayOutputStream byte output stream out = new ByteArrayOutputStream byte output stream try { NanoXMLLiteDOMOutput nano xml lite dom output domo = new NanoXMLLiteDOMOutput nano xml lite dom output domFactory dom factory domo openElement open element DrawingClip drawing clip for figure getDrawing get drawing getFigures get figures { if toBeCopied to be copied contains { domo writeObject write } } domo closeElement close element domo save out byte data = out toByteArray to byte CompositeTransferable composite transferable transfer = new CompositeTransferable composite transferable transfer add new XMLTransferable xml transferable data application/x-drawing-clip DrawingClip drawing clip transfer add new XMLTransferable xml transferable data text/xml DrawingClip drawing clip toolkit getDefaultToolkit get default toolkit getSystemClipboard get clipboard setContents set contents transfer transfer } catch IOException { printStackTrace stack trace getToolkit get toolkit beep } } cut { if domFactory dom factory == { getToolkit get toolkit beep } copy delete } delete { ArrayList<Figure> list< figure> toBeDeleted to be deleted = new ArrayList<Figure> list< figure> getSelectedFigures get selected figures clearSelection clear selection getDrawing get drawing removeAll remove all toBeDeleted to be deleted } paste { if domFactory dom factory == { getToolkit get toolkit beep } try { ArrayList<Figure> list< figure> toBeSelected to be selected = new ArrayList<Figure> list< figure> DataFlavor data flavor flavor = new DataFlavor data flavor application/x-drawing-clip drawing clip transferable transfer = toolkit getDefaultToolkit get default toolkit getSystemClipboard get clipboard getContents get contents this if transfer isDataFlavorSupported data flavor supported flavor { CompositeEdit composite edit = new CompositeEdit composite edit paste getDrawing get drawing fireUndoableEditHappened fire undoable edit happened for figure new LinkedList<Figure> linked list< figure> getSelectedFigures get selected figures { getDrawing get drawing remove } InputStream input stream = try { = InputStream input stream transfer getTransferData get transfer data flavor NanoXMLLiteDOMInput nano xml lite dom input domi = new NanoXMLLiteDOMInput nano xml lite dom input domFactory dom factory domi openElement open element DrawingClip drawing clip for i=0 n=domi getElementCount get element count < i++ { figure = figure domi readObject read getDrawing get drawing add toBeSelected to be selected add } } finally { if != close } clearSelection clear selection addToSelection add to selection toBeSelected to be selected getDrawing get drawing fireUndoableEditHappened fire undoable edit happened } else { toolkit getDefaultToolkit get default toolkit beep } } catch throwable { printStackTrace stack trace } } duplicate { Collection<Figure> collection< figure> sorted = getDrawing get drawing sort getSelectedFigures get selected figures HashMap<Figure hash map< figure figure> originalToDuplicateMap original to duplicate map = new HashMap<Figure hash map< figure figure> sorted size clearSelection clear selection drawing drawing = getDrawing get drawing ArrayList<Figure> list< figure> duplicates = new ArrayList<Figure> list< figure> sorted size AffineTransform affine transform tx = new AffineTransform affine transform tx translate 5 5 for figure sorted { figure = figure clone basicTransform basic transform tx duplicates add originalToDuplicateMap original to duplicate map put drawing add } for figure duplicates { remap originalToDuplicateMap original to duplicate map } addToSelection add to selection duplicates } removeNotify remove notify DrawingEditor drawing editor editor { this editor = repaint } addNotify add notify DrawingEditor drawing editor editor { this editor = editor repaint } private javax swing ButtonGroup button group buttonGroup1 button group1 } 