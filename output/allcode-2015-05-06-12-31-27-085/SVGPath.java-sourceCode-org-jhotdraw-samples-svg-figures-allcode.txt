org jhotdraw samples svg figures import awt * import awt event * import awt geom * import * import util * import javax swing * import org jhotdraw draw * import org jhotdraw draw action * import org jhotdraw geom * import org jhotdraw samples svg * import org jhotdraw util * import org jhotdraw xml * import org jhotdraw draw AttributeKeys attribute keys * SVGPath path AbstractAttributedCompositeFigure attributed composite figure implements SVGFigure figure { private GeneralPath general path path SVGPath path { add new BezierFigure bezier figure SVGUtil util setDefaults set defaults this } drawFigure draw figure Graphics2D graphics2 { validatePath validate path if AttributeKeys attribute keys FILL_COLOR get this != { setColor set color AttributeKeys attribute keys FILL_COLOR get this drawFill draw fill } if STROKE_COLOR get this != { setStroke set stroke AttributeKeys attribute keys getStroke get stroke this setColor set color STROKE_COLOR get this drawStroke draw stroke } if isConnectorsVisible connectors visible { drawConnectors draw connectors } } drawFill draw fill Graphics2D graphics2 { if getChildren get children size > 0 { fill path } } drawStroke draw stroke Graphics2D graphics2 { draw path } invalidate { super invalidate invalidatePath invalidate path } validate { validatePath validate path super validate } validatePath validate path { if path == { path = new GeneralPath general path path setWindingRule set winding rule WINDING_RULE get this == WindingRule winding rule EVEN_ODD ? GeneralPath general path WIND_EVEN_ODD GeneralPath general path WIND_NON_ZERO for figure child getChildren get children { BezierFigure bezier figure = BezierFigure bezier figure child path append getBezierPath get bezier path } } } invalidatePath invalidate path { path = } @Override @ write DOMOutput dom output out IOException { writePoints write points out writeAttributes write attributes out } writePoints write points DOMOutput dom output out { StringBuilder builder buf = new StringBuilder builder for figure child getChildren get children { BezierFigure bezier figure = BezierFigure bezier figure child buf append SVGUtil util toPathData to path data getBezierPath get bezier path } out addAttribute add attribute buf toString to } writeAttributes write attributes DOMOutput dom output out IOException { SVGUtil util writeAttributes write attributes this out } @Override @ read DOMInput dom input IOException { readPoints read points readAttributes read attributes AffineTransform affine transform tx = SVGUtil util getTransform get transform transform basicTransform basic transform tx } readPoints read points DOMInput dom input IOException { removeAllChildren remove all children if getTagName get tag equals polyline { BezierPath bezier path = new BezierPath bezier path points = getAttribute get attribute points StringTokenizer tokenizer tt = new StringTokenizer tokenizer points while tt hasMoreTokens has more tokens { add new BezierPath bezier path node valueOf value of tt nextToken next token valueOf value of tt nextToken next token } BezierFigure bezier figure child = new BezierFigure bezier figure child basicSetBezierPath basic set bezier path basicAdd basic add child } else if getTagName get tag equals polygon { BezierPath bezier path = new BezierPath bezier path setClosed set closed points = getAttribute get attribute points StringTokenizer tokenizer tt = new StringTokenizer tokenizer points while tt hasMoreTokens has more tokens { add new BezierPath bezier path node valueOf value of tt nextToken next token valueOf value of tt nextToken next token } BezierFigure bezier figure child = new BezierFigure bezier figure child basicSetBezierPath basic set bezier path basicAdd basic add child } else { util List<BezierPath> list< bezier path> paths = SVGUtil util getPath get path for BezierPath bezier path paths { BezierFigure bezier figure child = new BezierFigure bezier figure child basicSetBezierPath basic set bezier path basicAdd basic add child } if paths size == 0 { BezierFigure bezier figure child = new BezierFigure bezier figure basicAdd basic add child } } } readAttributes read attributes DOMInput dom input IOException { SVGUtil util readAttributes read attributes this } basicTransform basic transform AffineTransform affine transform tx { super basicTransform basic transform tx invalidatePath invalidate path } isEmpty empty { for figure child getChildren get children { BezierFigure bezier figure = BezierFigure bezier figure child if getPointCount get point count > 0 { } } } @Override @ LinkedList<Handle> linked list< handle> createHandles create handles detailLevel detail level { LinkedList<Handle> linked list< handle> handles if detailLevel detail level == 0 { handles = LinkedList<Handle> linked list< handle> super createHandles create handles detailLevel detail level handles add new RotateHandle rotate handle this } else { handles = new LinkedList<Handle> linked list< handle> for figure child getChildren get children { handles addAll add all child createHandles create handles detailLevel detail level } } handles } @Override @ Collection<Action> collection< action> getActions get actions Point2D point2 { ResourceBundleUtil resource bundle util labels = ResourceBundleUtil resource bundle util getLAFBundle get bundle org jhotdraw samples svg labels LinkedList<Action> linked list< action> actions = new LinkedList<Action> linked list< action> actions add new AbstractAction action labels getString get closePath close path { actionPerformed action performed ActionEvent action event evt { for figure child getChildren get children { BezierFigure bezier figure = BezierFigure bezier figure child setClosed set closed } } } actions add new AbstractAction action labels getString get openPath open path { actionPerformed action performed ActionEvent action event evt { for figure child getChildren get children { BezierFigure bezier figure = BezierFigure bezier figure child setClosed set closed } } } actions add new AbstractAction action labels getString get windingEvenOdd winding even odd { actionPerformed action performed ActionEvent action event evt { WINDING_RULE set SVGPath path this WindingRule winding rule EVEN_ODD } } actions add new AbstractAction action labels getString get windingNonZero winding non zero { actionPerformed action performed ActionEvent action event evt { WINDING_RULE set SVGPath path this WindingRule winding rule NON_ZERO } } actions } } 