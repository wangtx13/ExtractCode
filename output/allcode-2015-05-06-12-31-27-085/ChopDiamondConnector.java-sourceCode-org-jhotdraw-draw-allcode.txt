org jhotdraw draw import awt * import awt geom * import org jhotdraw draw AttributeKeys attribute keys * import org jhotdraw geom * ChopDiamondConnector chop diamond connector ChopBoxConnector chop box connector { ChopDiamondConnector chop diamond connector { } ChopDiamondConnector chop diamond connector figure owner { super owner } Point2D point2 chop figure target Point2D point2 from { target = getConnectorTarget get connector target target Rectangle2D rectangle2 = target getBounds get bounds if DiamondFigure diamond figure IS_QUADRATIC get target { side = math max width height -= side - width / 2 -= side - height / 2 width = height = side } growx growy switch STROKE_PLACEMENT get target { case INSIDE sid { growx = growy = 0f break } case OUTSIDE sid { lineLength line length = math sqrt width * width + height * height scale = getStrokeTotalWidth get stroke total width target * 2d / lineLength line length growx = scale * height growy = scale * width break } case CENTER default lineLength line length = math sqrt width * width + height * height scale = getStrokeTotalWidth get stroke total width target / lineLength line length growx = scale * height growy = scale * width break } geom grow growx growy Point2D point2 c1 = new Point2D point2 + width/2 + height/2 Point2D point2 p2 = new Point2D point2 + width/2 + height Point2D point2 p4 = new Point2D point2 + width/2 if contains from { if from > from < +r height/2 { p2 } else { p4 } } ang = geom pointToAngle point to angle from Point2D point2 p1 = new Point2D point2 + width + height/2 Point2D point2 p3 = new Point2D point2 + height/2 Point2D point2 rp = if ang > 0 ang < 1 57 { rp = geom intersect p1 p1 p2 p2 c1 c1 from from } else if ang > 1 575 ang < 3 14 { rp = geom intersect p2 p2 p3 p3 c1 c1 from from } else if ang > -3 14 ang < -1 575 { rp = geom intersect p3 p3 p4 p4 c1 c1 from from } else if ang > -1 57 ang < 0 { rp = geom intersect p4 p4 p1 p1 c1 c1 from from } if rp == { rp = geom angleToPoint angle to point ang } rp } } 