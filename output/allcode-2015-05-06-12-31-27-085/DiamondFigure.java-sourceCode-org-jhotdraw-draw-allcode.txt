org jhotdraw draw import awt * import awt geom * import * import util * import org jhotdraw draw AttributeKeys attribute keys * import org jhotdraw geom geom import org omg CORBA MARSHAL DiamondFigure diamond figure AttributedFigure attributed figure { AttributeKey<Boolean> attribute key< boolean> IS_QUADRATIC = new AttributeKey<Boolean> attribute key< boolean> isQuadratic quadratic private Rectangle2D rectangle2 rectangle DiamondFigure diamond figure { this 0 0 0 0 } DiamondFigure diamond figure width height { rectangle = new Rectangle2D rectangle2 width height } drawFill draw fill Graphics2D graphics2 { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone if isQuadratic quadratic { side = math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = AttributeKeys attribute keys getPerpendicularFillGrowth get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d lineLength line length = math sqrt * + * scale = grow / lineLength line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } GeneralPath general path diamond = new GeneralPath general path diamond moveTo move to float + width / 2 float diamond lineTo line to float + width float + height / 2 diamond lineTo line to float + width / 2 float + height diamond lineTo line to float float + height / 2 diamond closePath close path fill diamond } drawStroke draw stroke Graphics2D graphics2 { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone if isQuadratic quadratic { side = math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = AttributeKeys attribute keys getPerpendicularDrawGrowth get perpendicular draw growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d lineLength line length = math sqrt * + * scale = grow / lineLength line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } GeneralPath general path diamond = new GeneralPath general path diamond moveTo move to float + width / 2 float diamond lineTo line to float + width float + height / 2 diamond lineTo line to float + width / 2 float + height diamond lineTo line to float float + height / 2 diamond closePath close path draw diamond } Rectangle2D rectangle2 getBounds get bounds { Rectangle2D rectangle2 bounds = Rectangle2D rectangle2 rectangle clone bounds } Rectangle2D rectangle2 getFigureDrawBounds get figure draw bounds { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone if isQuadratic quadratic { side = math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = AttributeKeys attribute keys getPerpendicularHitGrowth get perpendicular hit growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d lineLength line length = math sqrt * + * scale = grow / lineLength line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } } contains Point2D point2 { Rectangle2D rectangle2 = Rectangle2D rectangle2 rectangle clone if isQuadratic quadratic { side = math max width height -= side - width / 2 -= side - height / 2 width = height = side } grow = AttributeKeys attribute keys getPerpendicularFillGrowth get perpendicular fill growth this growx growy if grow == 0d { growx = growy = 0d } else { = width / 2d = height / 2d lineLength line length = math sqrt * + * scale = grow / lineLength line length yb = scale * xa = scale * growx = yb * yb / xa + xa growy = xa * xa / yb + yb geom grow growx growy } GeneralPath general path diamond = new GeneralPath general path diamond moveTo move to float + width / 2 float diamond lineTo line to float + width float + height / 2 diamond lineTo line to float + width / 2 float + height diamond lineTo line to float float + height / 2 diamond closePath close path diamond contains } basicSetBounds basic set bounds Point2D point2 anchor Point2D point2 { rectangle = math min anchor rectangle = math min anchor rectangle width = math max 0 1 math - anchor rectangle height = math max 0 1 math - anchor } basicTransform basic transform AffineTransform affine transform tx { Point2D point2 anchor = getStartPoint get start point Point2D point2 = getEndPoint get point basicSetBounds basic set bounds Point2D point2 tx transform anchor anchor Point2D point2 tx transform } restoreTo restore to geometry { Rectangle2D rectangle2 = Rectangle2D rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } getRestoreData get restore data { rectangle clone } isQuadratic quadratic { = getAttribute get attribute IS_QUADRATIC == ? booleanValue value } setQuadratic set quadratic newValue new value { setAttribute set attribute IS_QUADRATIC newValue new value } connector findConnector find connector Point2D point2 ConnectionFigure connection figure prototype { new ChopDiamondConnector chop diamond connector this } connector findCompatibleConnector find compatible connector connector isStart start { new ChopDiamondConnector chop diamond connector this } DiamondFigure diamond figure clone { DiamondFigure diamond figure that = DiamondFigure diamond figure super clone that rectangle = Rectangle2D rectangle2 this rectangle clone that } } 