org jhotdraw draw import org jhotdraw util * import awt * import awt event * import awt geom * import util * import javax swing undo * import * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output line connection figure line figure implements connection figure { private connector start connector private connector connector private liner liner private connection handler connection handler = new connection handler this private connection handler implements figure listener { private line connection figure owner private connection handler line connection figure owner { this owner = owner } figure request remove figure event { } figure removed figure event evt { owner fire figure request remove } figure changed figure event { if get source == owner get start figure || get source == owner get figure { owner will change owner update connection owner changed } } figure added figure event { } figure attribute changed figure event { } figure area invalidated figure event { } } line connection figure { } basic transform affine transform tx { super basic transform tx update connection } collection< handle> create handles detail level { list< handle> handles = new list< handle> get node count switch detail level { case 0 if get liner == { for = 1 = get node count - 1 < i++ { handles add new bezier node handle this } } handles add new change connection start handle this handles add new change connection handle this break } handles } can connect { } update connection { will change if get start connector != { point2 start = get start connector find start this if start != { basic set start point start } } if get connector != { point2 = get connector find this if != { basic set point } } changed } validate { super validate lineout } can connect figure start figure { start can connect can connect } connects same connection figure other { other get start connector == get start connector other get connector == get connector } connector get connector { connector } figure get figure { connector == ? connector get owner } connector get start connector { start connector } figure get start figure { start connector == ? start connector get owner } set connector connector new { connector old = connector if new != old { will change basic set connector new fire undoable edit happened new undoable edit { get presentation { end- verbindung setzen } undo cannot undo { super undo will change basic set connector old changed } redo cannot undo { super redo will change basic set connector new changed } } changed } } basic set connector connector new { if new != connector { if connector != { get figure remove figure listener connection handler if get start figure != { handle disconnect get start figure get figure } } connector = new if connector != { get figure add figure listener connection handler if get start figure != get figure != { handle connect get start figure get figure update connection } } } } set start connector connector new start { connector old start = start connector if new start != old start { will change basic set start connector new start fire undoable edit happened new undoable edit { get presentation { start- verbindung setzen } undo cannot undo { super undo will change basic set start connector old start changed } redo cannot undo { super redo will change basic set start connector new start changed } } changed } } basic set start connector connector new start { if new start != start connector { if start connector != { get start figure remove figure listener connection handler if get figure != { handle disconnect get start figure get figure } } start connector = new start if start connector != { get start figure add figure listener connection handler if get start figure != get figure != { handle connect get start figure get figure update connection } } } } add notify drawing drawing { super add notify drawing } remove notify drawing drawing { super remove notify drawing } handle disconnect figure start figure { } handle connect figure start figure { } line connection figure clone { line connection figure that = line connection figure super clone that connection handler = new connection handler that if this liner != { that liner = liner this liner clone } if this start connector != { that start connector = connector this start connector clone that get start figure add figure listener that connection handler } if this connector != { that connector = connector this connector clone that get figure add figure listener that connection handler } if that start connector != that connector != { that handle connect that get start figure that get figure that update connection } that } remap map old to new { will change super remap old to new figure new start figure = figure new figure = if get start figure != { new start figure = figure old to new get get start figure if new start figure == new start figure = get start figure } if get figure != { new figure = figure old to new get get figure if new figure == new figure = get figure } if new start figure != { set start connector new start figure find compatible connector get start connector } if new figure != { set connector new figure find compatible connector get connector } update connection changed } can connect figure start { start can connect } handle mouse click point2 mouse event evt drawing view view { if get liner == evt get click count == 2 { will change index = basic split segment float 5f / view get scale factor if index != -1 { bezier path node new node = get node index fire undoable edit happened new undoable edit { redo cannot redo { super redo will change basic add node index new node changed } undo cannot undo { super undo will change basic remove node index changed } } changed } } } read points dom input { super read points open element start connector set start connector connector read close element open element connector set connector connector read close element } read dom input { read points read attributes read liner } read liner dom input { if get element count liner > 0 { open element liner liner = liner read close element } } write dom output out { write points out write attributes out write liner out } write liner dom output out { if liner != { out open element liner out write liner out close element } } write points dom output out { super write points out out open element start connector out write get start connector out close element out open element connector out write get connector out close element } set liner liner new value { will change this liner = new value changed } basic set node index bezier path node { if index != 0 index != get point count - 1 { if get start connector != { point2 start = get start connector find start this if start != { basic set start point start } } if get connector != { point2 = get connector find this if != { basic set point } } } super basic set node index } lineout { if liner != { liner lineout this } } bezier path get bezier path { path } liner get liner { liner } set start point point2 { set point 0 } set point index point2 { set point index 0 } set point point2 { set point get point count - 1 } reverse connection { if start connector != connector != { handle disconnect start connector get owner connector get owner connector tmp = start connector start connector = connector connector = tmp point2 tmp = get start point set start point get point set point tmp handle connect start connector get owner connector get owner update connection } } } 