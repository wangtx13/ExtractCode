org jhotdraw draw action import awt * import javax swing * import javax swing border * import awt image * import javax swing plaf basic * image bevel border implements border { private = private buffered image image private insets border insets private insets image insets private fill content area image bevel border image img insets border insets { this img border insets border insets } image bevel border image img insets image insets insets border insets { this img image insets border insets } image bevel border image img insets image insets insets border insets fill content area { if img instanceof buffered image { this image = buffered image img } else { frame = new frame media tracker = new media tracker add image img 0 try { wait for all } catch interrupted {} image = new buffered image img get width img get height buffered image TYPE_INT_ARGB graphics2 img graphics = image create graphics img graphics draw image img 0 0 img graphics dispose dispose } this image insets = image insets this border insets = border insets this fill content area = fill content area } border opaque { } insets get border insets component { insets border insets clone } paint border component graphics gr width height { if image == graphics2 = graphics2 gr top = image insets top left = image insets left bottom = image insets bottom right = image insets right img width = image get width img height = image get height if fill content area { if width == img width height == img height { draw image image } } if width == img width { left = img width right = 0 } if height == img height { top = img height bottom = 0 } if width < left + right { left = math min left width / 2 right = width - left } if height < top + bottom { top = math min top height / 2 bottom = height - top } if top > 0 left > 0 { draw image image + left + top 0 0 left top } if top > 0 right > 0 { draw image image + width - right + width + top img width - right 0 img width top } if bottom > 0 left > 0 { draw image image + height - bottom + left + height 0 img height - bottom left img height } if bottom > 0 right > 0 { draw image image + width - right + height - bottom + width + height img width - right img height - bottom img width img height } buffered image sub img = texture paint paint if top > 0 left + right < width { sub img = image get subimage left 0 img width - right - left top paint = new texture paint sub img new rectangle x+left img width - left - right top set paint paint fill rect x+left width - left - right top } if bottom > 0 left + right < width { sub img = image get subimage left img height - bottom img width - right - left bottom paint = new texture paint sub img new rectangle x+left + height - bottom img width - left - right bottom set paint paint fill rect x+left + height - bottom width - left - right bottom } if left > 0 top + bottom < height { sub img = image get subimage 0 top left img height - top - bottom paint = new texture paint sub img new rectangle y+top left img height - top - bottom set paint paint fill rect y+top left height - top - bottom } if right > 0 top + bottom < height { sub img = image get subimage img width - right top right img height - top - bottom paint = new texture paint sub img new rectangle x+width-right + top right img height - top - bottom set paint paint fill rect x+width-right + top right height - top - bottom } if fill content area { set color color yellow if left + right < width top + bottom < height { sub img = image get subimage left top img width - right - left img height - top - bottom paint = new texture paint sub img new rectangle + left + top img width - right - left img height - top - bottom set paint paint fill rect x+left + top width - right - left height - top - bottom } } } } 