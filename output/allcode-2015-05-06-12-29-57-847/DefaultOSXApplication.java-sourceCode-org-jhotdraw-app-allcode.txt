org jhotdraw app import org jhotdraw app action drop dock action import ch randelshofer quaqua * import org jhotdraw util * import org jhotdraw util prefs * import util * import util prefs * import awt event * import beans * import awt * import javax swing * import * import org jhotdraw app action about action import org jhotdraw app action actions import org jhotdraw app action clear recent files action import org jhotdraw app action close action import org jhotdraw app action copy action import org jhotdraw app action cut action import org jhotdraw app action delete action import org jhotdraw app action duplicate action import org jhotdraw app action exit action import org jhotdraw app action export action import org jhotdraw app action focus action import org jhotdraw app action maximize action import org jhotdraw app action minimize action import org jhotdraw app action new action import org jhotdraw app action toggle palette action import org jhotdraw app action open action import org jhotdraw app action open recent action import org jhotdraw app action paste action import org jhotdraw app action redo action import org jhotdraw app action save action import org jhotdraw app action save action import org jhotdraw app action select all action import org jhotdraw app action undo action default application application { private palette handler palette handler private project current project private preferences prefs private linked list< action> palette actions default application { } init { super init prefs = preferences user node for get model == ? get get model get init look and feel palette handler = new palette handler this init labels init application actions palette actions = new linked list< action> init palettes palette actions init screen menu bar } launch args { set property apple awt graphics use quartz super launch args } init look and feel { set property apple laf use screen menu bar set property com apple macos use screen menu bar try { manager set look and feel quaqua manager get look and feel } catch { stack trace } } init application actions { application model mo = get model mo put action about action new about action this mo put action exit action new exit action this mo put action drop dock action new drop dock action this mo put action new action new new action this mo put action open action new open action this mo put action clear recent files action new clear recent files action this mo put action save action new save action this mo put action save action new save action this mo put action close action new close action this mo put action undo action new undo action this mo put action redo action new redo action this mo put action cut action new cut action mo put action copy action new copy action mo put action paste action new paste action mo put action delete action new delete action mo put action duplicate action new duplicate action mo put action select all action new select all action mo put action maximize action new maximize action this mo put action minimize action new minimize action this } init project actions project { put action focus action new focus action } add palette window palette { palette handler add palette palette } remove palette window palette { palette handler remove palette palette } show project { if ! showing { set showing = get frame = new frame title if == { title = labels get unnamed } else { title = get } set title labels get formatted frame title title get get multiple open set default close operation frame DO_NOTHING_ON_CLOSE set preferred size new dimension 400 400 preferences util install frame prefs handler prefs project point = get location moved { moved = for iterator i=projects iterator has next { project project = project next if project != project showing swing utilities get window ancestor project get component get location equals { += 22 += 22 moved = break } } } while moved set location palette handler add add window listener new window adapter { window closing window event evt { set current project get model get action close action action performed new action event action event ACTION_PERFORMED window closing } } add property change listener new property change listener { property change property change event evt { = evt get property if equals has unsaved changes { get root pane put client property window modified new has unsaved changes } else if equals { set title get == ? unnamed get get } } } set menu bar create menu bar get content pane add get component set visible } } hide project { if showing { frame = frame swing utilities get window ancestor get component set visible remove get component palette handler remove dispose } } menu bar create menu bar project { resource bundle util labels = resource bundle util get bundle org jhotdraw app labels application model model = get model menu bar mb = new menu bar menu menu item mi menu open recent menu = new menu labels configure menu mi = add model get action new action mi set icon mi = add model get action open action mi set icon open recent menu = new menu labels configure menu open recent menu open recent open recent menu add model get action clear recent files action update open recent menu open recent menu add open recent menu add separator mi = add model get action close action mi set icon mi = add model get action save action mi set icon mi = add model get action save action mi set icon if model get action export action != { mi = add model get action export action mi set icon } mb add = new menu labels configure menu edit mi = add model get action undo action mi set icon mi = add model get action redo action mi set icon add separator mi = add model get action cut action mi set icon mi = add model get action copy action mi set icon mi = add model get action paste action mi set icon mi = add model get action duplicate action mi set icon mi = add model get action delete action mi set icon add separator mi = add model get action select all action mi set icon mb add for menu mm model create menus this { mb add mm } = new menu menu window menu = labels configure menu window mi = add model get action minimize action mi set icon mi = add model get action maximize action mi set icon add separator for project projects { if get action focus action != { window menu add get action focus action } } if palette actions size > 0 { add separator for action palette actions { check box menu item cbmi = new check box menu item actions configure check box menu item cbmi cbmi set icon add cbmi } } mb add add property change listener new property change listener { property change property change event evt { = evt get property if == project count { if == || projects contains { menu = window menu remove all add get model get action minimize action add get model get action maximize action add separator for iterator i=projects iterator has next { project = project next if get action focus action != { add get action focus action } } if palette actions size > 0 { add separator for action palette actions { check box menu item cbmi = new check box menu item actions configure check box menu item cbmi cbmi set icon add cbmi } } } else { remove property change listener this } } else if == recent files { update open recent menu open recent menu } } } mb } private update open recent menu menu open recent menu { if open recent menu get item count > 0 { menu item clear recent files item = menu item open recent menu get item open recent menu get item count - 1 open recent menu remove all for recent files { open recent menu add new open recent action default application this } if recent files size > 0 { open recent menu add separator } open recent menu add clear recent files item } } project get current project { current project } set current project project new value { project old value = current project current project = new value fire property change current project old value new value } init screen menu bar { application model model = get model net roydesign app application mrjapp = net roydesign app application get instance mrjapp set frameless menu bar create menu bar mrjapp get about menu item set action model get action about action mrjapp get quit menu item set action model get action exit action mrjapp add open document listener model get action drop dock action } init palettes linked list< action> palette actions { linked list< tool bar> tool bars = new linked list< tool bar> get model create tool bars this tool bar stb = new tool bar stb set labels get standard tool bar title add standard actions to stb tool bars add first stb i=0 x=0 for tool bar tb tool bars { i++ tb set floatable tb set orientation tool bar tb set focusable frame = new frame set focusable set resizable get content pane set layout new border layout get content pane add tb border layout set always top set undecorated get root pane set window decoration style root pane get root pane set font new font lucida grande font 11 get root pane put client property quaqua root pane vertical get root pane put client property quaqua root pane palette set menu bar create menu bar set focusable window state preferences util install palette prefs handler prefs toolbar +i += get width palette actions add new toggle palette action this tb get add palette } } add standard actions to tool bar tb { button application model mo = get model = tb add mo get action new action set focusable = tb add mo get action open action set focusable = tb add mo get action save action tb add separator = tb add mo get action undo action set focusable = tb add mo get action redo action set focusable tb add separator = tb add mo get action cut action set focusable = tb add mo get action copy action set focusable = tb add mo get action paste action set focusable } sharing tools among projects { } component get component { } } 