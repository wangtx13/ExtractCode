org jhotdraw draw import awt * import awt geom * import * import util * import javax swing undo * import org jhotdraw draw attribute keys * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output round rectangle figure attributed figure { private round rectangle2 roundrect private DEFAULT_ARC = 20 round rectangle figure { this 0 0 0 0 } round rectangle figure width height { roundrect = new round rectangle2 width height DEFAULT_ARC DEFAULT_ARC } rectangle2 get bounds { rectangle2 roundrect get bounds2 } rectangle2 get figure draw bounds { rectangle2 = rectangle2 roundrect get bounds2 grow = attribute keys get perpendicular hit growth this geom grow grow grow } get arc width { roundrect arcwidth } get arc height { roundrect archeight } set arc { old width = roundrect get arc width old height = roundrect get arc height roundrect arcwidth = roundrect archeight = fire figure changed get draw bounds fire undoable edit happened new undoable edit { get presentation { rundung } undo cannot undo { super undo will change roundrect arcwidth = old width roundrect archeight = old height changed } redo cannot redo { super redo will change roundrect arcwidth = roundrect archeight = changed } } } draw fill graphics2 { round rectangle2 = round rectangle2 roundrect clone grow = attribute keys get perpendicular fill growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { fill } } draw stroke graphics2 { round rectangle2 = round rectangle2 roundrect clone grow = attribute keys get perpendicular draw growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 if width > 0 height > 0 { draw } } contains point2 { round rectangle2 = round rectangle2 roundrect clone grow = attribute keys get perpendicular hit growth this -= grow -= grow width += grow * 2 height += grow * 2 arcwidth += grow * 2 archeight += grow * 2 contains } basic set bounds point2 anchor point2 { roundrect = math min anchor roundrect = math min anchor roundrect width = math max 0 1 math - anchor roundrect height = math max 0 1 math - anchor } basic transform affine transform tx { point2 anchor = get start point point2 = get point basic set bounds point2 tx transform anchor anchor point2 tx transform } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> super create handles detail level handles add new round rect radius handle this handles } connector find connector point2 connection figure prototype { new chop round rect connector this } connector find compatible connector connector start connector { new chop round rect connector this } round rectangle figure clone { round rectangle figure that = round rectangle figure super clone that roundrect = round rectangle2 this roundrect clone that } @ read dom input { super read roundrect arcwidth = get attribute arc width DEFAULT_ARC roundrect archeight = get attribute arc height DEFAULT_ARC } @ write dom output out { super write out out add attribute arc width roundrect arcwidth out add attribute arc height roundrect archeight } restore to geometry { round rectangle2 = round rectangle2 geometry roundrect = roundrect = roundrect width = width roundrect height = height } get restore data { roundrect clone } point2 chop point2 from { rectangle2 outer = get bounds grow switch STROKE_PLACEMENT get this { case default grow = attribute keys get stroke total width this / 2 break case sid grow = attribute keys get stroke total width this break case sid grow = 0 break } outer -= grow outer -= grow outer width += grow * 2 outer height += grow * 2 rectangle2 inner = rectangle2 outer clone gw = - get arc width + grow * 2 / 2 gh = - get arc height + grow *2 / 2 inner -= gw inner -= gh inner width += gw * 2 inner height += gh * 2 angle = geom point to angle outer from point2 = geom angle to point outer geom point to angle outer from if == outer || == outer + outer width { = math min math max inner inner + inner height } else { = math min math max inner inner + inner width } } } 