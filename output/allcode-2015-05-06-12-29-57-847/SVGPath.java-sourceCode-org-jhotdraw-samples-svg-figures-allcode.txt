org jhotdraw samples svg figures import awt * import awt event * import awt geom * import * import util * import javax swing * import org jhotdraw draw * import org jhotdraw draw action * import org jhotdraw geom * import org jhotdraw samples svg * import org jhotdraw util * import org jhotdraw xml * import org jhotdraw draw attribute keys * path attributed composite figure implements figure { private general path path path { add new bezier figure util set defaults this } draw figure graphics2 { validate path if attribute keys FILL_COLOR get this != { set color attribute keys FILL_COLOR get this draw fill } if STROKE_COLOR get this != { set stroke attribute keys get stroke this set color STROKE_COLOR get this draw stroke } if connectors visible { draw connectors } } draw fill graphics2 { if get children size > 0 { fill path } } draw stroke graphics2 { draw path } invalidate { super invalidate invalidate path } validate { validate path super validate } validate path { if path == { path = new general path path set winding rule WINDING_RULE get this == winding rule EVEN_ODD ? general path WIND_EVEN_ODD general path WIND_NON_ZERO for figure child get children { bezier figure = bezier figure child path append get bezier path } } } invalidate path { path = } @ write dom output out { write points out write attributes out } write points dom output out { builder buf = new builder for figure child get children { bezier figure = bezier figure child buf append util to path data get bezier path } out add attribute buf to } write attributes dom output out { util write attributes this out } @ read dom input { read points read attributes affine transform tx = util get transform transform basic transform tx } read points dom input { remove all children if get tag equals polyline { bezier path = new bezier path points = get attribute points tokenizer tt = new tokenizer points while tt has more tokens { add new bezier path node value of tt next token value of tt next token } bezier figure child = new bezier figure child basic set bezier path basic add child } else if get tag equals polygon { bezier path = new bezier path set closed points = get attribute points tokenizer tt = new tokenizer points while tt has more tokens { add new bezier path node value of tt next token value of tt next token } bezier figure child = new bezier figure child basic set bezier path basic add child } else { util list< bezier path> paths = util get path for bezier path paths { bezier figure child = new bezier figure child basic set bezier path basic add child } if paths size == 0 { bezier figure child = new bezier figure basic add child } } } read attributes dom input { util read attributes this } basic transform affine transform tx { super basic transform tx invalidate path } empty { for figure child get children { bezier figure = bezier figure child if get point count > 0 { } } } @ linked list< handle> create handles detail level { linked list< handle> handles if detail level == 0 { handles = linked list< handle> super create handles detail level handles add new rotate handle this } else { handles = new linked list< handle> for figure child get children { handles add all child create handles detail level } } handles } @ collection< action> get actions point2 { resource bundle util labels = resource bundle util get bundle org jhotdraw samples svg labels linked list< action> actions = new linked list< action> actions add new action labels get close path { action performed action event evt { for figure child get children { bezier figure = bezier figure child set closed } } } actions add new action labels get open path { action performed action event evt { for figure child get children { bezier figure = bezier figure child set closed } } } actions add new action labels get winding even odd { action performed action event evt { WINDING_RULE set path this winding rule EVEN_ODD } } actions add new action labels get winding non zero { action performed action event evt { WINDING_RULE set path this winding rule NON_ZERO } } actions } } 