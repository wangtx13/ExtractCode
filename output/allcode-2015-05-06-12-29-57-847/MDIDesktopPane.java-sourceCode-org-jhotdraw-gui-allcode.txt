org jhotdraw gui import javax swing * import javax swing event * import awt * import beans * import org jhotdraw app action arrangeable didesktop pane desktop pane implements arrangeable { private FRAME_OFFSET=20 private didesktop manager manager didesktop pane { manager = new didesktop manager this set desktop manager manager set drag mode desktop pane OUTLINE_DRAG_MODE set alignment component LEFT_ALIGNMENT } set arrangement arrangeable arrangement new value { arrangeable arrangement old value = get arrangement switch new value { case arrange frames cascading break case z arrange frames horizontally break case arrange frames vertically break } fire property change arrangement old value new value } arrangeable arrangement get arrangement { arrangeable arrangement } private arrange frames cascading { = 0 = 0 internal frame all frames = get all frames if all frames length == 0 { } manager set normal size frame height = get bounds height - 5 - all frames length * FRAME_OFFSET frame width = get bounds width - 5 - all frames length * FRAME_OFFSET for = all frames length - 1 >= 0 i-- { try { all frames set maximum } catch property veto { stack trace } all frames set bounds frame width frame height = + FRAME_OFFSET = + FRAME_OFFSET } check desktop size } private tile frames horizontally { component all frames = get all frames if all frames length == 0 { } manager set normal size frame height = get bounds height/all frames length = 0 for = 0 < all frames length i++ { try { internal frame all frames set maximum } catch property veto { stack trace } all frames set bounds 0 get bounds width frame height = + frame height } check desktop size } tile frames vertically { component all frames = get all frames if all frames length == 0 { } manager set normal size frame width = get bounds width/all frames length = 0 for = 0 < all frames length i++ { try { internal frame all frames set maximum } catch property veto { stack trace } all frames set bounds 0 frame width get bounds height = + frame width } check desktop size } arrange frames vertically { component all frames = get all frames if all frames length == 0 { } manager set normal size vert frames = math floor math sqrt all frames length hor frames = math ceil math sqrt all frames length frame width = get bounds width / hor frames frame height = get bounds height / vert frames = 0 = 0 frame idx = 0 for hor cnt = 0 hor cnt < hor frames-1 hor cnt++ { = 0 for vert cnt = 0 vert cnt < vert frames vert cnt++ { try { internal frame all frames frame idx set maximum } catch property veto { stack trace } all frames frame idx set bounds frame width frame height frame idx++ = + frame height } = + frame width } frame height = get bounds height / all frames length - frame idx = 0 for frame idx < all frames length frame idx++ { try { internal frame all frames frame idx set maximum } catch property veto { stack trace } all frames frame idx set bounds frame width frame height = + frame height } check desktop size } arrange frames horizontally { component all frames = get all frames if all frames length == 0 { } manager set normal size vert frames = math ceil math sqrt all frames length hor frames = math floor math sqrt all frames length frame width = get bounds width / hor frames frame height = get bounds height / vert frames = 0 = 0 frame idx = 0 for vert cnt = 0 vert cnt < vert frames-1 vert cnt++ { = 0 for hor cnt = 0 hor cnt < hor frames hor cnt++ { try { internal frame all frames frame idx set maximum } catch property veto { stack trace } all frames frame idx set bounds frame width frame height frame idx++ = + frame width } = + frame height } frame width = get bounds width / all frames length - frame idx = 0 for frame idx < all frames length frame idx++ { try { internal frame all frames frame idx set maximum } catch property veto { stack trace } all frames frame idx set bounds frame width frame height = + frame width } check desktop size } set all size dimension { set minimum size set maximum size set preferred size set bounds 0 0 width height } set all size width height { set all size new dimension width height } private check desktop size { if get parent != visible { manager resize desktop } } } didesktop manager default desktop manager { private didesktop pane desktop didesktop manager didesktop pane new desktop { this desktop = new desktop } resizing frame component { super resizing frame resize desktop } dragging frame component { super dragging frame resize desktop } set normal size { scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets if scroll pane != { dimension = scroll pane get visible rect get size if scroll pane get border != { set size get width - scroll insets left - scroll insets right get height - scroll insets top - scroll insets bottom } set size get width - 20 get height - 20 desktop set all size scroll pane invalidate scroll pane validate } } private insets get scroll pane insets { scroll pane scroll pane = get scroll pane if scroll pane == || get scroll pane get border == { new insets 0 0 0 0 } else { get scroll pane get border get border insets scroll pane } } scroll pane get scroll pane { if desktop get parent instanceof viewport { viewport view port = viewport desktop get parent if view port get parent instanceof scroll pane scroll pane view port get parent } } resize desktop { = 0 = 0 scroll pane scroll pane = get scroll pane insets scroll insets = get scroll pane insets if scroll pane != { internal frame all frames = desktop get all frames for = 0 < all frames length i++ { if all frames get + all frames get width > { = all frames get + all frames get width } if all frames get + all frames get height > { = all frames get + all frames get height } } dimension d=scroll pane get visible rect get size if scroll pane get border != { set size get width - scroll insets left - scroll insets right get height - scroll insets top - scroll insets bottom } if <= get width { = get width - 20 } if <= get height { = get height - 20 } desktop set all size scroll pane invalidate scroll pane validate } } } 