org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt event * import awt geom * import util * import org jhotdraw geom * bezier node handle handle { index private composite edit edit private bezier path node old node bezier node handle bezier figure owner index { super owner this index = index } draw graphics2 { bezier figure = get bezier figure if get point count > index { bezier path node = get node index if mask == 0 { draw rectangle color black color white } else if mask == bezier path C1_MASK || mask == bezier path C2_MASK || !f closed mask == bezier path C1_MASK | bezier path C2_MASK index == 0 || index == get node count - 1 { draw diamond color black color white } else { draw circle color black color white } } } bezier figure get bezier figure { bezier figure get owner } point get location { get bezier figure get point count > index ? view drawing to view get bezier figure get point index 0 new point 10 10 } rectangle basic get bounds { rectangle = new rectangle get location grow get handlesize / 2 get handlesize / 2 } track start point anchor modifiers { bezier figure figure = get bezier figure view get drawing fire undoable edit happened edit = new composite edit punkt verschieben point2 location = view get constrainer constrain point view view to drawing get location point2 = view get constrainer constrain point view view to drawing anchor old node = figure get node index fire handle request secondary handles } track step point anchor point modifiers { bezier figure figure = get bezier figure figure will change point2 = view get constrainer constrain point view view to drawing bezier path node = figure get node index fire area invalidated move to fire area invalidated figure basic set node index figure changed } private fire area invalidated bezier path node { rectangle2 dr = new rectangle2 0 0 0 0 for i=1 < 3 i++ { dr add } rectangle vr = view drawing to view dr vr grow get handlesize get handlesize fire area invalidated vr } track point anchor point modifiers { bezier figure = get bezier figure if modifiers input event META_DOWN_MASK | input event CTRL_DOWN_MASK != 0 modifiers input event BUTTON2_DOWN_MASK == 0 { will change bezier path node = get node index if index > 0 index < get node count || closed { mask = mask + 3 % 4 } else if index == 0 { mask = mask bezier path C2_MASK == 0 ? bezier path C2_MASK 0 } else { mask = mask bezier path C1_MASK == 0 ? bezier path C1_MASK 0 } basic set node index changed fire handle request secondary handles } view get drawing fire undoable edit happened new bezier node edit index old node get node index view get drawing fire undoable edit happened edit } @ combinable with handle { } track click point modifiers { bezier figure = get bezier figure if get node count > 2 modifiers input event META_DOWN_MASK | input event CTRL_DOWN_MASK | input event ALT_DOWN_MASK == 0 { rectangle invalidated area = get draw bounds will change basic remove node index changed fire handle request remove invalidated area } } collection< handle> create secondary handles { bezier figure = get bezier figure linked list< handle> list = new linked list< handle> bezier path node = get node index if mask bezier path C1_MASK != 0 index != 0 || closed { list add new bezier control point handle index 1 } if mask bezier path C2_MASK != 0 index < get node count - 1 || closed { list add new bezier control point handle index 2 } if index > 0 || closed { = index == 0 ? get node count - 1 index - 1 = get node if mask bezier path C2_MASK != 0 { list add new bezier control point handle 2 } } if index < get node count - 2 || closed { = index == get node count - 1 ? 0 index + 1 = get node if mask bezier path C1_MASK != 0 { list add new bezier control point handle 1 } } list } } 