org jhotdraw draw import org jhotdraw geom quad tree2 import org jhotdraw util reversed list import awt * import awt geom * import javax swing * import javax swing event * import org jhotdraw util * import util * quad tree drawing drawing implements figure listener undoable edit listener { private list< figure> figures = new list< figure> private quad tree2 double< figure> quad tree = new quad tree2 double< figure> private needs sorting = quad tree drawing { } index of figure figure { figures index of figure } basic add index figure figure { figures add index figure quad tree add figure figure get draw bounds figure add figure listener this figure add undoable edit listener this needs sorting = } basic remove figure figure { figures remove figure quad tree remove figure figure remove figure listener this figure remove undoable edit listener this needs sorting = } draw graphics2 { collection< figure> = quad tree find intersects get clip bounds get bounds2 collection< figure> to draw = sort draw to draw } collection< figure> sort collection< figure> { ensure sorted list< figure> sorted = new list< figure> size for figure figures { if contains { sorted add } } sorted } draw graphics2 collection< figure> { for figure { draw } } figure area invalidated figure event { fire area invalidated get invalidated area } figure changed figure event { quad tree remove get figure quad tree add get figure get figure get draw bounds needs sorting = fire area invalidated get invalidated area } figure added figure event { } figure removed figure event { } figure request remove figure event { remove get figure } collection< figure> get figures rectangle2 bounds { quad tree find inside bounds } collection< figure> get figures { collections unmodifiable collection figures } figure find figure inside point2 { collection< figure> = quad tree find contains for figure get figures front to back { if contains contains { find figure inside } } } util list< figure> get figures front to back { ensure sorted new reversed list< figure> figures } figure find figure point2 { collection< figure> = quad tree find contains switch size { case 0 case 1 { figure = iterator next contains ? } default { for figure get figures front to back { if contains contains } } } } figure find figure point2 figure ignore { collection< figure> = quad tree find contains switch size { case 0 { } case 1 { figure = iterator next == ignore || ! contains ? } default { for figure get figures front to back { if != ignore contains } } } } figure find figure point2 collection ignore { collection< figure> = quad tree find contains switch size { case 0 { } case 1 { figure = iterator next ! ignore contains || ! contains ? } default { for figure get figures front to back { if ! ignore contains contains } } } } collection< figure> find figures rectangle2 { collection< figure> = quad tree find intersects switch size { case 0 case 1 default sort } } collection< figure> find figures within rectangle2 { collection< figure> = find figures list< figure> result = new list< figure> size for figure { if contains get bounds { result add } } result } bring to front figure figure { if figures remove figure { figures add figure needs sorting = fire area invalidated figure get draw bounds } } send to back figure figure { if figures remove figure { figures add 0 figure needs sorting = fire area invalidated figure get draw bounds } } undoable edit happened undoable edit event { fire undoable edit happened get edit } figure attribute changed figure event { } contains figure { figures contains } private ensure sorted { if needs sorting { collections sort figures figure layer comparator needs sorting = } } } 