org jhotdraw draw import awt * import awt geom * import * import util * import javax swing * import org jhotdraw draw attribute keys * import org jhotdraw geom * triangle figure attributed figure { private rectangle2 rectangle triangle figure { this 0 0 0 0 } triangle figure orientation direction { this 0 0 0 0 direction } triangle figure width height { this width height orientation } triangle figure width height orientation direction { rectangle = new rectangle2 width height set this direction } connector find connector point2 connection figure prototype { new chop triangle connector this } connector find compatible connector connector start connector { new chop triangle connector this } rectangle2 get bounds { rectangle2 bounds = rectangle2 rectangle clone bounds } draw fill graphics2 { rectangle2 = rectangle2 rectangle clone shape triangle = get bezier path grow = attribute keys get perpendicular fill growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create stroked shape triangle } fill triangle } draw stroke graphics2 { shape triangle = get bezier path grow = attribute keys get perpendicular draw growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle = gs create stroked shape triangle } draw triangle } collection< handle> create handles detail level { linked list< handle> handles = linked list< handle> super create handles detail level if detail level == 0 { handles add new triangle rotation handler this } handles } bezier path get bezier path { rectangle2 = rectangle2 rectangle clone bezier path triangle = new bezier path switch get this { case default triangle move to float + width / 2 float triangle line to float + width float + height triangle line to float float + height break case NORTH_EAST triangle move to float float triangle line to float + width float triangle line to float + width float + height break case triangle move to float float triangle line to float + width float + height / 2d triangle line to float float + height break case SOUTH_EAST triangle move to float + width float triangle line to float + width float + height triangle line to float float + height break case triangle move to float + width / 2 float + height triangle line to float float triangle line to float + width float break case SOUTH_WEST triangle move to float + width float + height triangle line to float float + height triangle line to float float break case triangle move to float float + height / 2 triangle line to float + width float triangle line to float + width float + height break case NORTH_WEST triangle move to float float + height triangle line to float float triangle line to float + width float break } triangle set closed triangle } contains point2 { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create stroked shape triangle } triangle contains } basic set bounds point2 anchor point2 { rectangle = math min anchor rectangle = math min anchor rectangle width = math max 0 1 math - anchor rectangle height = math max 0 1 math - anchor } rectangle2 get figure draw bounds { total stroke width = attribute keys get stroke total width this width = 0d if STROKE_COLOR get this != { switch STROKE_PLACEMENT get this { case sid width = 0d break case sid if STROKE_JOIN get this == basic stroke JOIN_MITER { width = total stroke width * STROKE_MITER_LIMIT_FACTOR get this } else { width = total stroke width } break case if STROKE_JOIN get this == basic stroke JOIN_MITER { width = total stroke width / 2d * STROKE_MITER_LIMIT_FACTOR get this } else { width = total stroke width / 2d } break } } width++ rectangle2 = get bounds geom grow width width } point2 chop point2 { shape triangle = get bezier path grow = attribute keys get perpendicular hit growth this if grow != 0d { grow stroke gs = new grow stroke float grow float attribute keys get stroke total width this * STROKE_MITER_LIMIT_FACTOR get this triangle =gs create stroked shape triangle } geom chop triangle } basic transform affine transform tx { point2 anchor = get start point point2 = get point basic set bounds point2 tx transform anchor anchor point2 tx transform } triangle figure clone { triangle figure that = triangle figure super clone that rectangle = rectangle2 this rectangle clone that } restore to geometry { rectangle2 = rectangle2 geometry rectangle = rectangle = rectangle width = width rectangle height = height } get restore data { rectangle clone } } 