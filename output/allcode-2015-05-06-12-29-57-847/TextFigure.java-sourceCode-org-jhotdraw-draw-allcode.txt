org jhotdraw draw import org jhotdraw util * import awt * import awt font * import awt geom * import util * import * import org jhotdraw draw attribute keys * import org jhotdraw geom * import org jhotdraw xml dom input import org jhotdraw xml dom output text figure attributed figure implements text holder { point2 origin = new point2 private editable = transient private text layout text layout text figure { this text } text figure text { set text text } get text { get attribute } set text new text { set attribute new text } basic transform affine transform tx { tx transform origin origin } basic set bounds point2 anchor point2 { origin = new point2 anchor anchor } contains point2 { if get bounds contains { } if decorator != { update decorator bounds decorator contains } } draw stroke awt graphics2 { } draw fill awt graphics2 { } draw text awt graphics2 { if get text != || editable { text layout layout = get text layout layout draw float origin float origin + layout get ascent } } invalidate { super invalidate text layout = } text layout get text layout { if text layout == { text = get text if text == || text length == 0 { text = } font render context frc = get font render context hash map< text attribute object> text attributes = new hash map< text attribute object> text attributes put text attribute get font if FONT_UNDERLINED get this { text attributes put text attribute text attribute UNDERLINE_LOW_ONE_PIXEL } text layout = new text layout text text attributes frc } text layout } rectangle2 get bounds { text layout layout = get text layout rectangle2 = new rectangle2 origin origin layout get advance layout get ascent + layout get descent } dimension2 get preferred size { rectangle2 = get bounds new dimension2 width height } rectangle2 get figure draw bounds { if get text == { get bounds } else { text layout layout = get text layout rectangle2 = new rectangle2 origin origin layout get advance layout get ascent rectangle2 bounds = layout get bounds if ! bounds empty ! bounds get { add new rectangle2 bounds get +origin bounds get +origin y+layout get ascent bounds get width bounds get height } geom grow 2d 2d } } collection< handle> create handles detail level { linked list< handle> handles = new linked list< handle> if detail level == 0 { handles add new move handle this relative locator north west handles add new move handle this relative locator north east handles add new move handle this relative locator south east handles add new font size handle this } handles } validate { super validate text layout = } editable { editable } set editable { this editable = } get text columns { get text == ? 4 math max get text length 4 } tool get tool point2 { editable contains ? new text tool this } read dom input { set bounds new point2 get attribute 0d get attribute 0d new point2 0 0 read attributes } write dom output out { rectangle2 = get bounds out add attribute out add attribute write attributes out } get tab size { 8 } text holder get label for { this } insets2 get insets { new insets2 0 0 0 0 } restore to geometry { point2 = point2 geometry origin = origin = } get restore data { origin clone } text figure clone { text figure that = text figure super clone that origin = point2 this origin clone that text layout = that } font get font { attribute keys get font this } color get text color { TEXT_COLOR get this } color get fill color { FILL_COLOR get this } set font size float size { FONT_SIZE set this new size } float get font size { FONT_SIZE get this float value } } 