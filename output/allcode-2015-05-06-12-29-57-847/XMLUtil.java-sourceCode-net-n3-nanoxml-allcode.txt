net n3 nanoxml import import reader import char reader xml util { skip comment xml reader reader xml parse { if reader read != '-' { xml util expected input reader get systemid reader get line nr <!-- } dashes read = 0 for { char ch = reader read switch ch { case '-' dashes read++ break case '>' if dashes read == 2 { } default dashes read = 0 } } } skip tag xml reader reader xml parse { level = 1 while level > 0 { char ch = reader read switch ch { case '<' ++level break case '>' --level break } } } scan publicid buffer publicid xml reader reader xml parse { if ! xml util check literal reader { } xml util skip whitespace reader publicid append xml util scan reader '\0' xml util skip whitespace reader xml util scan reader '\0' } scan systemid xml reader reader xml parse { if ! xml util check literal reader { } xml util skip whitespace reader xml util scan reader '\0' } scan identifier xml reader reader xml parse { buffer result = new buffer for { char ch = reader read if ch == '_' || ch == ' ' || ch == '-' || ch == ' ' || ch >= 'a' ch <= 'z' || ch >= ' a' ch <= ' z' || ch >= '0' ch <= '9' || ch > '\u007 e' { result append ch } else { reader unread ch break } } result to } scan xml reader reader char entity char xml entity resolver entity resolver xml parse { buffer result = new buffer starting level = reader get stream level char delim = reader read if delim != '\'' delim != ' ' { xml util expected input reader get systemid reader get line nr delimited } for { = xml util read reader entity char char ch = char 0 if ch == entity char { if char 1 == '#' { result append xml util process char literal } else { xml util process entity reader entity resolver } } else if ch == ' ' { reader unread ch = xml util read reader ' ' if char 1 == '#' { result append xml util process char literal } else { result append } } else if reader get stream level == starting level { if ch == delim { break } else if ch == 9 || ch == 10 || ch == 13 { result append ' ' } else { result append ch } } else { result append ch } } result to } process entity entity xml reader reader xml entity resolver entity resolver xml parse { entity = entity substring 1 entity length - 1 reader entity reader = entity resolver get entity reader entity if entity reader == { xml util invalid entity reader get systemid reader get line nr entity } external entity = entity resolver external entity entity reader start new stream entity reader !external entity } char process char literal entity xml parse { if entity char 2 == 'x' { entity = entity substring 3 entity length - 1 char integer parse entity 16 } else { entity = entity substring 2 entity length - 1 char integer parse entity 10 } } skip whitespace xml reader reader buffer buffer { char ch if buffer == { { ch = reader read } while ch == ' ' || ch == '\t' || ch == '\n' } else { for { ch = reader read if ch != ' ' ch != '\t' ch != '\n' { break } if ch == '\n' { buffer append '\n' } else { buffer append ' ' } } } reader unread ch } read xml reader reader char entity char xml parse { char ch = reader read buffer buf = new buffer buf append ch if ch == entity char { while ch != ' ' { ch = reader read buf append ch } } buf to } char read char xml reader reader char entity char xml parse { = xml util read reader entity char char ch = char 0 if ch == entity char { xml util unexpected entity reader get systemid reader get line nr } ch } check literal xml reader reader literal xml parse { for = 0 < literal length i++ { if reader read != literal char { } } } expected input systemid line nr expected xml parse { new xml parse systemid line nr expected + expected } invalid entity systemid line nr entity xml parse { new xml parse systemid line nr invalid entity ` + entity + ' } unexpected entity systemid line nr entity xml parse { new xml parse systemid line nr no entity reference expected here + entity + } unexpected systemid line nr xml parse { new xml parse systemid line nr no section expected here } invalid input systemid line nr unexpected xml parse { new xml parse systemid line nr invalid input + unexpected } wrong closing tag systemid line nr expected wrong xml parse { new xml parse systemid line nr closing tag does not match opening tag ` + wrong + ' != ` + expected + ' } closing tag not empty systemid line nr xml parse { new xml parse systemid line nr closing tag must be empty } missing element systemid line nr parent element missing element xml validation { new xml validation xml validation MISSING_ELEMENT systemid line nr missing element element + parent element + expects to have + missing element } unexpected element systemid line nr parent element unexpected element xml validation { new xml validation xml validation UNEXPECTED_ELEMENT systemid line nr unexpected element unexpected + unexpected element + + parent element } missing attribute systemid line nr element attribute xml validation { new xml validation xml validation MISSING_ATTRIBUTE systemid line nr element attribute element + element + expects attribute named + attribute } unexpected attribute systemid line nr element attribute xml validation { new xml validation xml validation UNEXPECTED_ATTRIBUTE systemid line nr element attribute element + element + did not expect attribute + named + attribute } invalid attribute value systemid line nr element attribute attribute value xml validation { new xml validation xml validation ATTRIBUTE_WITH_INVALID_VALUE systemid line nr element attribute attribute value invalid value for attribute + attribute } missing data systemid line nr parent element xml validation { new xml validation xml validation MISSING_PCDATA systemid line nr missing # element + parent element } unexpected data systemid line nr parent element xml validation { new xml validation xml validation UNEXPECTED_PCDATA systemid line nr unexpected # element + parent element } validation systemid line nr message element attribute attribute value xml validation { new xml validation xml validation MISC_ERROR systemid line nr element attribute attribute value message } } 