org jhotdraw app import org jhotdraw util * import org jhotdraw util prefs * import awt * import awt event * import beans * import * import util * import util prefs * import javax swing * import org jhotdraw app action about action import org jhotdraw app action actions import org jhotdraw app action clear action import org jhotdraw app action clear recent files action import org jhotdraw app action close action import org jhotdraw app action copy action import org jhotdraw app action cut action import org jhotdraw app action delete action import org jhotdraw app action duplicate action import org jhotdraw app action exit action import org jhotdraw app action export action import org jhotdraw app action load action import org jhotdraw app action load recent action import org jhotdraw app action new action import org jhotdraw app action paste action import org jhotdraw app action redo action import org jhotdraw app action save action import org jhotdraw app action save action import org jhotdraw app action select all action import org jhotdraw app action toggle visible action import org jhotdraw app action undo action default application application { private project current project private preferences prefs default application { } launch args { set property apple awt graphics use quartz super launch args } init { super init prefs = preferences user node for get model == ? get get model get init labels init look and feel init application actions } remove project { super remove if projects size == 0 { stop } } init look and feel { set property apple laf use screen menu bar set property com apple macos use screen menu bar set property apple awt graphics use quartz try { laf = manager get look and feel manager set look and feel laf } catch { stack trace } if manager get option pane css == { manager put option pane css } } init application actions { resource bundle util app labels = resource bundle util get bundle org jhotdraw app labels application model = get model put action about action new about action this put action exit action new exit action this put action clear action new clear action this put action new action new new action this app labels configure action get action new action new window put action load action new load action this put action clear recent files action new clear recent files action this put action save action new save action this put action save action new save action this put action close action new close action this put action undo action new undo action this put action redo action new redo action this put action cut action new cut action put action copy action new copy action put action paste action new paste action put action delete action new delete action put action duplicate action new duplicate action put action select all action new select all action } init project actions project { } show project { if ! showing { set showing = get frame = new frame title if == { title = labels get unnamed } else { title = get } if has unsaved changes { title += * } set title labels get formatted frame title title get get multiple open set default close operation frame DO_NOTHING_ON_CLOSE panel panel = panel wrap project component add panel set minimum size new dimension 200 200 set preferred size new dimension 600 400 set menu bar create menu bar util list< action> panel get client property tool bar actions preferences util install frame prefs handler prefs project point = get location moved { moved = for iterator i=projects iterator has next { project project = project next if project != swing utilities get window ancestor project get component != swing utilities get window ancestor project get component get location equals { += 22 += 22 moved = break } } } while moved set location add window listener new window adapter { window closing window event evt { set current project get model get action close action action performed new action event action event ACTION_PERFORMED window closing } window activated window event { set current project } } add property change listener new property change listener { property change property change event evt { = evt get property if equals has unsaved changes || equals || equals multiple open { = get title if == { title = labels get unnamed } else { title = get } if has unsaved changes { title += * } set title labels get formatted frame title title get get multiple open } } } set visible } } component wrap project component project { component = get component if get model != { linked list< action> tool bar actions = new linked list id=0 for tool bar tb new reversed list< tool bar> get model create tool bars this { id++ panel panel = new panel new border layout panel add tb border layout panel add border layout = panel preferences util install tool bar prefs handler prefs toolbar +id tb tool bar actions add first new toggle visible action tb tb get } tool bar tb = new tool bar tb set labels get standard tool bar title add standard actions to tb id++ panel panel = new panel new border layout panel add tb border layout panel add border layout = panel preferences util install tool bar prefs handler prefs toolbar +id tb tool bar actions add first new toggle visible action tb tb get panel put client property tool bar actions tool bar actions } } add standard actions to tool bar tb project { button application model = get model = tb add get action clear action set focusable = tb add get action load action set focusable = tb add get action save action tb add separator = tb add get action undo action set focusable = tb add get action redo action set focusable tb add separator = tb add get action cut action set focusable = tb add get action copy action set focusable = tb add get action paste action set focusable } hide project { if showing { set showing frame = frame swing utilities get window ancestor get component set visible remove get component dispose } } dispose project { super dispose if projects size == 0 { stop } } project get current project { current project } set current project project new value { project old value = current project current project = new value fire property change current project old value new value } menu bar create menu bar project util list< action> tool bar actions { application model model = get model resource bundle util labels = resource bundle util get bundle org jhotdraw app labels menu bar mb = new menu bar menu m2 menu item mi check box menu item cbmi menu open recent menu = new menu labels configure menu labels get add model get action clear action add model get action new action add model get action load action open recent menu = new menu labels configure menu open recent menu open recent open recent menu add model get action clear recent files action update open recent menu open recent menu add open recent menu add separator add model get action save action add model get action save action if model get action export action != { mi = add model get action export action } add separator add model get action exit action mb add = new menu labels configure menu labels get edit add model get action undo action add model get action redo action add separator add model get action cut action add model get action copy action add model get action paste action add model get action duplicate action add model get action delete action add separator add model get action select all action mb add menu view menu = for menu mm model create menus this { mb add mm if mm get text equals labels get view { view menu = mm } } if tool bar actions != tool bar actions size > 0 { = view menu != ? view menu new menu m2 = tool bar actions size == 1 ? new menu labels get tool bars labels configure menu labels get view for action tool bar actions { cbmi = new check box menu item actions configure check box menu item cbmi m2 add cbmi } if m2 != { add m2 } mb add } = new menu labels configure menu labels get help add model get action about action mb add add property change listener new property change listener { property change property change event evt { = evt get property if == project count { if == || projects contains { } else { remove property change listener this } } else if == recent files { update open recent menu open recent menu } } } mb } private update open recent menu menu open recent menu { if open recent menu get item count > 0 { menu item clear recent files item = menu item open recent menu get item open recent menu get item count - 1 open recent menu remove all for recent files { open recent menu add new load recent action default application this } if recent files size > 0 { open recent menu add separator } open recent menu add clear recent files item } } sharing tools among projects { } component get component { project = get current project == ? get component } } 