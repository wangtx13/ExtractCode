org jhotdraw draw import * import awt * import awt geom * import org jhotdraw geom geom import org jhotdraw util * import org jhotdraw draw attribute keys * line decoration implements line decoration { private filled private stroked private solid line decoration filled stroked solid { this filled = filled this stroked = stroked this solid = solid } filled { filled } stroked { stroked } solid { solid } draw graphics2 figure point2 p1 point2 p2 { general path path = get transformed decorator path p1 p2 color color if filled { if solid { color = STROKE_COLOR get } else { color = FILL_COLOR get } if color != { set color color fill path } } if stroked { color = STROKE_COLOR get if color != { set color color set stroke attribute keys get stroke draw path } } } rectangle2 get draw bounds figure point2 p1 point2 p2 { general path path = get transformed decorator path p1 p2 rectangle2 = path get bounds2 rectangle2 bounds = new rectangle2 get get get width get height if stroked { stroke width = STROKE_WIDTH get stroke join = STROKE_JOIN get float miter limit = float STROKE_MITER_LIMIT_FACTOR get * stroke width grow if stroke join == basic stroke JOIN_MITER { grow = 1 + stroke width / 2 * miter limit } else { grow = 1 + stroke width / 2 } geom grow bounds grow grow } bounds } get decoration radius figure { stroke width = STROKE_WIDTH get scale factor if stroke width > 1f { scale factor = 1d + stroke width - 1d / 2d } else { scale factor = 1d } get decorator path radius * scale factor } private general path get transformed decorator path figure point2 p1 point2 p2 { general path path = get decorator path stroke width = STROKE_WIDTH get affine transform transform = new affine transform transform translate p1 p1 transform rotate math atan2 p1 - p2 p2 - p1 if stroke width > 1f { transform scale 1d + stroke width - 1d / 2d 1d + stroke width - 1d / 2d } path transform transform path } set filled { filled = } set stroked { stroked = } set solid { solid = } general path get decorator path figure get decorator path radius figure } 