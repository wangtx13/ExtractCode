org jhotdraw draw import org jhotdraw util * import org jhotdraw undo * import awt * import awt geom * import awt event * import util * import awt dnd * bidirectional connection tool tool implements figure listener { private map< attribute key object> attributes private connector start connector private connector connector private connector target connector private figure target private connection figure connection private split point private connection figure edited connection private figure created figure private connection figure prototype bidirectional connection tool connection figure prototype { this prototype = prototype } bidirectional connection tool connection figure prototype map< attribute key object> attributes { this prototype = prototype this attributes = attributes } mouse moved mouse event evt { track connectors evt } mouse pressed mouse event evt { super mouse pressed evt point2 ap = view to drawing anchor set target figure find connection start ap get drawing if get target figure != { set start connector find connector ap target prototype if get start connector != prototype can connect get target figure { point2 = get start connector get anchor set connection create figure connection figure cf = get connection cf basic set bounds cf add figure listener this set created figure cf } } } mouse dragged awt event mouse event { point2 = view to drawing new point get get if get connection != { track connectors if get target connector != { = get target connector get anchor } get connection set point } else if edited connection != { edited connection set point split point } } mouse released mouse event { figure = point2 = view to drawing new point get get if get start connector != { = find target get drawing } if != { set connector find connector prototype if get connector != { composite edit creation edit = new composite edit verbindung erstellen get drawing fire undoable edit happened creation edit get drawing add get connection if get connection can connect get start connector get owner get connector get owner { get connection set start connector get start connector get connection set connector get connector } else { get connection set start connector get connector get connection set connector get start connector } get connection update connection get connection remove figure listener this get drawing fire undoable edit happened creation edit } } else if get connection != { get drawing remove get connection } set connection set start connector set connector set created figure fire tool done } activate drawing editor editor { super activate editor get view clear selection } deactivate drawing editor editor { super deactivate editor if get target figure != { get target figure set connectors visible } } connection figure create figure { connection figure = connection figure prototype clone get editor apply default attributes to if attributes != { for map entry< attribute key object> entry attributes entry set { set attribute entry get key entry get value } } } figure find source point2 drawing drawing { find connectable figure drawing } figure find target point2 drawing drawing { figure target = find connectable figure drawing figure start = get start connector get owner if target != get connection != target can connect get connection can connect start target || get connection can connect target start { target } } connection figure find connection point2 drawing drawing { for figure drawing get figures front to back { figure inside = find figure inside if inside != inside instanceof connection figure { connection figure inside } } } private set connection connection figure new connection { connection = new connection } connection figure get connection { connection } track connectors mouse event { point2 = view to drawing new point get get figure = if get start connector == { = find source get drawing } else { = find target get drawing } if != get target figure { if get target figure != { get target figure set connectors visible } set target figure if get start connector != { if get target figure != prototype can connect get start connector get owner get target figure || prototype can connect get target figure get start connector get owner { get target figure set connectors visible get connection } } else { if get target figure != prototype can connect get target figure { get target figure set connectors visible get connection } } } connector cc = if != { cc = find connector prototype } if cc != get target connector { set target connector cc } } draw graphics2 { if created figure != { created figure draw } } private connector find connector point2 figure target connection figure { target find connector } figure find connection start point2 drawing drawing { figure target = find connectable figure drawing if target != target can connect { target } } private figure find connectable figure point2 drawing drawing { drawing find figure created figure } private set start connector connector new start connector { start connector = new start connector } connector get start connector { start connector } private set connector connector new connector { connector = new connector } connector get connector { connector } private set target connector connector new target connector { target connector = new target connector } connector get target connector { target connector } private set target figure figure new target { target = new target } figure get target figure { target } figure get created figure { created figure } private set created figure figure new created figure { created figure = new created figure } figure area invalidated figure event evt { fire area invalidated evt get invalidated area } figure added figure event { } figure changed figure event { } figure removed figure event { } figure request remove figure event { } figure attribute changed figure event { } } 