org jhotdraw draw import org jhotdraw util * import util * import awt * import awt geom * import javax swing event * import javax swing undo * labeled line connection figure line connection figure implements composite figure { private layouter layouter private list< figure> children = new list private rectangle2 draw bounds private child handler child handler = new child handler this private child handler implements figure listener undoable edit listener { private labeled line connection figure owner private child handler labeled line connection figure owner { this owner = owner } figure request remove figure event { owner remove get figure } figure removed figure event evt { } figure changed figure event { if ! owner changing { owner will change owner fire figure changed owner changed } } figure added figure event { } figure attribute changed figure event { } figure area invalidated figure event { if ! owner changing { owner fire area invalidated get invalidated area } } undoable edit happened undoable edit event { owner fire undoable edit happened get edit } } labeled line connection figure { } draw figure graphics2 { super draw figure for figure child children { if child visible { child draw } } } basic transform affine transform tx { super basic transform tx for figure children { basic transform tx } invalidate bounds } basic set bounds point2 anchor point2 { super basic set bounds anchor invalidate } rectangle2 get bounds { super get bounds } rectangle2 get figure draw bounds { if draw bounds == { draw bounds = super get figure draw bounds for figure child get children front to back { if child visible { rectangle2 child bounds = child get draw bounds if ! child bounds empty { draw bounds add child bounds } } } } rectangle2 draw bounds clone } contains point2 { if get draw bounds contains { for figure child get children front to back { if child visible child contains } super contains } } invalidate bounds { draw bounds = } set attribute attribute key key new value { will change super set attribute key new value if attribute enabled key { if children != { for figure child children { child set attribute key new value } } } changed } figure find figure inside point2 { if get draw bounds contains { figure found = for figure child get children front to back { if child visible { found = child find figure inside if found != { found } } } } } update connection { super update connection layout } util list< figure> get children { collections unmodifiable list children } get child count { children size } figure get child index { children get index } set index figure child { children set index child } util list< figure> get children front to back { children == ? new linked list< figure> new reversed list< figure> children } add figure figure { basic add figure if get drawing != { figure add notify get drawing } } add index figure figure { basic add index figure if get drawing != { figure add notify get drawing } } basic add figure figure { basic add children size figure } basic add index figure figure { children add index figure figure add figure listener child handler figure add undoable edit listener child handler invalidate } remove figure figure { index = children index of figure if index == -1 { } else { will change basic remove child index if get drawing != { figure remove notify get drawing } changed } } figure remove child index { will change figure figure = basic remove child index if get drawing != { figure remove notify get drawing } changed figure } basic remove figure figure { index = children index of figure if index == -1 { } else { basic remove child index } } figure basic remove child index { figure figure = children remove index figure remove figure listener child handler figure remove undoable edit listener child handler figure } remove all children { will change while children size > 0 { figure figure = basic remove child children size - 1 if get drawing != { figure remove notify get drawing } } changed } basic remove all children { while children size > 0 { basic remove child children size - 1 } } layouter get layouter { layouter } set layouter layouter new layouter { this layouter = new layouter } layout { if get layouter != { rectangle2 bounds = get bounds point2 = new point2 bounds bounds rectangle2 = get layouter layout this invalidate bounds } } invalidate { super invalidate invalidate bounds } validate { super validate layout } add notify drawing drawing { for figure child new linked list< figure> children { child add notify drawing } super add notify drawing } remove notify drawing drawing { for figure child new linked list< figure> children { child remove notify drawing } super remove notify drawing } labeled line connection figure clone { labeled line connection figure that = labeled line connection figure super clone that child handler = new child handler that that children = new list< figure> for figure this child this children { figure that child = figure this child clone that children add that child that child add figure listener that child handler that child add undoable edit listener that child handler } that } remap hash map< figure figure> old to new { super remap old to new for figure child children { child remap old to new } } } 